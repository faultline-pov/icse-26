diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..29cadd1
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,30 @@
+FROM ubuntu:18.04
+
+# Install dependencies
+RUN apt-get update && apt-get install -y \
+    g++ \
+    make \
+    pkg-config \
+    libstfl-dev \
+    libjson-c-dev \
+    libxml2-dev \
+    libsqlite3-dev \
+    libcurl4-openssl-dev \
+    libncursesw5-dev \
+    gettext \
+    libssl-dev \
+    libncurses5-dev \
+    && rm -rf /var/lib/apt/lists/*
+
+# Copy the project files
+COPY . /project
+WORKDIR /project
+
+# Build the project
+RUN make
+
+# Make the test script executable
+RUN chmod +x test_vulnerability.sh
+
+# Run the test script
+CMD ["/bin/bash", "-c", "./test_vulnerability.sh"]
diff --git a/src/pb_controller.cpp b/src/pb_controller.cpp
index e46594f..57e8c96 100644
--- a/src/pb_controller.cpp
+++ b/src/pb_controller.cpp
@@ -362,6 +362,7 @@ void pb_controller::decrease_parallel_downloads() {
 }
 
 void pb_controller::play_file(const std::string& file) {
+	printf("[INSTRUMENTATION] play_file");
 	std::string cmdline;
 	std::string player = cfg->get_configvalue("player");
 	if (player == "")
diff --git a/src/pb_controller.cpp.debug b/src/pb_controller.cpp.debug
new file mode 100644
index 0000000..f48315d
--- /dev/null
+++ b/src/pb_controller.cpp.debug
@@ -0,0 +1,13 @@
+void pb_controller::play_file(const std::string& file) {
+	std::string cmdline;
+	std::string player = cfg->get_configvalue("player");
+	if (player == "")
+		return;
+	cmdline.append(player);
+	cmdline.append(" \"");
+	cmdline.append(utils::replace_all(file,"\"", "\\\""));
+	cmdline.append("\"");
+	std::cout << "DEBUG: About to execute command: " << cmdline << std::endl;
+	stfl::reset();
+	utils::run_interactively(cmdline, "pb_controller::play_file");
+}
\ No newline at end of file
diff --git a/src/queueloader.cpp b/src/queueloader.cpp
index 15047b6..6caf579 100644
--- a/src/queueloader.cpp
+++ b/src/queueloader.cpp
@@ -117,6 +117,7 @@ void queueloader::reload(std::vector<download>& downloads, bool remove_unplayed)
 }
 
 std::string queueloader::get_filename(const std::string& str) {
+	printf("[INSTRUMENTATION] get_filename");
 	std::string fn = ctrl->get_dlpath();
 
 	if (fn[fn.length()-1] != NEWSBEUTER_PATH_SEP[0])
diff --git a/test_vulnerability.sh b/test_vulnerability.sh
new file mode 100644
index 0000000..017be63
--- /dev/null
+++ b/test_vulnerability.sh
@@ -0,0 +1,34 @@
+#!/bin/bash
+
+# Test script for CVE-2017-14500 (Command Injection in podcast playback)
+
+# Create necessary directories
+mkdir -p ~/.newsbeuter/queue
+
+# Create a configuration file with a player command
+echo 'player "echo Playing podcast"' > ~/.newsbeuter/config
+
+# Create a queue file with a malicious filename containing shell metacharacters
+# Format: <url> <filename> <status>
+# The malicious filename contains a command to create a file in /tmp if executed
+echo 'http://example.com/podcast.mp3 "podcast_file;touch /tmp/command_injection_successful;.mp3" downloaded' > ~/.newsbeuter/queue/queue.default
+
+# Add debug output
+echo "Queue file content:"
+cat ~/.newsbeuter/queue/queue.default
+
+# Run podbeuter to play the podcast
+cd /project
+echo "Running podbeuter..."
+./podbeuter -C ~/.newsbeuter/config -q ~/.newsbeuter/queue/queue.default -a
+
+# Check if the command injection was successful
+if [ -f "/tmp/command_injection_successful" ]; then
+    echo "VULNERABILITY TEST FAILED: Command injection vulnerability exists!"
+    # Clean up the evidence file
+    rm /tmp/command_injection_successful
+    exit 1
+else
+    echo "VULNERABILITY TEST PASSED: Command injection vulnerability does not exist."
+    exit 0
+fi
