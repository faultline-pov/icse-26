diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 000000000..6aab74220
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,26 @@
+FROM ubuntu:latest
+
+ENV DEBIAN_FRONTEND=noninteractive
+
+# Update package lists and install build dependencies
+RUN apt-get -y update && \
+    apt-get install -y build-essential curl unzip wget \
+    libxml2-dev libssl-dev libsqlite3-dev zlib1g-dev autoconf re2c bison \
+    && rm -rf /var/lib/apt/lists/*
+
+# Copy the project files into the container
+COPY . /project
+
+# Set the working directory inside the container
+WORKDIR /project
+
+# Build PHP with CGI SAPI
+RUN ./buildconf --force && \
+    ./configure --enable-phar --enable-cgi --disable-all && \
+    make -j$(nproc)
+
+# Make the test script executable
+RUN chmod +x /project/run_test.sh
+
+# Command to run the test
+CMD ["/project/run_test.sh"]
\ No newline at end of file
diff --git a/create_phar.php b/create_phar.php
new file mode 100644
index 000000000..97fbe1ec8
--- /dev/null
+++ b/create_phar.php
@@ -0,0 +1,12 @@
+<?php
+// Create a new Phar archive
+$phar = new Phar('test.phar');
+
+// Add a file to the archive
+$phar->addFromString('index.php', '<?php echo "This is the index file"; ?>');
+
+// Set the stub
+$phar->setStub($phar->createDefaultStub('index.php'));
+
+echo "PHAR archive created successfully\n";
+?>
\ No newline at end of file
diff --git a/ext/phar/stub.h b/ext/phar/stub.h
index 28e32525b..8e53607eb 100644
--- a/ext/phar/stub.h
+++ b/ext/phar/stub.h
@@ -17,9 +17,11 @@
 */
 
 /* $Id$ */
+#include <stdio.h>
 
 static inline zend_string* phar_get_stub(const char *index_php, const char *web, const int name_len, const int web_len)
 {
+  printf("[INSTRUMENTATION] phar_get_stub");
 	static const char newstub0[] = "<?php\n\n$web = '";
 	static const char newstub1_0[] = "';\n\nif (in_array('phar', stream_get_wrappers()) && class_exists('Phar', 0)) {\nPhar::interceptFileFuncs();\nset_include_path('phar://' . __FILE__ . PATH_SEPARATOR . get_include_path());\nPhar::webPhar(null, $web);\ninclude 'phar://' . __FILE__ . '/' . Extract_Phar::START;\nreturn;\n}\n\nif (@(isset($_SERVER['REQUEST_URI']) && isset($_SERVER['REQUEST_METHOD']) && ($_SERVER['REQUEST_METHOD'] == 'GET' || $_SERVER['REQUEST_METHOD'] == 'POST'))) {\nExtract_Phar::go(true);\n$mimes = array(\n'phps' => 2,\n'c' => 'text/plain',\n'cc' => 'text/plain',\n'cpp' => 'text/plain',\n'c++' => 'text/plain',\n'dtd' => 'text/plain',\n'h' => 'text/plain',\n'log' => 'text/plain',\n'rng' => 'text/plain',\n'txt' => 'text/plain',\n'xsd' => 'text/plain',\n'php' => 1,\n'inc' => 1,\n'avi' => 'video/avi',\n'bmp' => 'image/bmp',\n'css' => 'text/css',\n'gif' => 'image/gif',\n'htm' => 'text/html',\n'html' => 'text/html',\n'htmls' => 'text/html',\n'ico' => 'image/x-ico',\n'jpe' => 'image/jpeg',\n'jpg' => 'image/jpeg',\n'jpeg' => 'image/jpeg',\n'js' => 'application/x-javascript',\n'midi' => 'audio/midi',\n'mid' => 'audio/midi',\n'mod' => 'audio/mod',\n'mov' => 'movie/quicktime',\n'mp3' => 'audio/mp3',\n'mpg' => 'video/mpeg',\n'mpeg' => 'video/mpeg',\n'pdf' => 'application/pdf',\n'png' => 'image/png',\n'swf' => 'application/shockwave-flash',\n'tif' => 'image/tiff',\n'tiff' => 'image/tiff',\n'wav' => 'audio/wav',\n'xbm' => 'image/xbm',\n'xml' => 'text/xml',\n);\n\nheader(\"Cache-Control: no-cache, must-revalidate\");\nheader(\"Pragma: no-cache\");\n\n$basename = basename(__FILE__);\nif (!strpos($_SERVER['REQUEST_URI'], $basename)) {\nchdir(Extract_Phar::$temp);\ninclude $web;\nreturn;\n}\n$pt = substr($_SERVER['REQUEST_URI'], strpos($_SERVER['REQUEST_URI'], $basename) + strlen($basename));\nif (!$pt || $pt == '/') {\n$pt = $web;\nheader('HTTP/1.1 301 Moved Permanently');\nheader('Location: ' . $_SERVER['REQUEST_URI'] . '/' . $pt);\nexit;\n}\n$a = realpath(Extract_Phar::$temp . DIRECTORY_SEPARATOR . $pt);\nif (!$a || strlen(dirname($a)) < strlen(";
 	static const char newstub1_1[] = "Extract_Phar::$temp)) {\nheader('HTTP/1.0 404 Not Found');\necho \"<html>\\n <head>\\n  <title>File Not Found<title>\\n </head>\\n <body>\\n  <h1>404 - File \", $pt, \" Not Found</h1>\\n </body>\\n</html>\";\nexit;\n}\n$b = pathinfo($a);\nif (!isset($b['extension'])) {\nheader('Content-Type: text/plain');\nheader('Content-Length: ' . filesize($a));\nreadfile($a);\nexit;\n}\nif (isset($mimes[$b['extension']])) {\nif ($mimes[$b['extension']] === 1) {\ninclude $a;\nexit;\n}\nif ($mimes[$b['extension']] === 2) {\nhighlight_file($a);\nexit;\n}\nheader('Content-Type: ' .$mimes[$b['extension']]);\nheader('Content-Length: ' . filesize($a));\nreadfile($a);\nexit;\n}\n}\n\nclass Extract_Phar\n{\nstatic $temp;\nstatic $origdir;\nconst GZ = 0x1000;\nconst BZ2 = 0x2000;\nconst MASK = 0x3000;\nconst START = '";
diff --git a/run_test.sh b/run_test.sh
new file mode 100644
index 000000000..00f006226
--- /dev/null
+++ b/run_test.sh
@@ -0,0 +1,22 @@
+#!/bin/bash
+
+# Create the PHAR archive
+cd /project
+./sapi/cli/php -d phar.readonly=0 create_phar.php
+
+# Set up environment variables for the CGI request
+export REDIRECT_STATUS=200
+export SCRIPT_NAME="/test.phar"
+export PATH_INFO="/<script>alert(\"XSS\")</script>"
+export REQUEST_METHOD="GET"
+export SCRIPT_FILENAME="/project/test.phar"
+
+# Run the CGI request and capture the output
+./sapi/cgi/php-cgi > output.txt
+
+# Display the captured output for debugging
+echo "CGI Output:"
+cat output.txt
+
+# Run the test script to check for the vulnerability
+./sapi/cli/php test_xss.php
diff --git a/test_xss.php b/test_xss.php
new file mode 100644
index 000000000..d90cb5a58
--- /dev/null
+++ b/test_xss.php
@@ -0,0 +1,19 @@
+<?php
+// This script tests for the PHAR 404 XSS vulnerability
+
+// Output the results of our test
+echo "Content-Type: text/plain\n\n";
+
+// Check if the output from the CGI request contains unescaped script tags
+$output = file_get_contents('output.txt');
+
+// If the script tags are properly escaped (e.g., &lt;script&gt;) or removed, the test should pass
+// If the raw script tags are present, the vulnerability exists
+if (strpos($output, '<script>alert("XSS")</script>') !== false) {
+    echo "VULNERABILITY DETECTED: XSS payload was not sanitized!\n";
+    exit(1); // Test fails if vulnerability exists
+} else {
+    echo "No XSS vulnerability detected. The output was properly sanitized.\n";
+    exit(0); // Test passes if vulnerability is fixed
+}
+?>
\ No newline at end of file
