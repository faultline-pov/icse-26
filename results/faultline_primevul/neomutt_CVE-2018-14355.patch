diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..da7cfc5
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,35 @@
+FROM ubuntu:18.04
+
+RUN apt-get update && apt-get install -y \
+    build-essential \
+    gcc \
+    make \
+    autoconf \
+    automake \
+    pkg-config \
+    libncursesw5-dev \
+    gettext \
+    libssl-dev \
+    libidn2-0-dev \
+    libidn11-dev \
+    libsasl2-dev \
+    libgpgme-dev \
+    libnotmuch-dev \
+    libtokyocabinet-dev \
+    libgss-dev \
+    libxapian-dev \
+    liblua5.2-dev \
+    libgmime-2.6-dev \
+    xsltproc
+
+WORKDIR /app
+COPY . /app
+
+# Build NeoMutt with minimal configuration
+RUN ./configure --disable-doc && make
+
+# Compile our test program
+RUN gcc -o test_vulnerability test_vulnerability.c
+
+# Run the test
+CMD ["./test_vulnerability"]
diff --git a/imap/util.c b/imap/util.c
index 614d87a..f2bfe4d 100644
--- a/imap/util.c
+++ b/imap/util.c
@@ -229,6 +229,7 @@ static int imap_hcache_namer(const char *path, char *dest, size_t dlen)
  */
 header_cache_t *imap_hcache_open(struct ImapData *idata, const char *path)
 {
+  printf("[INSTRUMENTATION] imap_hcache_open");
   struct ImapMbox mx;
   struct Url url;
   char cachepath[PATH_MAX];
diff --git a/test_vulnerability.c b/test_vulnerability.c
new file mode 100644
index 0000000..fc5d5b3
--- /dev/null
+++ b/test_vulnerability.c
@@ -0,0 +1,122 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <fcntl.h>
+#include <stdbool.h>
+#include <limits.h>
+
+// Define PATH_MAX if not defined
+#ifndef PATH_MAX
+#define PATH_MAX 4096
+#endif
+
+// Mock the global variables needed
+char *MessageCachedir = "/tmp/neomutt_cache";
+char *ImapDelimChars = "/";
+
+// Function declarations for the vulnerable functions
+void imap_fix_path(char delim, const char *mailbox, char *path, size_t plen);
+void imap_cachepath(const char *mailbox, char *dest, size_t dlen);
+
+// Create a test file in the cache directory
+int create_test_file(const char *path) {
+    int fd = open(path, O_WRONLY | O_CREAT, 0644);
+    if (fd == -1) {
+        perror("Failed to create test file");
+        return 1;
+    }
+    write(fd, "test content", 12);
+    close(fd);
+    return 0;
+}
+
+// Check if a file exists
+int file_exists(const char *path) {
+    struct stat st;
+    return stat(path, &st) == 0;
+}
+
+// Implementation of the vulnerable function
+void imap_fix_path(char delim, const char *mailbox, char *path, size_t plen) {
+    if (!mailbox || !*mailbox) {
+        *path = '\0';
+        return;
+    }
+
+    size_t i = 0;
+
+    while (mailbox && *mailbox && i < plen - 1) {
+        if ((ImapDelimChars && strchr(ImapDelimChars, *mailbox)) ||
+            (delim && *mailbox == delim)) {
+            path[i] = '/';
+        } else {
+            path[i] = *mailbox;
+        }
+        i++;
+        mailbox++;
+    }
+
+    path[i] = '\0';
+}
+
+// Implementation of the function that uses the vulnerable function
+void imap_cachepath(const char *mailbox, char *dest, size_t dlen) {
+    char path[PATH_MAX];
+    
+    // Call the vulnerable function
+    imap_fix_path('/', mailbox, path, sizeof(path));
+    
+    // Convert the path to a filesystem path
+    snprintf(dest, dlen, "%s/%s", MessageCachedir, path);
+}
+
+int main(int argc, char *argv[]) {
+    char dest[PATH_MAX];
+    char outside_path[PATH_MAX];
+    char expected_path[PATH_MAX];
+    
+    // Create cache directory
+    mkdir(MessageCachedir, 0755);
+    
+    // Create a file outside the cache directory that we'll try to access
+    snprintf(outside_path, sizeof(outside_path), "/tmp/outside_file");
+    create_test_file(outside_path);
+    
+    printf("Created test file: %s\n", outside_path);
+    
+    // Create a mailbox path with directory traversal
+    const char *mailbox = "../../../tmp/outside_file";
+    
+    // Call the vulnerable function
+    imap_cachepath(mailbox, dest, sizeof(dest));
+    
+    printf("Original mailbox: %s\n", mailbox);
+    printf("Cache path: %s\n", dest);
+    
+    // Check if the resulting path points outside the cache directory
+    snprintf(expected_path, sizeof(expected_path), "/tmp/outside_file");
+    
+    // If the path contains "../" sequences, it's vulnerable
+    if (strstr(dest, "../") != NULL) {
+        printf("Path contains directory traversal sequences!\n");
+        printf("VULNERABILITY EXISTS - TEST FAILED\n");
+        return 1; // Exit with error code if vulnerability exists
+    }
+    
+    // If the path resolves to the file outside the cache directory, it's vulnerable
+    char resolved_path[PATH_MAX];
+    realpath(dest, resolved_path);
+    
+    if (strcmp(resolved_path, expected_path) == 0) {
+        printf("Path resolves to file outside cache directory!\n");
+        printf("VULNERABILITY EXISTS - TEST FAILED\n");
+        return 1; // Exit with error code if vulnerability exists
+    }
+    
+    printf("Path does not allow directory traversal.\n");
+    printf("VULNERABILITY FIXED - TEST PASSED\n");
+    return 0; // Exit with success code if vulnerability is fixed
+}
