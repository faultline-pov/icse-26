diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..087a37e
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__uima-uimaj_CVE-2022-32287_3.3.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..9141c43
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,18 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__uima-uimaj_CVE-2022-32287_3.3.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn package -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+CMD ["sh", "-c", "cd uimaj-core && java -cp target/classes org.apache.uima.pear.tools.PathTraversalVulnerabilityTest"]
\ No newline at end of file
diff --git a/PathTraversalTest.java b/PathTraversalTest.java
new file mode 100644
index 0000000..a2f7aef
--- /dev/null
+++ b/PathTraversalTest.java
@@ -0,0 +1,78 @@
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.jar.JarEntry;
+import java.util.jar.JarOutputStream;
+import java.util.jar.JarFile;
+
+import org.apache.uima.pear.util.FileUtil;
+
+/**
+ * Test case for the path traversal vulnerability in FileUtil.extractFilesFromJar
+ */
+public class PathTraversalTest {
+
+    private static final String CANARY_CONTENT = "Path traversal test";
+    private static final String MALICIOUS_ENTRY = "../path_traversal_test.txt";
+
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting path traversal vulnerability test...");
+            
+            // Create a temporary directory for extraction
+            File tempDir = new File("/tmp/uima-test-dir");
+            if (!tempDir.exists()) {
+                tempDir.mkdirs();
+            }
+            System.out.println("Target directory: " + tempDir.getAbsolutePath());
+            
+            // The canary file that would be created outside the target directory if vulnerable
+            File canaryFile = new File(tempDir.getParentFile(), "path_traversal_test.txt");
+            System.out.println("Canary file would be: " + canaryFile.getAbsolutePath());
+            
+            // Delete the canary file if it exists from a previous run
+            if (canaryFile.exists()) {
+                canaryFile.delete();
+                System.out.println("Deleted existing canary file");
+            }
+            
+            // Create a malicious JAR file
+            File jarFile = new File(tempDir, "malicious.jar");
+            try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile))) {
+                // Add a malicious entry with path traversal sequence
+                JarEntry entry = new JarEntry(MALICIOUS_ENTRY);
+                jos.putNextEntry(entry);
+                jos.write(CANARY_CONTENT.getBytes());
+                jos.closeEntry();
+            }
+            System.out.println("Created malicious JAR: " + jarFile.getAbsolutePath());
+            
+            // Extract the malicious JAR file
+            try {
+                System.out.println("Extracting malicious JAR file...");
+                JarFile jar = new JarFile(jarFile);
+                FileUtil.extractFilesFromJar(jar, tempDir);
+                jar.close();
+                System.out.println("Extraction completed");
+            } catch (Exception e) {
+                System.out.println("Exception during extraction: " + e.getMessage());
+                e.printStackTrace();
+            }
+            
+            // Check if the vulnerability exists by looking for the canary file
+            if (canaryFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Path traversal attack succeeded!");
+                System.out.println("File created outside target directory: " + canaryFile.getAbsolutePath());
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("Path traversal attack failed - vulnerability does not exist or has been fixed.");
+                System.exit(0); // Test passes if vulnerability does not exist
+            }
+            
+        } catch (Exception e) {
+            System.err.println("Test failed with exception: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
diff --git a/uimaj-core/src/main/java/org/apache/uima/pear/tools/PathTraversalVulnerabilityTest.java b/uimaj-core/src/main/java/org/apache/uima/pear/tools/PathTraversalVulnerabilityTest.java
new file mode 100644
index 0000000..b6e857d
--- /dev/null
+++ b/uimaj-core/src/main/java/org/apache/uima/pear/tools/PathTraversalVulnerabilityTest.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.uima.pear.tools;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.jar.JarEntry;
+import java.util.jar.JarOutputStream;
+import java.util.jar.JarFile;
+
+import org.apache.uima.pear.util.FileUtil;
+
+/**
+ * Test case for the path traversal vulnerability in FileUtil.extractFilesFromJar
+ */
+public class PathTraversalVulnerabilityTest {
+
+    private static final String CANARY_CONTENT = "Path traversal test";
+    private static final String MALICIOUS_ENTRY = "../path_traversal_test.txt";
+
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting path traversal vulnerability test...");
+            
+            // Create a temporary directory for extraction
+            File tempDir = new File("/tmp/uima-test-dir");
+            if (!tempDir.exists()) {
+                tempDir.mkdirs();
+            }
+            System.out.println("Target directory: " + tempDir.getAbsolutePath());
+            
+            // The canary file that would be created outside the target directory if vulnerable
+            File canaryFile = new File(tempDir.getParentFile(), "path_traversal_test.txt");
+            System.out.println("Canary file would be: " + canaryFile.getAbsolutePath());
+            
+            // Delete the canary file if it exists from a previous run
+            if (canaryFile.exists()) {
+                canaryFile.delete();
+                System.out.println("Deleted existing canary file");
+            }
+            
+            // Create a malicious JAR file
+            File jarFile = new File(tempDir, "malicious.jar");
+            try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile))) {
+                // Add a malicious entry with path traversal sequence
+                JarEntry entry = new JarEntry(MALICIOUS_ENTRY);
+                jos.putNextEntry(entry);
+                jos.write(CANARY_CONTENT.getBytes());
+                jos.closeEntry();
+            }
+            System.out.println("Created malicious JAR: " + jarFile.getAbsolutePath());
+            
+            // Extract the malicious JAR file
+            try {
+                System.out.println("Extracting malicious JAR file...");
+                JarFile jar = new JarFile(jarFile);
+                FileUtil.extractFilesFromJar(jar, tempDir);
+                jar.close();
+                System.out.println("Extraction completed");
+            } catch (Exception e) {
+                System.out.println("Exception during extraction: " + e.getMessage());
+                e.printStackTrace();
+            }
+            
+            // Check if the vulnerability exists by looking for the canary file
+            if (canaryFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Path traversal attack succeeded!");
+                System.out.println("File created outside target directory: " + canaryFile.getAbsolutePath());
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("Path traversal attack failed - vulnerability does not exist or has been fixed.");
+                System.exit(0); // Test passes if vulnerability does not exist
+            }
+            
+        } catch (Exception e) {
+            System.err.println("Test failed with exception: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
diff --git a/uimaj-core/src/test/java/org/apache/uima/pear/tools/PathTraversalVulnerabilityTest.java b/uimaj-core/src/test/java/org/apache/uima/pear/tools/PathTraversalVulnerabilityTest.java
new file mode 100644
index 0000000..b6e857d
--- /dev/null
+++ b/uimaj-core/src/test/java/org/apache/uima/pear/tools/PathTraversalVulnerabilityTest.java
@@ -0,0 +1,99 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+ * KIND, either express or implied.  See the License for the
+ * specific language governing permissions and limitations
+ * under the License.
+ */
+
+package org.apache.uima.pear.tools;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.jar.JarEntry;
+import java.util.jar.JarOutputStream;
+import java.util.jar.JarFile;
+
+import org.apache.uima.pear.util.FileUtil;
+
+/**
+ * Test case for the path traversal vulnerability in FileUtil.extractFilesFromJar
+ */
+public class PathTraversalVulnerabilityTest {
+
+    private static final String CANARY_CONTENT = "Path traversal test";
+    private static final String MALICIOUS_ENTRY = "../path_traversal_test.txt";
+
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting path traversal vulnerability test...");
+            
+            // Create a temporary directory for extraction
+            File tempDir = new File("/tmp/uima-test-dir");
+            if (!tempDir.exists()) {
+                tempDir.mkdirs();
+            }
+            System.out.println("Target directory: " + tempDir.getAbsolutePath());
+            
+            // The canary file that would be created outside the target directory if vulnerable
+            File canaryFile = new File(tempDir.getParentFile(), "path_traversal_test.txt");
+            System.out.println("Canary file would be: " + canaryFile.getAbsolutePath());
+            
+            // Delete the canary file if it exists from a previous run
+            if (canaryFile.exists()) {
+                canaryFile.delete();
+                System.out.println("Deleted existing canary file");
+            }
+            
+            // Create a malicious JAR file
+            File jarFile = new File(tempDir, "malicious.jar");
+            try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(jarFile))) {
+                // Add a malicious entry with path traversal sequence
+                JarEntry entry = new JarEntry(MALICIOUS_ENTRY);
+                jos.putNextEntry(entry);
+                jos.write(CANARY_CONTENT.getBytes());
+                jos.closeEntry();
+            }
+            System.out.println("Created malicious JAR: " + jarFile.getAbsolutePath());
+            
+            // Extract the malicious JAR file
+            try {
+                System.out.println("Extracting malicious JAR file...");
+                JarFile jar = new JarFile(jarFile);
+                FileUtil.extractFilesFromJar(jar, tempDir);
+                jar.close();
+                System.out.println("Extraction completed");
+            } catch (Exception e) {
+                System.out.println("Exception during extraction: " + e.getMessage());
+                e.printStackTrace();
+            }
+            
+            // Check if the vulnerability exists by looking for the canary file
+            if (canaryFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Path traversal attack succeeded!");
+                System.out.println("File created outside target directory: " + canaryFile.getAbsolutePath());
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("Path traversal attack failed - vulnerability does not exist or has been fixed.");
+                System.exit(0); // Test passes if vulnerability does not exist
+            }
+            
+        } catch (Exception e) {
+            System.err.println("Test failed with exception: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
