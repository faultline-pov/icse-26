diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..a78dac1
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/whitesource__curekit_CVE-2022-23082_1.1.3 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..19baff0
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,18 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/whitesource__curekit_CVE-2022-23082_1.1.3 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+CMD ["java", "-cp", "target/classes:target/test-classes:target/dependency/*", "io.whitesource.cure.PathTraversalVulnerabilityTest"]
\ No newline at end of file
diff --git a/src/test/java/io/whitesource/cure/PathTraversalVulnerabilityTest.java b/src/test/java/io/whitesource/cure/PathTraversalVulnerabilityTest.java
new file mode 100644
index 0000000..15fdc00
--- /dev/null
+++ b/src/test/java/io/whitesource/cure/PathTraversalVulnerabilityTest.java
@@ -0,0 +1,96 @@
+package io.whitesource.cure;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+public class PathTraversalVulnerabilityTest {
+
+    public static void main(String[] args) {
+        try {
+            // Create a temporary directory structure for testing
+            Path tempDir = Files.createTempDirectory("curekit-test");
+            System.out.println("Created temp directory: " + tempDir);
+            
+            // Create a subdirectory
+            Path subDir = tempDir.resolve("subdir");
+            Files.createDirectory(subDir);
+            System.out.println("Created subdirectory: " + subDir);
+            
+            // Create a test file in the subdirectory
+            Path testFile = subDir.resolve("test.txt");
+            Files.write(testFile, "This is a test file".getBytes());
+            System.out.println("Created test file: " + testFile);
+            
+            // Create a sensitive file outside the subdirectory
+            Path sensitiveFile = tempDir.resolve("sensitive.txt");
+            Files.write(sensitiveFile, "This is sensitive data".getBytes());
+            System.out.println("Created sensitive file: " + sensitiveFile);
+            
+            // Test the vulnerability
+            boolean isVulnerable = false;
+            
+            // Test with various path traversal techniques
+            String[] testPaths = {
+                // Test with a path that uses ../ to escape the directory
+                subDir.toString() + File.separator + ".." + File.separator + sensitiveFile.toFile().getName(),
+                
+                // Test with a path that uses multiple ../ sequences
+                subDir.toString() + File.separator + ".." + File.separator + "." + File.separator + sensitiveFile.toFile().getName(),
+                
+                // Test with a path that uses a combination of ./ and ../ sequences
+                subDir.toString() + File.separator + "." + File.separator + ".." + File.separator + sensitiveFile.toFile().getName(),
+                
+                // Test with a path that uses a non-existent directory and ../ to escape
+                subDir.toString() + File.separator + "nonexistent" + File.separator + ".." + File.separator + ".." + File.separator + sensitiveFile.toFile().getName(),
+                
+                // Test with a path that uses URL encoding for the traversal sequence
+                subDir.toString() + File.separator + "%2e%2e" + File.separator + sensitiveFile.toFile().getName(),
+                
+                // Test with a path that uses Unicode representation for the traversal sequence
+                subDir.toString() + File.separator + "\u002e\u002e" + File.separator + sensitiveFile.toFile().getName(),
+                
+                // Test with a path that uses Windows-style backslashes
+                subDir.toString().replace("/", "\\") + "\\..\\" + sensitiveFile.toFile().getName()
+            };
+            
+            for (String testPath : testPaths) {
+                System.out.println("\nTesting path: " + testPath);
+                try {
+                    boolean isOutside = FileSecurityUtils.isFileOutsideDir(testPath, subDir.toString());
+                    System.out.println("isFileOutsideDir returned: " + isOutside);
+                    
+                    // If isOutside is false, the vulnerability exists
+                    if (!isOutside) {
+                        System.out.println("VULNERABILITY FOUND: Path traversal vulnerability exists with path: " + testPath);
+                        isVulnerable = true;
+                        break;
+                    }
+                } catch (Exception e) {
+                    System.out.println("Exception with path '" + testPath + "': " + e.getMessage());
+                }
+            }
+            
+            // Clean up
+            Files.deleteIfExists(testFile);
+            Files.deleteIfExists(sensitiveFile);
+            Files.deleteIfExists(subDir);
+            Files.deleteIfExists(tempDir);
+            
+            if (isVulnerable) {
+                System.out.println("\nVULNERABILITY DETECTED: Path traversal vulnerability exists!");
+                System.exit(1); // Exit with error if vulnerability exists
+            } else {
+                System.out.println("\nSECURE: No path traversal vulnerability detected.");
+                System.exit(0); // Exit with success if no vulnerability
+            }
+            
+        } catch (Exception e) {
+            System.err.println("Test failed with exception: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(2); // Exit with error code 2 for test failure
+        }
+    }
+}
