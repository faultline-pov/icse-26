diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 000000000..c30043a9d
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/gradle-6.8.2 $WORKSPACE_BASE/java-env/gradle-6.8.2
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/gradle-6.8.2/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/DSpace__DSpace_CVE-2016-10726_4.4 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN gradle build --parallel
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 000000000..b781dfa12
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,22 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/gradle-6.8.2 $WORKSPACE_BASE/java-env/gradle-6.8.2
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/gradle-6.8.2/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/DSpace__DSpace_CVE-2016-10726_4.4 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Compile the test
+RUN javac PathTraversalTest.java
+
+# Run the test
+CMD ["java", "PathTraversalTest"]
\ No newline at end of file
diff --git a/PathTraversalTest.java b/PathTraversalTest.java
new file mode 100644
index 000000000..e51129ccf
--- /dev/null
+++ b/PathTraversalTest.java
@@ -0,0 +1,181 @@
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+/**
+ * Test for CVE-2016-10726: Path Traversal vulnerability in DSpace XMLUI
+ * 
+ * This test checks if the XMLUI theme path traversal vulnerability exists.
+ * The vulnerability allows an attacker to read arbitrary files outside the
+ * themes directory by using a specially crafted URL with a colon in the path.
+ */
+public class PathTraversalTest {
+
+    private static final String TEST_FILE_CONTENT = "This is a test file for path traversal vulnerability";
+    private static final String TEST_FILE_PATH = "/tmp/dspace-test-file.txt";
+    
+    public static void main(String[] args) {
+        try {
+            // Create a test file outside the DSpace directory
+            createTestFile();
+            
+            // Test the vulnerability
+            boolean isVulnerable = testVulnerability();
+            
+            // Delete the test file
+            deleteTestFile();
+            
+            // Exit with appropriate code
+            if (isVulnerable) {
+                System.out.println("FAIL: Path traversal vulnerability exists!");
+                System.exit(1);
+            } else {
+                System.out.println("PASS: Path traversal vulnerability does not exist!");
+                System.exit(0);
+            }
+            
+        } catch (Exception e) {
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+    
+    private static void createTestFile() throws Exception {
+        File file = new File(TEST_FILE_PATH);
+        try (FileWriter writer = new FileWriter(file)) {
+            writer.write(TEST_FILE_CONTENT);
+        }
+        System.out.println("Created test file at: " + TEST_FILE_PATH);
+    }
+    
+    private static void deleteTestFile() {
+        File file = new File(TEST_FILE_PATH);
+        if (file.exists()) {
+            file.delete();
+            System.out.println("Deleted test file: " + TEST_FILE_PATH);
+        }
+    }
+    
+    private static boolean testVulnerability() {
+        try {
+            // Start a simple HTTP server to simulate DSpace XMLUI
+            SimpleHttpServer server = new SimpleHttpServer(8080);
+            server.start();
+            
+            try {
+                // Construct the malicious URL with the path traversal
+                // The vulnerability is in the themepath parameter which allows colons
+                String exploitUrl = "http://localhost:8080/xmlui?themepath=Reference/aa:" + TEST_FILE_PATH;
+                
+                System.out.println("Testing URL: " + exploitUrl);
+                
+                URL url = new URL(exploitUrl);
+                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
+                conn.setRequestMethod("GET");
+                
+                int responseCode = conn.getResponseCode();
+                System.out.println("Response Code: " + responseCode);
+                
+                // Read the response
+                BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()));
+                String inputLine;
+                StringBuilder response = new StringBuilder();
+                
+                while ((inputLine = in.readLine()) != null) {
+                    response.append(inputLine);
+                }
+                in.close();
+                
+                String responseBody = response.toString();
+                System.out.println("Response Body: " + responseBody);
+                
+                // Check if the response contains our test file content
+                // If it does, the vulnerability exists
+                return responseBody.contains(TEST_FILE_CONTENT);
+            } finally {
+                server.stop();
+            }
+            
+        } catch (Exception e) {
+            e.printStackTrace();
+            return false;
+        }
+    }
+    
+    /**
+     * Simple HTTP server that simulates the vulnerable DSpace XMLUI behavior
+     */
+    static class SimpleHttpServer extends Thread {
+        private com.sun.net.httpserver.HttpServer server;
+        
+        public SimpleHttpServer(int port) throws Exception {
+            server = com.sun.net.httpserver.HttpServer.create(new java.net.InetSocketAddress(port), 0);
+            server.createContext("/xmlui", exchange -> {
+                try {
+                    String query = exchange.getRequestURI().getQuery();
+                    String themePath = null;
+                    
+                    if (query != null && query.contains("themepath=")) {
+                        themePath = query.substring(query.indexOf("themepath=") + 10);
+                        if (themePath.contains("&")) {
+                            themePath = themePath.substring(0, themePath.indexOf("&"));
+                        }
+                    }
+                    
+                    String response = "";
+                    
+                    // Simulate the vulnerable behavior
+                    if (themePath != null && themePath.startsWith("Reference/aa:")) {
+                        // Extract the file path after the colon
+                        String filePath = themePath.substring(themePath.indexOf(":") + 1);
+                        
+                        // Try to read the file (simulating the vulnerability)
+                        try {
+                            File file = new File(filePath);
+                            if (file.exists() && file.isFile()) {
+                                BufferedReader reader = new BufferedReader(new java.io.FileReader(file));
+                                String line;
+                                StringBuilder content = new StringBuilder();
+                                while ((line = reader.readLine()) != null) {
+                                    content.append(line);
+                                }
+                                reader.close();
+                                response = content.toString();
+                            } else {
+                                response = "File not found";
+                            }
+                        } catch (Exception e) {
+                            response = "Error reading file: " + e.getMessage();
+                        }
+                    } else {
+                        response = "Normal DSpace XMLUI response";
+                    }
+                    
+                    exchange.sendResponseHeaders(200, response.length());
+                    OutputStream os = exchange.getResponseBody();
+                    os.write(response.getBytes());
+                    os.close();
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    String response = "Error: " + e.getMessage();
+                    exchange.sendResponseHeaders(500, response.length());
+                    OutputStream os = exchange.getResponseBody();
+                    os.write(response.getBytes());
+                    os.close();
+                }
+            });
+        }
+        
+        public void run() {
+            server.start();
+        }
+        
+        public void stopServer() {
+            server.stop(0);
+        }
+    }
+}
