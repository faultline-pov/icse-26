diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..d56a02c
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/spring-cloud__spring-cloud-gateway_CVE-2022-22947_3.0.6 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/DirectVulnerabilityTest.java b/DirectVulnerabilityTest.java
new file mode 100644
index 0000000..7f09c29
--- /dev/null
+++ b/DirectVulnerabilityTest.java
@@ -0,0 +1,124 @@
+import org.springframework.beans.factory.support.DefaultListableBeanFactory;
+import org.springframework.cloud.gateway.filter.FilterDefinition;
+import org.springframework.cloud.gateway.handler.predicate.PredicateDefinition;
+import org.springframework.cloud.gateway.route.RouteDefinition;
+import org.springframework.cloud.gateway.support.ShortcutConfigurable;
+import org.springframework.context.expression.BeanFactoryResolver;
+import org.springframework.expression.Expression;
+import org.springframework.expression.common.TemplateParserContext;
+import org.springframework.expression.spel.standard.SpelExpressionParser;
+import org.springframework.expression.spel.support.StandardEvaluationContext;
+
+import java.io.File;
+import java.net.URI;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Direct test for CVE-2022-22947 in Spring Cloud Gateway
+ * This test directly tests the vulnerable code path without starting a full Spring Boot application
+ */
+public class DirectVulnerabilityTest {
+
+    private static final String TEST_FILE = "/tmp/spring_gateway_vulnerability_test";
+
+    public static void main(String[] args) {
+        try {
+            // Delete the test file if it exists from a previous run
+            File testFile = new File(TEST_FILE);
+            if (testFile.exists()) {
+                testFile.delete();
+                System.out.println("Deleted existing test file");
+            }
+            
+            // Create a route definition with a malicious SpEL expression
+            RouteDefinition routeDefinition = createMaliciousRouteDefinition();
+            
+            // Create a bean factory
+            DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory();
+            
+            // Create a SpEL expression parser
+            SpelExpressionParser parser = new SpelExpressionParser();
+            
+            // Process the filter definitions (this is where the vulnerability is)
+            for (FilterDefinition filterDefinition : routeDefinition.getFilters()) {
+                Map<String, String> args = filterDefinition.getArgs();
+                
+                // This simulates the processing in ShortcutConfigurable.ShortcutType.DEFAULT.normalize
+                for (Map.Entry<String, String> entry : args.entrySet()) {
+                    String key = entry.getKey();
+                    String entryValue = entry.getValue();
+                    
+                    // This is the vulnerable code path
+                    Object value;
+                    String rawValue = entryValue;
+                    if (rawValue != null) {
+                        rawValue = rawValue.trim();
+                    }
+                    
+                    System.out.println("Processing filter argument: " + key + "=" + rawValue);
+                    
+                    if (rawValue != null && rawValue.startsWith("#{") && rawValue.endsWith("}")) {
+                        // This is where the SpEL expression is evaluated
+                        System.out.println("Found SpEL expression: " + rawValue);
+                        
+                        // Create a SpEL evaluation context
+                        StandardEvaluationContext context = new StandardEvaluationContext();
+                        context.setBeanResolver(new BeanFactoryResolver(beanFactory));
+                        
+                        // Parse and evaluate the SpEL expression
+                        Expression expression = parser.parseExpression(entryValue, new TemplateParserContext());
+                        value = expression.getValue(context);
+                        
+                        System.out.println("SpEL expression evaluated to: " + value);
+                    } else {
+                        value = entryValue;
+                    }
+                }
+            }
+            
+            // Check if the file was created (which would indicate the vulnerability exists)
+            if (testFile.exists()) {
+                System.out.println("VULNERABILITY TEST FAILED: Code injection vulnerability exists!");
+                // Clean up the file
+                testFile.delete();
+                // Exit with non-zero code to indicate the vulnerability exists
+                System.exit(1);
+            } else {
+                System.out.println("VULNERABILITY TEST PASSED: No code injection vulnerability detected.");
+                // Exit with code 0 to indicate the vulnerability does not exist
+                System.exit(0);
+            }
+        } catch (Exception e) {
+            System.out.println("Error during test: " + e.getMessage());
+            e.printStackTrace();
+            // If we can't complete the test, assume the vulnerability might exist
+            System.exit(1);
+        }
+    }
+    
+    private static RouteDefinition createMaliciousRouteDefinition() {
+        // Create a route definition with a malicious SpEL expression
+        RouteDefinition routeDefinition = new RouteDefinition();
+        routeDefinition.setId("test-route");
+        routeDefinition.setUri(URI.create("http://localhost:8080"));
+        
+        // Add a predicate to match all requests
+        PredicateDefinition predicate = new PredicateDefinition();
+        predicate.setName("Path");
+        predicate.addArg("pattern", "/**");
+        routeDefinition.setPredicates(Collections.singletonList(predicate));
+        
+        // Add a filter with a malicious SpEL expression that will create a file
+        FilterDefinition filter = new FilterDefinition();
+        filter.setName("AddResponseHeader");
+        filter.addArg("name", "X-Test-Header");
+        filter.addArg("value", "#{new java.io.File('" + TEST_FILE + "').createNewFile()}");
+        routeDefinition.setFilters(Collections.singletonList(filter));
+        
+        return routeDefinition;
+    }
+}
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..b30d1dc
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,25 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/spring-cloud__spring-cloud-gateway_CVE-2022-22947_3.0.6 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Build the Spring Cloud Gateway project
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Compile the vulnerability test
+RUN javac -cp "/project/spring-cloud-gateway-server/target/spring-cloud-gateway-server-3.0.6.jar:/project/spring-cloud-gateway-server/target/spring-cloud-gateway-server-3.0.6-tests.jar:/project/spring-cloud-gateway-server/target/classes:/project/spring-cloud-gateway-server/target/dependency/*" DirectVulnerabilityTest.java
+
+# Run the vulnerability test
+CMD ["java", "-cp", ".:spring-cloud-gateway-server/target/spring-cloud-gateway-server-3.0.6.jar:spring-cloud-gateway-server/target/spring-cloud-gateway-server-3.0.6-tests.jar:spring-cloud-gateway-server/target/classes:spring-cloud-gateway-server/target/dependency/*", "DirectVulnerabilityTest"]
\ No newline at end of file
