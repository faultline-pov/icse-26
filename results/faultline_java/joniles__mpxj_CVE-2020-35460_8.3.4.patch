diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..df7da06
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/joniles__mpxj_CVE-2020-35460_8.3.4 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..001327d
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,23 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/joniles__mpxj_CVE-2020-35460_8.3.4 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Copy dependencies to target/dependency
+RUN mvn dependency:copy-dependencies -DoutputDirectory=target/dependency
+
+# Run the path traversal vulnerability test
+CMD ["java", "-cp", "target/classes:target/test-classes:target/dependency/*", "net.sf.mpxj.junit.PathTraversalTest"]
\ No newline at end of file
diff --git a/src/test/java/net/sf/mpxj/junit/PathTraversalTest.java b/src/test/java/net/sf/mpxj/junit/PathTraversalTest.java
new file mode 100644
index 0000000..7ccbe25
--- /dev/null
+++ b/src/test/java/net/sf/mpxj/junit/PathTraversalTest.java
@@ -0,0 +1,151 @@
+/*
+ * file:       PathTraversalTest.java
+ * author:     Test Author
+ * copyright:  (c) Test 2023
+ * date:       2023-01-01
+ */
+
+package net.sf.mpxj.junit;
+
+import static org.junit.Assert.*;
+
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import org.junit.Test;
+
+import net.sf.mpxj.common.InputStreamHelper;
+
+/**
+ * Test to verify if the path traversal vulnerability in InputStreamHelper has been fixed.
+ */
+public class PathTraversalTest
+{
+    /**
+     * Test for path traversal vulnerability in InputStreamHelper.writeZipStreamToTempDir.
+     * This test creates a malicious ZIP file with a path traversal sequence in the entry name,
+     * then passes it to the vulnerable method to see if it writes outside the intended directory.
+     * 
+     * @throws Exception if an error occurs during the test
+     */
+    @Test
+    public void testPathTraversalVulnerability() throws Exception
+    {
+        System.out.println("Starting path traversal vulnerability test...");
+        
+        // Create a temporary directory to represent our "safe" extraction zone
+        File tempDir = Files.createTempDirectory("mpxj-test").toFile();
+        tempDir.deleteOnExit();
+        System.out.println("Created temporary directory: " + tempDir.getAbsolutePath());
+        
+        // Create a file path that would be outside the temp directory using path traversal
+        Path targetFilePath = Paths.get(tempDir.getParent(), "path-traversal-test.txt");
+        System.out.println("Target file path (should NOT be created): " + targetFilePath.toString());
+        
+        // Delete the target file if it exists from a previous test run
+        Files.deleteIfExists(targetFilePath);
+        
+        // Create a malicious ZIP file with a path traversal sequence
+        File zipFile = createMaliciousZipFile(tempDir, targetFilePath.getFileName().toString());
+        System.out.println("Created malicious ZIP file: " + zipFile.getAbsolutePath());
+        
+        try {
+            // Process the ZIP file using the potentially vulnerable method
+            System.out.println("Processing ZIP file with InputStreamHelper.writeZipStreamToTempDir...");
+            FileInputStream fis = new FileInputStream(zipFile);
+            File extractedDir = InputStreamHelper.writeZipStreamToTempDir(fis);
+            fis.close();
+            System.out.println("ZIP file extracted to: " + extractedDir.getAbsolutePath());
+            
+            // Check if the vulnerability exists by looking for the file outside the temp directory
+            boolean vulnerabilityExists = Files.exists(targetFilePath);
+            System.out.println("Checking if target file exists (vulnerability indicator): " + vulnerabilityExists);
+            
+            if (vulnerabilityExists) {
+                System.out.println("VULNERABILITY DETECTED: File was created outside the intended directory!");
+                System.out.println("File content: " + new String(Files.readAllBytes(targetFilePath)));
+            } else {
+                System.out.println("No vulnerability detected. Path traversal was prevented.");
+            }
+            
+            // Clean up
+            if (extractedDir != null) {
+                extractedDir.delete();
+            }
+            
+            // The test should fail if the vulnerability exists
+            assertFalse("Path traversal vulnerability exists: file was written outside the target directory", vulnerabilityExists);
+            
+        } finally {
+            // Clean up
+            System.out.println("Cleaning up test files...");
+            zipFile.delete();
+            Files.deleteIfExists(targetFilePath);
+        }
+    }
+    
+    /**
+     * Creates a malicious ZIP file with a path traversal sequence in the entry name.
+     * 
+     * @param tempDir temporary directory
+     * @param targetFileName name of the target file
+     * @return File object representing the created ZIP file
+     * @throws IOException if an error occurs creating the ZIP file
+     */
+    private File createMaliciousZipFile(File tempDir, String targetFileName) throws IOException
+    {
+        // Create a temporary ZIP file
+        File zipFile = File.createTempFile("malicious", ".zip");
+        zipFile.deleteOnExit();
+        
+        // Create the ZIP with a path traversal entry
+        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile));
+        
+        // Create a malicious entry with path traversal sequence
+        // The "../" sequence attempts to navigate up one directory level
+        String maliciousEntryName = "../" + targetFileName;
+        System.out.println("Creating ZIP entry with malicious path: " + maliciousEntryName);
+        ZipEntry entry = new ZipEntry(maliciousEntryName);
+        zos.putNextEntry(entry);
+        
+        // Write some content to the entry
+        byte[] data = "This file was created by exploiting a path traversal vulnerability.".getBytes();
+        zos.write(data, 0, data.length);
+        zos.closeEntry();
+        zos.close();
+        
+        return zipFile;
+    }
+    
+    /**
+     * Main method to run the test directly.
+     * 
+     * @param args command line arguments
+     */
+    public static void main(String[] args)
+    {
+        try {
+            System.out.println("=== Path Traversal Vulnerability Test ===\n");
+            PathTraversalTest test = new PathTraversalTest();
+            test.testPathTraversalVulnerability();
+            System.out.println("\nTest passed - vulnerability does not exist");
+            System.exit(0);
+        } catch (AssertionError e) {
+            System.out.println("\nTest failed - vulnerability exists: " + e.getMessage());
+            System.exit(1);
+        } catch (Exception e) {
+            System.out.println("\nTest error: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(2);
+        }
+    }
+}
