diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..6af4c69
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..4c2f18d
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,23 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Copy dependencies to target/dependency
+RUN mvn dependency:copy-dependencies
+
+# Run our vulnerability test
+CMD ["mvn", "test", "-Dtest=ZipSlipVulnerabilityTest"]
\ No newline at end of file
diff --git a/src/test/java/org/zeroturnaround/zip/ZipSlipVulnerabilityTest.java b/src/test/java/org/zeroturnaround/zip/ZipSlipVulnerabilityTest.java
new file mode 100644
index 0000000..36def2d
--- /dev/null
+++ b/src/test/java/org/zeroturnaround/zip/ZipSlipVulnerabilityTest.java
@@ -0,0 +1,118 @@
+package org.zeroturnaround.zip;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import junit.framework.TestCase;
+
+/**
+ * Test for CVE-2018-1002201 (Zip Slip vulnerability)
+ * This test verifies if the library is vulnerable to path traversal attacks
+ * through malicious zip entries containing "../" sequences.
+ */
+public class ZipSlipVulnerabilityTest extends TestCase {
+
+    private static final String MALICIOUS_ZIP_ENTRY_NAME = "../outside-target-dir.txt";
+    private static final String CANARY_CONTENT = "This file should not exist outside the target directory";
+    
+    /**
+     * Creates a zip file with a malicious entry that attempts to write outside the target directory
+     * using path traversal with "../" sequences.
+     */
+    private File createMaliciousZipFile() throws IOException {
+        File zipFile = File.createTempFile("malicious", ".zip");
+        zipFile.deleteOnExit();
+        
+        System.out.println("Creating malicious zip file: " + zipFile.getAbsolutePath());
+        
+        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile));
+        try {
+            ZipEntry entry = new ZipEntry(MALICIOUS_ZIP_ENTRY_NAME);
+            zos.putNextEntry(entry);
+            zos.write(CANARY_CONTENT.getBytes());
+            zos.closeEntry();
+            System.out.println("Added malicious entry: " + MALICIOUS_ZIP_ENTRY_NAME);
+        } finally {
+            zos.close();
+        }
+        
+        return zipFile;
+    }
+    
+    /**
+     * Test if the library is vulnerable to Zip Slip (path traversal).
+     * The test creates a zip file with a malicious entry that attempts to write
+     * outside the target directory using "../" sequences.
+     * 
+     * If the vulnerability exists, the file will be written outside the target directory.
+     * If the vulnerability is fixed, the file will not be written or an exception will be thrown.
+     */
+    public void testZipSlipVulnerability() throws IOException {
+        System.out.println("\n=== Starting Zip Slip Vulnerability Test ===\n");
+        
+        // Create a temporary directory for extraction
+        File targetDir = File.createTempFile("target", "");
+        targetDir.delete(); // Delete the file so we can create a directory with the same name
+        targetDir.mkdir();
+        targetDir.deleteOnExit();
+        System.out.println("Created target directory: " + targetDir.getAbsolutePath());
+        
+        // Create a malicious zip file
+        File maliciousZip = createMaliciousZipFile();
+        
+        // The parent directory where the file would be written if the vulnerability exists
+        File parentDir = targetDir.getParentFile();
+        File vulnerableFile = new File(parentDir, "outside-target-dir.txt");
+        System.out.println("Checking for file outside target: " + vulnerableFile.getAbsolutePath());
+        
+        // Delete the file if it already exists
+        if (vulnerableFile.exists()) {
+            System.out.println("File already exists, deleting it before test");
+            vulnerableFile.delete();
+        }
+        
+        boolean exceptionThrown = false;
+        try {
+            // Attempt to unpack the malicious zip file
+            System.out.println("Attempting to unpack malicious zip file...");
+            ZipUtil.unpack(maliciousZip, targetDir);
+            System.out.println("Unpacking completed without exceptions");
+        } catch (Exception e) {
+            // If an exception is thrown, the library might be protected against the vulnerability
+            exceptionThrown = true;
+            System.out.println("Exception thrown during extraction: " + e.getMessage());
+        }
+        
+        // Check if the file was created outside the target directory
+        boolean fileCreatedOutsideTarget = vulnerableFile.exists();
+        System.out.println("File created outside target directory: " + fileCreatedOutsideTarget);
+        
+        if (fileCreatedOutsideTarget) {
+            // If the file exists, read its content to verify it's our canary content
+            try {
+                String content = org.zeroturnaround.zip.commons.FileUtils.readFileToString(vulnerableFile);
+                System.out.println("File content: " + content);
+                System.out.println("\n=== VULNERABILITY DETECTED: File was created outside the target directory ===\n");
+                
+                // Clean up the file
+                vulnerableFile.delete();
+                
+                // Exit with error code to indicate the vulnerability exists
+                System.exit(1);
+            } catch (IOException e) {
+                System.out.println("Error reading file: " + e.getMessage());
+            }
+        } else {
+            if (exceptionThrown) {
+                System.out.println("\n=== SECURE: Exception was thrown and no file was created outside the target directory ===\n");
+            } else {
+                System.out.println("\n=== SECURE: No file was created outside the target directory ===\n");
+            }
+            // Exit with success code to indicate the vulnerability does not exist
+            System.exit(0);
+        }
+    }
+}
