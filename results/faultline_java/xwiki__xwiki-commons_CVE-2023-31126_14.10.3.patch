diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 000000000..1328d83b7
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/gradle-6.8.2 $WORKSPACE_BASE/java-env/gradle-6.8.2
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/gradle-6.8.2/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/xwiki__xwiki-commons_CVE-2023-31126_14.10.3 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN gradle build --parallel
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 000000000..467fea82d
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,23 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/gradle-6.8.2 $WORKSPACE_BASE/java-env/gradle-6.8.2
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/gradle-6.8.2/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/xwiki__xwiki-commons_CVE-2023-31126_14.10.3 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN gradle build --parallel
+
+# Compile our vulnerability test
+RUN javac -cp "xwiki-commons-core/xwiki-commons-xml/target/classes" VulnerabilityTest.java
+
+# Run the vulnerability test
+CMD ["java", "-cp", ".:xwiki-commons-core/xwiki-commons-xml/target/classes", "VulnerabilityTest"]
\ No newline at end of file
diff --git a/VulnerabilityTest.java b/VulnerabilityTest.java
new file mode 100644
index 000000000..0960776cf
--- /dev/null
+++ b/VulnerabilityTest.java
@@ -0,0 +1,74 @@
+import java.io.StringReader;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xwiki.xml.html.HTMLCleanerConfiguration;
+import org.xwiki.xml.html.HTMLConstants;
+import org.xwiki.xml.html.filter.HTMLFilter;
+import org.xwiki.xml.internal.html.DefaultHTMLCleaner;
+import org.xwiki.xml.internal.html.DefaultHTMLCleanerConfiguration;
+import org.xwiki.xml.internal.html.SecureHTMLElementSanitizer;
+import org.xwiki.xml.internal.html.filter.SanitizerFilter;
+
+/**
+ * Test for CVE-2023-31126: Improper Neutralization of Invalid Characters in Data Attribute Names
+ * in org.xwiki.commons:xwiki-commons-xml
+ */
+public class VulnerabilityTest {
+    public static void main(String[] args) {
+        try {
+            // Create a malicious HTML with an attribute that contains invalid characters
+            String maliciousHTML = "<a href=\"https://example.com\" data-x/onmouseover=\"alert('XSS1')\">Link</a>";
+            System.out.println("Testing HTML with malicious attribute: " + maliciousHTML);
+            
+            // Create the HTML cleaner with default configuration
+            DefaultHTMLCleaner cleaner = new DefaultHTMLCleaner();
+            
+            // Create the configuration
+            DefaultHTMLCleanerConfiguration config = new DefaultHTMLCleanerConfiguration();
+            
+            // Create the sanitizer
+            SecureHTMLElementSanitizer sanitizer = new SecureHTMLElementSanitizer();
+            
+            // Create the sanitizer filter
+            SanitizerFilter sanitizerFilter = new SanitizerFilter(sanitizer);
+            
+            // Set the filters
+            List<HTMLFilter> filters = Arrays.asList(sanitizerFilter);
+            config.setFilters(filters);
+            
+            // Clean the HTML
+            Document doc = cleaner.clean(new StringReader(maliciousHTML), config);
+            
+            // Check if the malicious attribute is still present
+            NodeList links = doc.getElementsByTagName("a");
+            boolean vulnerabilityFound = false;
+            
+            for (int i = 0; i < links.getLength(); i++) {
+                Element link = (Element) links.item(i);
+                String attribute = link.getAttribute("data-x/onmouseover");
+                
+                if (attribute != null && !attribute.isEmpty()) {
+                    System.out.println("Vulnerability found! Malicious attribute was not removed: data-x/onmouseover=" + attribute);
+                    vulnerabilityFound = true;
+                    break;
+                }
+            }
+            
+            if (vulnerabilityFound) {
+                System.exit(1); // Exit with error code if vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected. The HTML sanitizer properly removed the malicious attribute.");
+                System.exit(0); // Exit with success code if no vulnerability
+            }
+        } catch (Exception e) {
+            System.err.println("Error during test execution: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/vulnerability/CVE202331126TestRunner.java b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/vulnerability/CVE202331126TestRunner.java
new file mode 100644
index 000000000..405054b58
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/vulnerability/CVE202331126TestRunner.java
@@ -0,0 +1,110 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.xml.vulnerability;
+
+import java.io.StringReader;
+import java.io.StringWriter;
+
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xwiki.component.embed.EmbeddableComponentManager;
+import org.xwiki.xml.html.HTMLCleaner;
+
+/**
+ * Standalone test runner for CVE-2023-31126 vulnerability.
+ * This test will exit with code 1 if the vulnerability exists, and code 0 if it does not exist.
+ */
+public class CVE202331126TestRunner
+{
+    public static void main(String[] args) throws Exception
+    {
+        // Initialize the component manager
+        EmbeddableComponentManager componentManager = new EmbeddableComponentManager();
+        componentManager.initialize(CVE202331126TestRunner.class.getClassLoader());
+
+        // Get the HTML cleaner component
+        HTMLCleaner htmlCleaner = componentManager.getInstance(HTMLCleaner.class);
+
+        // Create a malicious HTML with a data attribute containing invalid characters that can be used for XSS
+        // The vulnerability allows attributes like data-x/onmouseover="alert('XSS1')" to pass through
+        String maliciousHTML = "<a href=\"https://xwiki.org\" data-x/onmouseover=\"alert('XSS1')\">XWiki</a>";
+
+        System.out.println("Testing for CVE-2023-31126 vulnerability...");
+        System.out.println("Input HTML: " + maliciousHTML);
+
+        // Clean the HTML using the HTML cleaner
+        Document document = htmlCleaner.clean(new StringReader(maliciousHTML));
+
+        // Convert the document to a string for easier inspection
+        String cleanedHTML = documentToString(document);
+        System.out.println("Cleaned HTML: " + cleanedHTML);
+
+        // Get all anchor elements
+        NodeList anchorElements = document.getElementsByTagName("a");
+        if (anchorElements.getLength() != 1) {
+            System.err.println("Expected one anchor element but found " + anchorElements.getLength());
+            System.exit(1);
+        }
+
+        Element anchorElement = (Element) anchorElements.item(0);
+
+        // Check if the malicious attribute is present in the cleaned HTML
+        boolean vulnerabilityExists = false;
+        
+        // Check if the attribute with the XSS payload exists
+        if (anchorElement.hasAttribute("data-x/onmouseover") || 
+            cleanedHTML.contains("data-x/onmouseover") || 
+            cleanedHTML.contains("alert('XSS1')")) {
+            vulnerabilityExists = true;
+        }
+
+        if (vulnerabilityExists) {
+            System.err.println("VULNERABILITY DETECTED: The HTML cleaner did not properly sanitize invalid characters in data attribute names");
+            System.exit(1); // Exit with error code if vulnerability exists
+        } else {
+            System.out.println("No vulnerability detected. The HTML cleaner properly sanitized invalid characters in data attribute names.");
+            System.exit(0); // Exit with success code if no vulnerability
+        }
+    }
+
+    /**
+     * Helper method to convert a Document to a String.
+     */
+    private static String documentToString(Document document) throws Exception
+    {
+        TransformerFactory transformerFactory = TransformerFactory.newInstance();
+        Transformer transformer = transformerFactory.newTransformer();
+        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
+        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
+        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
+
+        StringWriter writer = new StringWriter();
+        transformer.transform(new DOMSource(document), new StreamResult(writer));
+        return writer.toString();
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/vulnerability/CVE202331126Test.java b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/vulnerability/CVE202331126Test.java
new file mode 100644
index 000000000..339d7d824
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/vulnerability/CVE202331126Test.java
@@ -0,0 +1,115 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.xml.vulnerability;
+
+import java.io.StringReader;
+import java.io.StringWriter;
+
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.junit.jupiter.api.Test;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectComponentManager;
+import org.xwiki.component.manager.ComponentManager;
+import org.xwiki.xml.html.DefaultHTMLCleanerComponentList;
+import org.xwiki.xml.html.HTMLCleaner;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+/**
+ * Test for CVE-2023-31126: Improper Neutralization of Invalid Characters in Data Attribute Names
+ * in org.xwiki.commons:xwiki-commons-xml
+ */
+@ComponentTest
+@DefaultHTMLCleanerComponentList
+public class CVE202331126Test
+{
+    @InjectComponentManager
+    private ComponentManager componentManager;
+
+    /**
+     * Test that verifies if the XSS vulnerability exists.
+     * The test FAILS if the vulnerability exists, and PASSES if it does not exist.
+     */
+    @Test
+    public void testDataAttributeXSSVulnerability() throws Exception
+    {
+        // Get the HTML cleaner component
+        HTMLCleaner htmlCleaner = this.componentManager.getInstance(HTMLCleaner.class);
+
+        // Create a malicious HTML with a data attribute containing invalid characters that can be used for XSS
+        // The vulnerability allows attributes like data-x/onmouseover="alert('XSS1')" to pass through
+        String maliciousHTML = "<a href=\"https://xwiki.org\" data-x/onmouseover=\"alert('XSS1')\">XWiki</a>";
+
+        // Clean the HTML using the HTML cleaner
+        Document document = htmlCleaner.clean(new StringReader(maliciousHTML));
+
+        // Convert the document to a string for easier inspection
+        String cleanedHTML = documentToString(document);
+        System.out.println("Cleaned HTML: " + cleanedHTML);
+
+        // Get all anchor elements
+        NodeList anchorElements = document.getElementsByTagName("a");
+        assertEquals(1, anchorElements.getLength(), "Expected one anchor element");
+
+        Element anchorElement = (Element) anchorElements.item(0);
+
+        // Check if the malicious attribute is present in the cleaned HTML
+        boolean vulnerabilityExists = false;
+        
+        // Check if the attribute with the XSS payload exists
+        if (anchorElement.hasAttribute("data-x/onmouseover") || 
+            cleanedHTML.contains("data-x/onmouseover") || 
+            cleanedHTML.contains("alert('XSS1')")) {
+            vulnerabilityExists = true;
+        }
+
+        // The test should FAIL if the vulnerability exists
+        if (vulnerabilityExists) {
+            fail("XSS Vulnerability exists: The HTML cleaner did not properly sanitize invalid characters in data attribute names");
+        }
+    }
+
+    /**
+     * Helper method to convert a Document to a String.
+     */
+    private String documentToString(Document document) throws Exception
+    {
+        TransformerFactory transformerFactory = TransformerFactory.newInstance();
+        Transformer transformer = transformerFactory.newTransformer();
+        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
+        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
+        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
+
+        StringWriter writer = new StringWriter();
+        transformer.transform(new DOMSource(document), new StreamResult(writer));
+        return writer.toString();
+    }
+}
diff --git a/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/vulnerability/CVE202331126VulnerabilityTest.java b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/vulnerability/CVE202331126VulnerabilityTest.java
new file mode 100644
index 000000000..4b928e709
--- /dev/null
+++ b/xwiki-commons-core/xwiki-commons-xml/src/test/java/org/xwiki/xml/vulnerability/CVE202331126VulnerabilityTest.java
@@ -0,0 +1,113 @@
+/*
+ * See the NOTICE file distributed with this work for additional
+ * information regarding copyright ownership.
+ *
+ * This is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as
+ * published by the Free Software Foundation; either version 2.1 of
+ * the License, or (at your option) any later version.
+ *
+ * This software is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this software; if not, write to the Free
+ * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
+ * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
+ */
+package org.xwiki.xml.vulnerability;
+
+import java.io.StringReader;
+import java.io.StringWriter;
+
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.junit.jupiter.api.Test;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.xwiki.test.junit5.mockito.ComponentTest;
+import org.xwiki.test.junit5.mockito.InjectComponentManager;
+import org.xwiki.component.manager.ComponentManager;
+import org.xwiki.xml.html.DefaultHTMLCleanerComponentList;
+import org.xwiki.xml.html.HTMLCleaner;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
+/**
+ * Test for CVE-2023-31126: Improper Neutralization of Invalid Characters in Data Attribute Names
+ * in org.xwiki.commons:xwiki-commons-xml
+ */
+@ComponentTest
+@DefaultHTMLCleanerComponentList
+public class CVE202331126VulnerabilityTest
+{
+    @InjectComponentManager
+    private ComponentManager componentManager;
+
+    /**
+     * Test that verifies if the XSS vulnerability exists.
+     * The test FAILS if the vulnerability exists, and PASSES if it does not exist.
+     */
+    @Test
+    public void testDataAttributeXSSVulnerability() throws Exception
+    {
+        // Get the HTML cleaner component
+        HTMLCleaner htmlCleaner = this.componentManager.getInstance(HTMLCleaner.class);
+
+        // Create a malicious HTML with a data attribute containing invalid characters that can be used for XSS
+        // The vulnerability allows attributes like data-x/onmouseover="alert('XSS1')" to pass through
+        String maliciousHTML = "<a href=\"https://xwiki.org\" data-x/onmouseover=\"alert('XSS1')\">XWiki</a>";
+
+        System.out.println("Testing for CVE-2023-31126 vulnerability...");
+        System.out.println("Input HTML: " + maliciousHTML);
+
+        // Clean the HTML using the HTML cleaner
+        Document document = htmlCleaner.clean(new StringReader(maliciousHTML));
+
+        // Convert the document to a string for easier inspection
+        String cleanedHTML = documentToString(document);
+        System.out.println("Cleaned HTML: " + cleanedHTML);
+
+        // Get all anchor elements
+        NodeList anchorElements = document.getElementsByTagName("a");
+        Element anchorElement = (Element) anchorElements.item(0);
+
+        // Check if the malicious attribute is present in the cleaned HTML
+        boolean vulnerabilityExists = false;
+        
+        // Check if the attribute with the XSS payload exists
+        if (anchorElement.hasAttribute("data-x/onmouseover") || 
+            cleanedHTML.contains("data-x/onmouseover") || 
+            cleanedHTML.contains("alert('XSS1')")) {
+            vulnerabilityExists = true;
+        }
+
+        // The test should FAIL if the vulnerability exists
+        assertFalse(vulnerabilityExists, 
+            "XSS Vulnerability exists: The HTML cleaner did not properly sanitize invalid characters in data attribute names");
+    }
+
+    /**
+     * Helper method to convert a Document to a String.
+     */
+    private String documentToString(Document document) throws Exception
+    {
+        TransformerFactory transformerFactory = TransformerFactory.newInstance();
+        Transformer transformer = transformerFactory.newTransformer();
+        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
+        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
+        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
+
+        StringWriter writer = new StringWriter();
+        transformer.transform(new DOMSource(document), new StreamResult(writer));
+        return writer.toString();
+    }
+}
