diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 00000000..a001d93d
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/asf__commons-text_CVE-2022-42889_1.9 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 00000000..8b137891
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 00000000..3afad934
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,31 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/asf__commons-text_CVE-2022-42889_1.9 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Build the project
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Create a directory for our test
+RUN mkdir -p /project/test
+
+# Create a simple Java program to test the vulnerability
+RUN echo 'import org.apache.commons.text.StringSubstitutor;\n\nimport java.io.File;\n\n/**\n * Test for CVE-2022-42889 (Apache Commons Text RCE)\n * \n * This test demonstrates the arbitrary code execution vulnerability in\n * Apache Commons Text versions 1.5 through 1.9 when using the script lookup.\n * \n * The test will:\n * 1. Create a StringSubstitutor with the default interpolator lookups\n * 2. Attempt to execute JavaScript code that creates a file\n * 3. Check if the file was created\n * \n * If the file is created, the vulnerability exists (test fails with exit code 1)\n * If the file is not created, the vulnerability is fixed (test passes with exit code 0)\n */\npublic class VulnerabilityTest {\n\n    private static final String FLAG_FILE = "/tmp/commons_text_rce_executed";\n\n    public static void main(String[] args) {\n        // Delete the flag file if it exists\n        File flagFile = new File(FLAG_FILE);\n        if (flagFile.exists()) {\n            flagFile.delete();\n            System.out.println("Deleted existing flag file");\n        }\n\n        try {\n            System.out.println("Testing for CVE-2022-42889 vulnerability...");\n            \n            // Simulate user input with malicious script payload\n            String userInput = "${script:javascript:new java.io.File(\"/tmp/commons_text_rce_executed\").createNewFile()}";\n            System.out.println("Using payload: " + userInput);\n            \n            // Create the StringSubstitutor with default interpolator lookups\n            StringSubstitutor interpolator = StringSubstitutor.createInterpolator();\n            System.out.println("Created StringSubstitutor with default interpolator");\n            \n            // Process the user input - this should execute the script if vulnerable\n            System.out.println("Attempting to process the payload...");\n            String result = interpolator.replace(userInput);\n            \n            System.out.println("Processed result: " + result);\n            \n            // Check if the vulnerability was exploited\n            if (flagFile.exists()) {\n                System.out.println("VULNERABILITY DETECTED: Arbitrary code execution occurred!");\n                System.out.println("The script lookup was enabled and allowed code execution.");\n                System.exit(1); // Exit with error code if vulnerable\n            } else {\n                System.out.println("No vulnerability detected. The code did not execute.");\n                System.out.println("The script lookup is either disabled or properly sandboxed.");\n                System.exit(0); // Exit with success code if not vulnerable\n            }\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n            e.printStackTrace();\n            \n            // Check if the vulnerability was still exploited despite the exception\n            if (flagFile.exists()) {\n                System.out.println("VULNERABILITY DETECTED: Arbitrary code execution occurred despite exception!");\n                System.exit(1); // Exit with error code if vulnerable\n            } else {\n                System.out.println("Test inconclusive due to exception, but no code execution detected.");\n                System.out.println("This may indicate the vulnerability is fixed or the test environment is not properly configured.");\n                System.exit(0); // Exit with success code if not vulnerable\n            }\n        }\n    }\n}' > /project/test/VulnerabilityTest.java
+
+# Compile the test program with the commons-text JAR
+RUN cd /project/test && javac -cp /project/target/commons-text-1.9.jar:/root/.m2/repository/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11.jar VulnerabilityTest.java
+
+# Run the test
+CMD cd /project/test && java -cp .:/project/target/commons-text-1.9.jar:/root/.m2/repository/org/apache/commons/commons-lang3/3.11/commons-lang3-3.11.jar VulnerabilityTest
\ No newline at end of file
diff --git a/src/test/java/org/apache/commons/text/vulnerability/CVE_2022_42889_Test.java b/src/test/java/org/apache/commons/text/vulnerability/CVE_2022_42889_Test.java
new file mode 100644
index 00000000..0d477c81
--- /dev/null
+++ b/src/test/java/org/apache/commons/text/vulnerability/CVE_2022_42889_Test.java
@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements. See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache license, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the license for the specific language governing permissions and
+ * limitations under the license.
+ */
+
+package org.apache.commons.text.vulnerability;
+
+import org.apache.commons.text.StringSubstitutor;
+
+import java.io.File;
+
+/**
+ * Test case for CVE-2022-42889 vulnerability in Apache Commons Text.
+ * This test demonstrates the arbitrary code execution vulnerability in
+ * StringSubstitutor when using the script lookup.
+ */
+public class CVE_2022_42889_Test {
+
+    // Flag file to indicate code execution occurred
+    private static final String FLAG_FILE = "/tmp/commons_text_rce_executed";
+
+    public static void main(String[] args) {
+        // Delete the flag file if it exists
+        File flagFile = new File(FLAG_FILE);
+        if (flagFile.exists()) {
+            flagFile.delete();
+        }
+
+        try {
+            // Simulate user input with malicious script payload
+            String userInput = "${script:javascript:new java.io.File('/tmp/commons_text_rce_executed').createNewFile()}";
+            
+            // Create the StringSubstitutor with default interpolator lookups
+            StringSubstitutor interpolator = StringSubstitutor.createInterpolator();
+            
+            // Process the user input - this should execute the script if vulnerable
+            String result = interpolator.replace(userInput);
+            
+            System.out.println("Processed result: " + result);
+            
+            // Check if the vulnerability was exploited
+            if (flagFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Arbitrary code execution occurred!");
+                System.exit(1); // Exit with error code if vulnerable
+            } else {
+                System.out.println("No vulnerability detected. The code did not execute.");
+                System.exit(0); // Exit with success code if not vulnerable
+            }
+        } catch (Exception e) {
+            System.out.println("Exception occurred: " + e.getMessage());
+            e.printStackTrace();
+            
+            // Check if the vulnerability was still exploited despite the exception
+            if (flagFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Arbitrary code execution occurred despite exception!");
+                System.exit(1); // Exit with error code if vulnerable
+            } else {
+                System.out.println("Test inconclusive due to exception, but no code execution detected.");
+                System.exit(0); // Exit with success code if not vulnerable
+            }
+        }
+    }
+}
