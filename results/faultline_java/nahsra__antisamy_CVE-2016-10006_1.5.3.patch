diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..add7124
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+COPY ./java-env/apache-maven-3.9.10 $WORKSPACE_BASE/java-env/apache-maven-3.9.10
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.9.10/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/nahsra__antisamy_CVE-2016-10006_1.5.3 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..8b0e914
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,20 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+COPY ./java-env/apache-maven-3.9.10 $WORKSPACE_BASE/java-env/apache-maven-3.9.10
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.9.10/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/nahsra__antisamy_CVE-2016-10006_1.5.3 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Run the vulnerability test
+CMD ["java", "-cp", "target/antisamy-1.5.3.jar:target/dependency/*", "org.owasp.validator.html.test.XssVulnerabilityTest"]
\ No newline at end of file
diff --git a/src/test/java/org/owasp/validator/html/test/XssVulnerabilityTest.java b/src/test/java/org/owasp/validator/html/test/XssVulnerabilityTest.java
new file mode 100644
index 0000000..48495b3
--- /dev/null
+++ b/src/test/java/org/owasp/validator/html/test/XssVulnerabilityTest.java
@@ -0,0 +1,71 @@
+package org.owasp.validator.html.test;
+
+import org.owasp.validator.html.AntiSamy;
+import org.owasp.validator.html.CleanResults;
+import org.owasp.validator.html.Policy;
+import org.owasp.validator.html.PolicyException;
+import org.owasp.validator.html.ScanException;
+
+/**
+ * Test case for CVE-2016-10006 - XSS vulnerability in AntiSamy before 1.5.5
+ * The vulnerability allows bypassing the library protections by submitting a specially crafted
+ * style attribute with active content.
+ */
+public class XssVulnerabilityTest {
+
+    public static void main(String[] args) {
+        try {
+            // Load the policy file
+            Policy policy = Policy.getInstance(XssVulnerabilityTest.class.getResourceAsStream("/antisamy.xml"));
+            
+            // Create an AntiSamy instance
+            AntiSamy antiSamy = new AntiSamy();
+            
+            // Test with a style attribute containing expression() which is a known XSS vector
+            String maliciousInput1 = "<div style=\"background-image: url(javascript:alert('XSS'))\">Test</div>";
+            System.out.println("Testing input 1: " + maliciousInput1);
+            CleanResults results1 = antiSamy.scan(maliciousInput1, policy);
+            String cleanedHtml1 = results1.getCleanHTML();
+            System.out.println("Cleaned HTML 1: " + cleanedHtml1);
+            boolean vulnerable1 = cleanedHtml1.contains("javascript:");
+            
+            // Test with a style attribute containing expression() which is a known XSS vector
+            String maliciousInput2 = "<div style=\"expression(alert('XSS'))\">Test</div>";
+            System.out.println("\nTesting input 2: " + maliciousInput2);
+            CleanResults results2 = antiSamy.scan(maliciousInput2, policy);
+            String cleanedHtml2 = results2.getCleanHTML();
+            System.out.println("Cleaned HTML 2: " + cleanedHtml2);
+            boolean vulnerable2 = cleanedHtml2.contains("expression");
+            
+            // Test with a style attribute containing behavior property which is a known XSS vector
+            String maliciousInput3 = "<div style=\"behavior:url(javascript:alert('XSS'))\">Test</div>";
+            System.out.println("\nTesting input 3: " + maliciousInput3);
+            CleanResults results3 = antiSamy.scan(maliciousInput3, policy);
+            String cleanedHtml3 = results3.getCleanHTML();
+            System.out.println("Cleaned HTML 3: " + cleanedHtml3);
+            boolean vulnerable3 = cleanedHtml3.contains("javascript:");
+            
+            // Test with a style attribute containing -moz-binding which is a known XSS vector
+            String maliciousInput4 = "<div style=\"-moz-binding:url(javascript:alert('XSS'))\">Test</div>";
+            System.out.println("\nTesting input 4: " + maliciousInput4);
+            CleanResults results4 = antiSamy.scan(maliciousInput4, policy);
+            String cleanedHtml4 = results4.getCleanHTML();
+            System.out.println("Cleaned HTML 4: " + cleanedHtml4);
+            boolean vulnerable4 = cleanedHtml4.contains("javascript:");
+            
+            // Check if any of the vulnerabilities exist
+            if (vulnerable1 || vulnerable2 || vulnerable3 || vulnerable4) {
+                System.out.println("\nVULNERABILITY DETECTED: Malicious code was not removed!");
+                System.exit(1); // Exit with error code if vulnerability exists
+            } else {
+                System.out.println("\nTest passed: All malicious code was properly removed.");
+                System.exit(0); // Exit with success code if vulnerability is fixed
+            }
+            
+        } catch (PolicyException | ScanException e) {
+            System.err.println("Error during test: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(2); // Exit with error code for test failures
+        }
+    }
+}
