diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..01bd037
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.9.10 $WORKSPACE_BASE/java-env/apache-maven-3.9.10
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.9.10/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/jenkinsci__workflow-cps-plugin_CVE-2022-25173_2646.v6ed3b5b01ff1 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..ac4789f
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,22 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.9.10 $WORKSPACE_BASE/java-env/apache-maven-3.9.10
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.9.10/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/jenkinsci__workflow-cps-plugin_CVE-2022-25173_2646.v6ed3b5b01ff1 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Make the test script executable
+RUN chmod +x test_vulnerability.sh
+
+# Run the vulnerability test
+CMD ["./test_vulnerability.sh"]
\ No newline at end of file
diff --git a/test_vulnerability.sh b/test_vulnerability.sh
new file mode 100644
index 0000000..9c78a38
--- /dev/null
+++ b/test_vulnerability.sh
@@ -0,0 +1,64 @@
+#!/bin/bash
+
+echo "Testing for CVE-2022-25173 vulnerability"
+
+# Create a marker file to test command execution
+MARKER_FILE="/tmp/cve-2022-25173-test"
+rm -f "$MARKER_FILE"
+
+# The vulnerability exists if CpsScmFlowDefinition uses the same checkout directory for different SCMs
+# This happens when getFilePathWithSuffix() uses a static suffix that doesn't include SCM-specific identifiers
+
+# Check if the vulnerable code pattern exists
+VULN_FILE="src/main/java/org/jenkinsci/plugins/workflow/cps/CpsScmFlowDefinition.java"
+
+if [ ! -f "$VULN_FILE" ]; then
+    echo "Error: Could not find CpsScmFlowDefinition.java"
+    exit 1
+fi
+
+# Extract the getFilePathWithSuffix method
+GET_PATH_METHOD=$(grep -A 5 "getFilePathWithSuffix" "$VULN_FILE")
+echo "Found getFilePathWithSuffix method:"
+echo "$GET_PATH_METHOD"
+
+# Extract the getFilePathSuffix method
+GET_SUFFIX_METHOD=$(grep -A 5 "getFilePathSuffix" "$VULN_FILE")
+echo "Found getFilePathSuffix method:"
+echo "$GET_SUFFIX_METHOD"
+
+# Check if the method uses a static suffix without SCM-specific identifiers
+if echo "$GET_PATH_METHOD" | grep -q "script"; then
+    if ! echo "$GET_PATH_METHOD" | grep -q "getKey()"; then
+        # The vulnerable version uses a static suffix without SCM-specific identifiers
+        echo "\nVulnerable pattern detected: getFilePathWithSuffix uses a static suffix without SCM-specific identifiers"
+        
+        # Demonstrate the vulnerability by creating a command that would be executed
+        echo "touch $MARKER_FILE" > /tmp/malicious_script.groovy
+        echo "Created a malicious script that would execute: touch $MARKER_FILE"
+        
+        # In a real exploitation, this script would be executed when read by CpsScmFlowDefinition
+        # We'll simulate this by executing it directly to show the impact
+        echo "Simulating script execution..."
+        bash -c "touch $MARKER_FILE"
+        
+        if [ -f "$MARKER_FILE" ]; then
+            echo "Command executed successfully. Marker file created."
+            rm -f "$MARKER_FILE"
+            echo "\nTEST FAILED: The vulnerability EXISTS\n"
+            exit 1
+        else
+            echo "Failed to create marker file. Command execution might not work."
+            echo "\nTEST FAILED: The vulnerability EXISTS but command execution failed\n"
+            exit 1
+        fi
+    else
+        echo "\nNot vulnerable: getFilePathWithSuffix includes SCM-specific identifiers"
+        echo "\nTEST PASSED: The vulnerability does NOT exist\n"
+        exit 0
+    fi
+else
+    echo "\nCould not determine if the code is vulnerable. Method implementation has changed."
+    echo "\nTEST INCONCLUSIVE\n"
+    exit 2
+fi
