diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 00000000000..c1eac780ac8
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/wildfly__wildfly_CVE-2018-1047_11.0.0.Final /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 00000000000..8b137891791
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/CVE_2018_1047_Test.java b/CVE_2018_1047_Test.java
new file mode 100644
index 00000000000..18f23e11441
--- /dev/null
+++ b/CVE_2018_1047_Test.java
@@ -0,0 +1,134 @@
+import java.io.File;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Collections;
+
+import org.jboss.vfs.VFS;
+import org.jboss.vfs.VirtualFile;
+import org.wildfly.extension.undertow.deployment.ServletResourceManager;
+
+import io.undertow.server.handlers.resource.Resource;
+
+/**
+ * Test for CVE-2018-1047: Path Traversal vulnerability in ServletResourceManager
+ */
+public class CVE_2018_1047_Test {
+    
+    private static final String SECRET_CONTENT = "This is a secret file that should not be accessible";
+    
+    public static void main(String[] args) {
+        Path tempDeploymentDir = null;
+        Path secretFileDir = null;
+        
+        try {
+            // Create a temporary deployment directory
+            tempDeploymentDir = Files.createTempDirectory("deployment");
+            System.out.println("Created deployment directory: " + tempDeploymentDir);
+            
+            // Create a directory for web resources inside the deployment
+            Path webResourcesDir = tempDeploymentDir.resolve("resources");
+            Files.createDirectories(webResourcesDir);
+            
+            // Create a sample file in the web resources directory
+            Path sampleFile = webResourcesDir.resolve("sample.txt");
+            Files.write(sampleFile, "This is a sample file".getBytes(StandardCharsets.UTF_8));
+            System.out.println("Created sample file: " + sampleFile);
+            
+            // Create a directory outside the deployment directory to simulate a location
+            // that should not be accessible
+            secretFileDir = Files.createTempDirectory("secret");
+            System.out.println("Created secret directory: " + secretFileDir);
+            
+            // Create a secret file that should not be accessible via the deployment
+            Path secretFile = secretFileDir.resolve("secret.txt");
+            Files.write(secretFile, SECRET_CONTENT.getBytes(StandardCharsets.UTF_8));
+            System.out.println("Created secret file: " + secretFile);
+            
+            // Create a VirtualFile for the deployment root
+            VirtualFile deploymentRoot = VFS.getChild(tempDeploymentDir.toUri());
+            
+            // Create a path traversal string to access the secret file
+            // We need to go up from the deployment directory and then into the secret directory
+            String traversalPath = "../" + secretFileDir.getFileName() + "/secret.txt";
+            System.out.println("Using traversal path: " + traversalPath);
+            
+            // Create a ServletResourceManager with default settings
+            // Note: We're setting overlays to an empty list (not null) to satisfy condition #3
+            ServletResourceManager resourceManager = new ServletResourceManager(
+                    deploymentRoot,                // deploymentRoot
+                    Collections.emptyList(),       // overlays - not null but empty
+                    true,                          // explodedDeployment
+                    false,                         // followSymlink
+                    true,                          // disableFileWatchService
+                    null                           // externalOverlays
+            );
+            
+            // Try to access the secret file using path traversal
+            System.out.println("Attempting to access resource with path: " + traversalPath);
+            Resource resource = resourceManager.getResource(traversalPath);
+            
+            // If the vulnerability exists, the resource will not be null
+            // and we can access the content of the secret file
+            if (resource != null) {
+                System.out.println("VULNERABILITY DETECTED: Able to access file outside deployment directory");
+                
+                // Read the content of the accessed resource
+                byte[] content = new byte[(int) resource.getContentLength()];
+                resource.getContent().read(content);
+                String resourceContent = new String(content, StandardCharsets.UTF_8);
+                
+                // Verify that we actually accessed the secret file
+                if (SECRET_CONTENT.equals(resourceContent)) {
+                    System.out.println("Content of accessed file matches secret file");
+                    System.out.println("Path traversal vulnerability exists: able to access files outside deployment directory");
+                    System.exit(1); // Exit with error if vulnerability exists
+                } else {
+                    System.out.println("Content doesn't match expected secret content:");
+                    System.out.println("Expected: " + SECRET_CONTENT);
+                    System.out.println("Actual: " + resourceContent);
+                    System.exit(2);
+                }
+            } else {
+                System.out.println("SECURE: Unable to access file outside deployment directory");
+                System.out.println("Path traversal vulnerability does not exist");
+                System.exit(0); // Exit with success if vulnerability is fixed
+            }
+            
+        } catch (Exception e) {
+            System.out.println("Error during test: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(3);
+        } finally {
+            // Clean up the temporary directories
+            try {
+                if (tempDeploymentDir != null) {
+                    deleteDirectory(tempDeploymentDir.toFile());
+                }
+                if (secretFileDir != null) {
+                    deleteDirectory(secretFileDir.toFile());
+                }
+            } catch (Exception e) {
+                System.out.println("Error during cleanup: " + e.getMessage());
+            }
+        }
+    }
+    
+    private static void deleteDirectory(File directory) {
+        if (directory.exists()) {
+            File[] files = directory.listFiles();
+            if (files != null) {
+                for (File file : files) {
+                    if (file.isDirectory()) {
+                        deleteDirectory(file);
+                    } else {
+                        file.delete();
+                    }
+                }
+            }
+            directory.delete();
+        }
+    }
+}
\ No newline at end of file
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 00000000000..3a8cc49788c
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,29 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/wildfly__wildfly_CVE-2018-1047_11.0.0.Final /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Create a script to run the test
+RUN echo '#!/bin/bash' > /project/run-test.sh && \
+    echo 'CLASSPATH=""' >> /project/run-test.sh && \
+    echo 'for jar in $(find /project -name "*.jar" -type f | grep -v "sources.jar" | grep -v "tests.jar"); do' >> /project/run-test.sh && \
+    echo '  CLASSPATH="$CLASSPATH:$jar"' >> /project/run-test.sh && \
+    echo 'done' >> /project/run-test.sh && \
+    echo 'CLASSPATH="$CLASSPATH:/project/undertow/target/classes:."' >> /project/run-test.sh && \
+    echo 'javac -cp "$CLASSPATH" CVE_2018_1047_Test.java' >> /project/run-test.sh && \
+    echo 'java -cp "$CLASSPATH" CVE_2018_1047_Test' >> /project/run-test.sh && \
+    chmod +x /project/run-test.sh
+
+CMD ["/project/run-test.sh"]
\ No newline at end of file
