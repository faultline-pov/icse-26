diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..3cfe0b8
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,27 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/x-stream__xstream_CVE-2021-21345_1.4.15 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Compile and run the vulnerability test
+RUN mkdir -p /project/test-cve-2021-21345/lib
+RUN cp /project/xstream/target/xstream-1.4.16-SNAPSHOT.jar /project/test-cve-2021-21345/lib/
+# Copy required dependencies
+RUN find ~/.m2 -name "xmlpull-*.jar" -exec cp {} /project/test-cve-2021-21345/lib/ \;
+RUN find ~/.m2 -name "xpp3-*.jar" -exec cp {} /project/test-cve-2021-21345/lib/ \;
+WORKDIR /project/test-cve-2021-21345
+RUN javac -cp "lib/*" CVE_2021_21345_Test.java
+CMD ["java", "-cp", ".:lib/*", "CVE_2021_21345_Test"]
\ No newline at end of file
diff --git a/test-cve-2021-21345/CVE_2021_21345_Test.java b/test-cve-2021-21345/CVE_2021_21345_Test.java
new file mode 100644
index 0000000..69baed8
--- /dev/null
+++ b/test-cve-2021-21345/CVE_2021_21345_Test.java
@@ -0,0 +1,146 @@
+import com.thoughtworks.xstream.XStream;
+import com.thoughtworks.xstream.io.xml.DomDriver;
+import com.thoughtworks.xstream.security.AnyTypePermission;
+import com.thoughtworks.xstream.security.NoTypePermission;
+import com.thoughtworks.xstream.security.WildcardTypePermission;
+import java.io.File;
+
+public class CVE_2021_21345_Test {
+    public static void main(String[] args) {
+        // Create a file to check if command execution works
+        File testFile = new File("/tmp/xstream-vulnerability-test");
+        if (testFile.exists()) {
+            testFile.delete();
+        }
+        
+        System.out.println("=== Testing for CVE-2021-21345 vulnerability ===\n");
+        
+        // Test with vulnerable configuration
+        testVulnerableConfiguration(testFile);
+        
+        // If the file was created, the vulnerability exists
+        if (testFile.exists()) {
+            System.out.println("\n=== VULNERABILITY DETECTED: Command execution succeeded! ===\n");
+            System.out.println("The test has confirmed that XStream version 1.4.15 is vulnerable to CVE-2021-21345.");
+            System.out.println("This vulnerability allows remote command execution through malicious XML input.");
+            System.out.println("To fix this vulnerability, upgrade to XStream 1.4.16 or higher, or use the security framework with a whitelist.");
+            
+            // Delete the file for the next test
+            testFile.delete();
+            
+            // Demonstrate the fix
+            System.out.println("\n=== Demonstrating the fix with proper security configuration ===\n");
+            testSecureConfiguration(testFile);
+            
+            // Exit with failure status since the vulnerability exists
+            System.exit(1);
+        } else {
+            System.out.println("\n=== No vulnerability detected. Command execution failed. ===\n");
+            System.out.println("This version of XStream is not vulnerable to CVE-2021-21345 or the security framework is properly configured.");
+            System.exit(0); // Test passes - vulnerability does not exist
+        }
+    }
+    
+    private static void testVulnerableConfiguration(File testFile) {
+        System.out.println("Testing with vulnerable configuration (allowing any type)...");
+        
+        // Create XStream instance with vulnerable configuration
+        XStream xstream = new XStream(new DomDriver());
+        
+        // Allow any type (this is what makes it vulnerable)
+        xstream.addPermission(AnyTypePermission.ANY);
+        
+        // Malicious XML that attempts to execute a command to create a file
+        String xml = 
+            "<java.lang.ProcessBuilder>\n" +
+            "  <command>\n" +
+            "    <string>touch</string>\n" +
+            "    <string>/tmp/xstream-vulnerability-test</string>\n" +
+            "  </command>\n" +
+            "  <redirectErrorStream>false</redirectErrorStream>\n" +
+            "</java.lang.ProcessBuilder>";
+
+        try {
+            // Try to deserialize the malicious XML
+            System.out.println("Attempting to deserialize malicious XML...");
+            Object result = xstream.fromXML(xml);
+            System.out.println("Deserialization completed without exceptions.");
+            
+            // If we got a ProcessBuilder, try to start it
+            if (result instanceof ProcessBuilder) {
+                System.out.println("Successfully deserialized ProcessBuilder, attempting to start process...");
+                try {
+                    ((ProcessBuilder)result).start();
+                    System.out.println("Process started successfully.");
+                } catch (Exception e) {
+                    System.out.println("Failed to start process: " + e.getMessage());
+                }
+            }
+        } catch (Exception e) {
+            System.out.println("Exception during deserialization: " + e.getClass().getName());
+            System.out.println("Message: " + e.getMessage());
+        }
+        
+        // Check if the file was created (indicating successful command execution)
+        if (testFile.exists()) {
+            System.out.println("Command execution succeeded! File was created at: " + testFile.getAbsolutePath());
+        } else {
+            System.out.println("Command execution failed. No file was created.");
+        }
+    }
+    
+    private static void testSecureConfiguration(File testFile) {
+        System.out.println("Testing with secure configuration (using whitelist)...");
+        
+        // Create XStream instance with secure configuration
+        XStream xstream = new XStream(new DomDriver());
+        
+        // Clear all permissions (deny everything by default)
+        xstream.addPermission(NoTypePermission.NONE);
+        
+        // Only allow specific safe classes (whitelist approach)
+        xstream.addPermission(new WildcardTypePermission(new String[] {
+            "java.lang.String",
+            "java.util.*"
+        }));
+        
+        // Same malicious XML as before
+        String xml = 
+            "<java.lang.ProcessBuilder>\n" +
+            "  <command>\n" +
+            "    <string>touch</string>\n" +
+            "    <string>/tmp/xstream-vulnerability-test</string>\n" +
+            "  </command>\n" +
+            "  <redirectErrorStream>false</redirectErrorStream>\n" +
+            "</java.lang.ProcessBuilder>";
+
+        try {
+            // Try to deserialize the malicious XML
+            System.out.println("Attempting to deserialize malicious XML with secure configuration...");
+            Object result = xstream.fromXML(xml);
+            System.out.println("Deserialization completed without exceptions. This is unexpected!");
+            
+            // If we got a ProcessBuilder, try to start it
+            if (result instanceof ProcessBuilder) {
+                System.out.println("Successfully deserialized ProcessBuilder, attempting to start process...");
+                try {
+                    ((ProcessBuilder)result).start();
+                    System.out.println("Process started successfully. Security configuration failed!");
+                } catch (Exception e) {
+                    System.out.println("Failed to start process: " + e.getMessage());
+                }
+            }
+        } catch (Exception e) {
+            System.out.println("Exception during deserialization: " + e.getClass().getName());
+            System.out.println("Message: " + e.getMessage());
+            System.out.println("This is expected with proper security configuration.");
+        }
+        
+        // Check if the file was created (indicating successful command execution)
+        if (testFile.exists()) {
+            System.out.println("SECURITY FAILURE: Command execution succeeded despite security configuration!");
+        } else {
+            System.out.println("Security configuration successfully prevented command execution.");
+        }
+    }
+}
