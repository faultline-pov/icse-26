diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 00000000..2bd9c438
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/undertow-io__undertow_CVE-2014-7816_1.0.16.Final /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 00000000..8b137891
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 00000000..ef44cc46
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,28 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/undertow-io__undertow_CVE-2014-7816_1.0.16.Final /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Create directories for test
+RUN mkdir -p /tmp/webroot /tmp/secret
+
+# Compile the core module only
+RUN cd core && mvn compile -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Compile the test
+RUN javac -cp core/target/classes SimplePathTraversalTest.java
+
+# Run the test
+CMD ["java", "-cp", ".:core/target/classes", "SimplePathTraversalTest"]
\ No newline at end of file
diff --git a/SimplePathTraversalTest.java b/SimplePathTraversalTest.java
new file mode 100644
index 00000000..d1133880
--- /dev/null
+++ b/SimplePathTraversalTest.java
@@ -0,0 +1,84 @@
+import io.undertow.server.handlers.resource.FileResourceManager;
+import io.undertow.server.handlers.resource.Resource;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+
+/**
+ * Simple test for CVE-2014-7816 - Path Traversal vulnerability in JBoss Undertow
+ * 
+ * This test directly tests the FileResourceManager.getResource() method which is
+ * vulnerable to path traversal on Windows systems.
+ * 
+ * The test will exit with code 0 if the vulnerability is fixed (secure)
+ * The test will exit with code 1 if the vulnerability exists (vulnerable)
+ */
+public class SimplePathTraversalTest {
+
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting Simple Path Traversal vulnerability test for CVE-2014-7816");
+            
+            // Create a directory structure for testing
+            File webRoot = new File("/tmp/webroot");
+            webRoot.mkdirs();
+            
+            // Create a test file in the web root
+            File normalFile = new File(webRoot, "normal.txt");
+            writeFile(normalFile, "This is a normal file");
+            
+            // Create a "secret" file outside the web root
+            File secretDir = new File("/tmp/secret");
+            secretDir.mkdirs();
+            File secretFile = new File(secretDir, "secret.txt");
+            writeFile(secretFile, "This is a secret file that should not be accessible");
+            
+            System.out.println("Web root: " + webRoot.getAbsolutePath());
+            System.out.println("Secret file: " + secretFile.getAbsolutePath());
+            
+            // Create the FileResourceManager with the web root
+            FileResourceManager resourceManager = new FileResourceManager(webRoot, 1024);
+            
+            // First verify we can access a file in the web root
+            Resource normalResource = resourceManager.getResource("normal.txt");
+            if (normalResource == null) {
+                System.out.println("ERROR: Could not access normal file. Test setup issue.");
+                System.exit(2);
+            }
+            System.out.println("Successfully accessed normal file in web root");
+            
+            // Now try to access the secret file using path traversal
+            // The vulnerability allows accessing files outside the web root using ../ sequences
+            String traversalPath = "../secret/secret.txt";
+            Resource traversalResource = resourceManager.getResource(traversalPath);
+            
+            // If the vulnerability exists, we'll get a non-null resource
+            // If it's been fixed, we'll get null
+            if (traversalResource != null) {
+                System.out.println("VULNERABILITY DETECTED: Path traversal vulnerability exists!");
+                System.out.println("Was able to access: " + traversalResource.getPath());
+                System.exit(1); // Exit with non-zero code if vulnerability exists
+            } else {
+                System.out.println("SECURE: Path traversal vulnerability not detected");
+                System.exit(0); // Exit with zero code if vulnerability is fixed
+            }
+        } catch (Exception e) {
+            System.out.println("Exception during test: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(2);
+        }
+    }
+    
+    private static void writeFile(File file, String content) throws IOException {
+        FileWriter writer = null;
+        try {
+            writer = new FileWriter(file);
+            writer.write(content);
+        } finally {
+            if (writer != null) {
+                writer.close();
+            }
+        }
+    }
+}
