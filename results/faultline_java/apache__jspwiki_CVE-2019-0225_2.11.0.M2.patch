diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..c2911cc
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__jspwiki_CVE-2019-0225_2.11.0.M2 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..273d1cd
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,23 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__jspwiki_CVE-2019-0225_2.11.0.M2 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Run the vulnerability test
+# The test should FAIL (exit with non-zero code) if the vulnerability EXISTS
+# and PASS (exit with code 0) if the vulnerability does NOT exist
+# Since our test is already failing (which is correct), we need to preserve that exit code
+CMD cd jspwiki-main && mvn test -Dtest=org.apache.wiki.vulnerability.PathTraversalVulnerabilityTest -B
\ No newline at end of file
diff --git a/jspwiki-main/src/test/java/org/apache/wiki/vulnerability/PathTraversalVulnerabilityTest.java b/jspwiki-main/src/test/java/org/apache/wiki/vulnerability/PathTraversalVulnerabilityTest.java
new file mode 100644
index 0000000..effc59c
--- /dev/null
+++ b/jspwiki-main/src/test/java/org/apache/wiki/vulnerability/PathTraversalVulnerabilityTest.java
@@ -0,0 +1,169 @@
+/*
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    "License"); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+ */
+package org.apache.wiki.vulnerability;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.Properties;
+
+import javax.servlet.RequestDispatcher;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.wiki.TestEngine;
+import org.apache.wiki.WikiEngine;
+import org.apache.wiki.WikiServlet;
+import org.apache.wiki.url.DefaultURLConstructor;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import net.sourceforge.stripes.mock.MockHttpServletRequest;
+import net.sourceforge.stripes.mock.MockHttpServletResponse;
+import net.sourceforge.stripes.mock.MockServletContext;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+/**
+ * Test case for CVE-2019-0225 - Path Traversal vulnerability in JSPWiki.
+ * This test verifies that a specially crafted URL could be used to access files
+ * under the ROOT directory of the application.
+ */
+public class PathTraversalVulnerabilityTest {
+
+    private TestEngine testEngine;
+    private WikiServlet wikiServlet;
+    private MockServletContext servletContext;
+    private File testFile;
+    private static final String TEST_FILE_CONTENT = "This is a test file for path traversal vulnerability";
+
+    @BeforeEach
+    public void setUp() throws Exception {
+        // Create test engine
+        Properties props = TestEngine.getTestProperties();
+        testEngine = new TestEngine(props);
+        
+        // Create a test file outside the wiki directory
+        testFile = new File(System.getProperty("java.io.tmpdir"), "test-path-traversal.txt");
+        try (PrintWriter writer = new PrintWriter(testFile)) {
+            writer.println(TEST_FILE_CONTENT);
+        }
+        
+        // Create servlet context and servlet
+        servletContext = new MockServletContext("JSPWiki");
+        servletContext.setAttribute("org.apache.wiki.WikiEngine", testEngine);
+        
+        wikiServlet = new WikiServlet() {
+            private static final long serialVersionUID = 1L;
+            
+            // Override the forward method to capture the forwarded path
+            @Override
+            public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException, ServletException {
+                String jspPage = testEngine.getURLConstructor().getForwardPage(req);
+                System.out.println("Forward page: " + jspPage);
+                
+                // Create a request dispatcher that will check if the path exists
+                RequestDispatcher dispatcher = req.getRequestDispatcher("/" + jspPage);
+                if (dispatcher != null) {
+                    try {
+                        // Try to forward to the requested path
+                        dispatcher.forward(req, res);
+                    } catch (Exception e) {
+                        // If we get here, the path was valid but the file doesn't exist or can't be accessed
+                        System.out.println("Exception during forward: " + e.getMessage());
+                        res.setStatus(HttpServletResponse.SC_NOT_FOUND);
+                    }
+                } else {
+                    res.setStatus(HttpServletResponse.SC_NOT_FOUND);
+                }
+            }
+        };
+        
+        wikiServlet.init(new TestServletConfig(servletContext));
+    }
+
+    @AfterEach
+    public void tearDown() {
+        // Delete the test file
+        if (testFile != null && testFile.exists()) {
+            testFile.delete();
+        }
+    }
+
+    /**
+     * Test for path traversal vulnerability.
+     * This test attempts to access a file outside the web application directory
+     * using path traversal sequences in the URL.
+     */
+    @Test
+    public void testPathTraversalVulnerability() throws Exception {
+        // Create a request with a path traversal attempt
+        String relativePath = "../../../../../../../" + testFile.getAbsolutePath();
+        MockHttpServletRequest request = testEngine.newHttpRequest();
+        request.setPathInfo(relativePath);
+        
+        // Create a response to capture the result
+        MockHttpServletResponse response = new MockHttpServletResponse();
+        
+        // Process the request
+        wikiServlet.doGet(request, response);
+        
+        // If the vulnerability exists, the request will succeed and we'll get a 200 OK
+        // If the vulnerability is fixed, we should get a 404 Not Found or other error
+        int status = response.getStatus();
+        
+        // The test should FAIL if the vulnerability EXISTS (status 200)
+        // and PASS if the vulnerability is FIXED (status not 200)
+        assertNotEquals(HttpServletResponse.SC_OK, status, 
+                "Path traversal vulnerability exists! The server allowed access to a file outside the web app directory.");
+    }
+    
+    /**
+     * Simple ServletConfig implementation for testing.
+     */
+    private static class TestServletConfig implements javax.servlet.ServletConfig {
+        private final MockServletContext context;
+        
+        public TestServletConfig(MockServletContext context) {
+            this.context = context;
+        }
+        
+        @Override
+        public String getServletName() {
+            return "WikiServlet";
+        }
+        
+        @Override
+        public MockServletContext getServletContext() {
+            return context;
+        }
+        
+        @Override
+        public String getInitParameter(String name) {
+            return null;
+        }
+        
+        @Override
+        public java.util.Enumeration<String> getInitParameterNames() {
+            return new java.util.Vector<String>().elements();
+        }
+    }
+}
