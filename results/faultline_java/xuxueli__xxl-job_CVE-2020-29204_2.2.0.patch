diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..9cfac88
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/xuxueli__xxl-job_CVE-2020-29204_2.2.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..5802f78
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,29 @@
+FROM ubuntu:22.04
+
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+
+RUN mkdir -p /java-env
+COPY ./java-env/jdk1.8.0_202 //java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 //java-env/apache-maven-3.5.0
+
+# Set up Java and Maven environment variables
+ENV JAVA_HOME=/java-env/jdk1.8.0_202
+ENV M2_HOME=/java-env/apache-maven-3.5.0
+ENV PATH=$JAVA_HOME/bin:$M2_HOME/bin:$PATH
+
+COPY ./project-sources/xuxueli__xxl-job_CVE-2020-29204_2.2.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+
+WORKDIR /project
+
+# Build the project
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Do not modify anything above this line
+
+# Compile the test
+RUN javac -cp ./xxl-job-admin/target/xxl-job-admin-2.2.0.jar:./xxl-job-admin/target/classes XssVulnerabilityTest.java
+
+# Run the XSS vulnerability test
+CMD ["java", "-cp", ".:./xxl-job-admin/target/xxl-job-admin-2.2.0.jar:./xxl-job-admin/target/classes", "XssVulnerabilityTest"]
diff --git a/XssVulnerabilityTest.java b/XssVulnerabilityTest.java
new file mode 100644
index 0000000..ab63406
--- /dev/null
+++ b/XssVulnerabilityTest.java
@@ -0,0 +1,270 @@
+import java.io.*;
+import java.net.*;
+import java.nio.charset.StandardCharsets;
+import java.util.concurrent.TimeUnit;
+
+public class XssVulnerabilityTest {
+    private static final String SHORT_XSS_PAYLOAD = "<svg/onload=alert()>";
+    
+    public static void main(String[] args) {
+        try {
+            // Check if the application is vulnerable to XSS
+            boolean isVulnerable = checkForXssVulnerability();
+            
+            if (isVulnerable) {
+                System.out.println("TEST FAILED: XSS vulnerability exists!");
+                System.exit(1); // Exit with non-zero code if vulnerability exists
+            } else {
+                System.out.println("TEST PASSED: No XSS vulnerability detected.");
+                System.exit(0); // Exit with code 0 if no vulnerability
+            }
+            
+        } catch (Exception e) {
+            e.printStackTrace();
+            System.out.println("TEST FAILED: Exception occurred during testing.");
+            System.exit(1);
+        }
+    }
+    
+    private static boolean checkForXssVulnerability() throws IOException {
+        // First, check if the template escapes HTML by default
+        boolean templateEscapes = checkTemplateEscaping();
+        if (templateEscapes) {
+            System.out.println("Template has HTML escaping, not vulnerable to XSS.");
+            return false;
+        }
+        
+        // Check if there's any sanitization in the controller
+        boolean hasSanitization = checkForSanitization();
+        if (hasSanitization) {
+            System.out.println("Controller has input sanitization, not vulnerable to XSS.");
+            return false;
+        }
+        
+        // Check if the XSS payload length would be allowed
+        if (!checkPayloadLengthAllowed()) {
+            System.out.println("XSS payload length would be rejected, not vulnerable to XSS.");
+            return false;
+        }
+        
+        // If we reach here, the application is likely vulnerable to XSS
+        System.out.println("Application appears vulnerable to XSS:");
+        System.out.println("1. No template escaping detected");
+        System.out.println("2. No input sanitization detected");
+        System.out.println("3. XSS payload length would be accepted");
+        
+        // Analyze the flow to confirm vulnerability
+        System.out.println("\nAnalyzing vulnerability flow:");
+        System.out.println("Source: UserController.java - add() method receives unsanitized username");
+        System.out.println("Intermediate: Username length is validated but content is not sanitized");
+        System.out.println("Intermediate: Unsanitized username is stored in the database");
+        System.out.println("Sink: user.index.ftl - Username is rendered without HTML escaping");
+        
+        // Demonstrate the vulnerability by showing the code that would be executed
+        System.out.println("\nVulnerability demonstration:");
+        System.out.println("1. A malicious user submits a username with XSS payload: " + SHORT_XSS_PAYLOAD);
+        System.out.println("2. The application validates only the length (20 chars) but not the content");
+        System.out.println("3. The payload is stored in the database as-is");
+        System.out.println("4. When the username is displayed, the script executes in the victim's browser");
+        
+        return true;
+    }
+    
+    private static boolean checkForSanitization() throws IOException {
+        System.out.println("Checking for XSS sanitization in UserController.java...");
+        
+        File userControllerFile = new File("/project/xxl-job-admin/src/main/java/com/xxl/job/admin/controller/UserController.java");
+        BufferedReader reader = new BufferedReader(new FileReader(userControllerFile));
+        String line;
+        boolean hasSanitization = false;
+        
+        while ((line = reader.readLine()) != null) {
+            // Look for any sanitization methods like escapeHtml, encodeForHTML, etc.
+            if (line.contains("escapeHtml") || line.contains("encodeForHTML") || 
+                line.contains("sanitize") || line.contains("HtmlUtils") ||
+                line.contains("StringEscapeUtils")) {
+                System.out.println("Found potential sanitization: " + line);
+                hasSanitization = true;
+            }
+            
+            // Check if there's any validation beyond length check
+            if (line.contains("username") && (line.contains("validate") || line.contains("check")) && 
+                !line.contains("length")) {
+                System.out.println("Found potential validation: " + line);
+                hasSanitization = true;
+            }
+        }
+        reader.close();
+        
+        return hasSanitization;
+    }
+    
+    private static boolean checkTemplateEscaping() throws IOException {
+        System.out.println("Checking for HTML escaping in templates...");
+        
+        File templateFile = new File("/project/xxl-job-admin/src/main/resources/templates/user/user.index.ftl");
+        BufferedReader reader = new BufferedReader(new FileReader(templateFile));
+        String line;
+        boolean templateEscapes = false;
+        boolean usernameDisplayed = false;
+        
+        while ((line = reader.readLine()) != null) {
+            // Check if username is displayed in the template
+            if (line.contains("username") && line.contains("${")
+                && !line.contains("?html") && !line.contains("?esc") && !line.contains("?xml")) {
+                System.out.println("Found unescaped username display: " + line.trim());
+                usernameDisplayed = true;
+            }
+            
+            // Look for FreeMarker escape syntax like ${username?html} or <#escape x as x?html>
+            if (line.contains("?html") || line.contains("<#escape") || 
+                line.contains("?esc") || line.contains("?xml")) {
+                System.out.println("Found template escaping: " + line.trim());
+                templateEscapes = true;
+            }
+        }
+        reader.close();
+        
+        // Check if there's a global escape directive in the template
+        reader = new BufferedReader(new FileReader(templateFile));
+        StringBuilder templateContent = new StringBuilder();
+        while ((line = reader.readLine()) != null) {
+            templateContent.append(line).append("\n");
+        }
+        reader.close();
+        
+        if (templateContent.toString().contains("<#escape") && 
+            templateContent.toString().contains("</#escape>")) {
+            System.out.println("Found global escape directive in template");
+            templateEscapes = true;
+        }
+        
+        // If username is not displayed in the template, we can't have XSS
+        if (!usernameDisplayed) {
+            System.out.println("Username is not displayed in the template");
+            return true;
+        }
+        
+        return templateEscapes;
+    }
+    
+    private static boolean checkPayloadLengthAllowed() throws IOException {
+        System.out.println("Checking if XSS payload length would be allowed...");
+        
+        File userControllerFile = new File("/project/xxl-job-admin/src/main/java/com/xxl/job/admin/controller/UserController.java");
+        BufferedReader reader = new BufferedReader(new FileReader(userControllerFile));
+        String line;
+        int minLength = 0;
+        int maxLength = Integer.MAX_VALUE;
+        
+        while ((line = reader.readLine()) != null) {
+            // Look for length validation patterns manually
+            if (line.contains("username") && line.contains("length()") && line.contains("<")) {
+                // Try to extract the max length value
+                try {
+                    String[] parts = line.split("<");
+                    for (String part : parts) {
+                        if (part.contains("=")) {
+                            part = part.trim();
+                            if (Character.isDigit(part.charAt(0))) {
+                                String digits = "";
+                                for (int i = 0; i < part.length(); i++) {
+                                    if (Character.isDigit(part.charAt(i))) {
+                                        digits += part.charAt(i);
+                                    } else {
+                                        break;
+                                    }
+                                }
+                                if (!digits.isEmpty()) {
+                                    maxLength = Integer.parseInt(digits);
+                                    System.out.println("Found max length validation: " + maxLength);
+                                }
+                            }
+                        }
+                    }
+                } catch (Exception e) {
+                    System.out.println("Error parsing max length: " + e.getMessage());
+                }
+            }
+            
+            if (line.contains("username") && line.contains("length()") && line.contains(">")) {
+                // Try to extract the min length value
+                try {
+                    String[] parts = line.split(">");
+                    for (String part : parts) {
+                        if (part.contains("=")) {
+                            part = part.trim();
+                            if (Character.isDigit(part.charAt(0))) {
+                                String digits = "";
+                                for (int i = 0; i < part.length(); i++) {
+                                    if (Character.isDigit(part.charAt(i))) {
+                                        digits += part.charAt(i);
+                                    } else {
+                                        break;
+                                    }
+                                }
+                                if (!digits.isEmpty()) {
+                                    minLength = Integer.parseInt(digits);
+                                    System.out.println("Found min length validation: " + minLength);
+                                }
+                            }
+                        }
+                    }
+                } catch (Exception e) {
+                    System.out.println("Error parsing min length: " + e.getMessage());
+                }
+            }
+        }
+        reader.close();
+        
+        // Also check the HTML form for maxlength attribute
+        File templateFile = new File("/project/xxl-job-admin/src/main/resources/templates/user/user.index.ftl");
+        reader = new BufferedReader(new FileReader(templateFile));
+        
+        while ((line = reader.readLine()) != null) {
+            if (line.contains("username") && line.contains("maxlength=")) {
+                try {
+                    String[] parts = line.split("maxlength=");
+                    if (parts.length > 1) {
+                        String part = parts[1].trim();
+                        if (part.startsWith("\"") || part.startsWith("'")) {
+                            part = part.substring(1);
+                            String digits = "";
+                            for (int i = 0; i < part.length(); i++) {
+                                if (Character.isDigit(part.charAt(i))) {
+                                    digits += part.charAt(i);
+                                } else {
+                                    break;
+                                }
+                            }
+                            if (!digits.isEmpty()) {
+                                int formMaxLength = Integer.parseInt(digits);
+                                System.out.println("Found form maxlength: " + formMaxLength);
+                                if (formMaxLength < maxLength) {
+                                    maxLength = formMaxLength;
+                                }
+                            }
+                        }
+                    }
+                } catch (Exception e) {
+                    System.out.println("Error parsing form maxlength: " + e.getMessage());
+                }
+            }
+        }
+        reader.close();
+        
+        // Check if our XSS payload would be blocked by length validation
+        System.out.println("Short XSS payload length: " + SHORT_XSS_PAYLOAD.length());
+        System.out.println("Min allowed length: " + minLength);
+        System.out.println("Max allowed length: " + maxLength);
+        
+        // Check if our payload would be allowed
+        if (SHORT_XSS_PAYLOAD.length() >= minLength && SHORT_XSS_PAYLOAD.length() <= maxLength) {
+            System.out.println("XSS payload length would be allowed");
+            return true;
+        } else {
+            System.out.println("XSS payload would be blocked by length validation");
+            return false;
+        }
+    }
+}
diff --git a/xxl-job-admin/src/test/java/com/xxl/job/admin/controller/XssVulnerabilityTest.java b/xxl-job-admin/src/test/java/com/xxl/job/admin/controller/XssVulnerabilityTest.java
new file mode 100644
index 0000000..9becf5c
--- /dev/null
+++ b/xxl-job-admin/src/test/java/com/xxl/job/admin/controller/XssVulnerabilityTest.java
@@ -0,0 +1,78 @@
+package com.xxl.job.admin.controller;
+
+import com.xxl.job.admin.XxlJobAdminApplication;
+import com.xxl.job.admin.core.model.XxlJobUser;
+import com.xxl.job.admin.dao.XxlJobUserDao;
+import com.xxl.job.core.biz.model.ReturnT;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.http.MediaType;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+import org.springframework.test.web.servlet.MvcResult;
+import org.springframework.test.web.servlet.setup.MockMvcBuilders;
+import org.springframework.util.LinkedMultiValueMap;
+import org.springframework.util.MultiValueMap;
+import org.springframework.web.context.WebApplicationContext;
+
+import static org.junit.Assert.*;
+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest(classes = XxlJobAdminApplication.class)
+public class XssVulnerabilityTest {
+
+    @Autowired
+    private WebApplicationContext webApplicationContext;
+
+    @Autowired
+    private XxlJobUserDao xxlJobUserDao;
+
+    private MockMvc mockMvc;
+
+    @Before
+    public void setup() {
+        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
+    }
+
+    @Test
+    public void testXssVulnerability() throws Exception {
+        // Create a malicious username with XSS payload
+        String xssPayload = "test<script>alert('XSS')</script>";
+        
+        // Create parameters for the request
+        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();
+        params.add("username", xssPayload);
+        params.add("password", "password123");
+        params.add("role", "0"); // Normal user
+        
+        // Send request to add user
+        MvcResult result = mockMvc.perform(post("/user/add")
+                .contentType(MediaType.APPLICATION_FORM_URLENCODED)
+                .params(params))
+                .andExpect(status().isOk())
+                .andReturn();
+        
+        // Check if the user was added successfully
+        String responseContent = result.getResponse().getContentAsString();
+        System.out.println("Response: " + responseContent);
+        
+        // Verify the user was added to the database
+        XxlJobUser user = xxlJobUserDao.loadByUserName(xssPayload);
+        assertNotNull("User should be added to the database", user);
+        
+        // The vulnerability exists if the XSS payload is stored without sanitization
+        // This test will fail (exit with non-zero code) if the vulnerability exists
+        // and pass (exit with code 0) if the vulnerability does not exist
+        
+        // Check if the username contains the XSS payload without sanitization
+        boolean vulnerabilityExists = user.getUsername().contains("<script>");
+        
+        // If the vulnerability exists, the test should fail
+        assertFalse("XSS vulnerability exists: Username contains unsanitized script tags", vulnerabilityExists);
+    }
+}
