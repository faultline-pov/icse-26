diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..c519034
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/nahsra__antisamy_CVE-2022-29577_1.6.6.1 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..defae37
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,12 @@
+FROM maven:3.8.6-openjdk-8
+
+WORKDIR /project
+
+# Do not modify anything above this line
+RUN mvn dependency:get -Dartifact=org.owasp.antisamy:antisamy:1.6.6.1
+RUN mvn dependency:copy -Dartifact=org.owasp.antisamy:antisamy:1.6.6.1 -DoutputDirectory=.
+COPY StyleTagXssTest.java /project/
+COPY src/main/resources/antisamy.xml /project/
+RUN javac -cp antisamy-1.6.6.1.jar StyleTagXssTest.java
+
+CMD ["java", "-cp", ".:/root/.m2/repository/org/owasp/antisamy/antisamy/1.6.6.1/*:/root/.m2/repository/org/owasp/antisamy/antisamy/1.6.6.1/antisamy-1.6.6.1.jar:/root/.m2/repository/net/sourceforge/nekohtml/nekohtml/1.9.22/*:/root/.m2/repository/xerces/xercesImpl/2.12.1/*:/root/.m2/repository/xml-apis/xml-apis/1.4.01/*:/root/.m2/repository/org/apache/httpcomponents/httpclient/4.5.13/*:/root/.m2/repository/org/apache/httpcomponents/httpcore/4.4.13/*:/root/.m2/repository/commons-codec/commons-codec/1.15/*:/root/.m2/repository/commons-io/commons-io/2.8.0/*:/root/.m2/repository/org/slf4j/slf4j-api/1.7.30/*:/root/.m2/repository/commons-logging/commons-logging/1.2/*:/root/.m2/repository/org/apache/commons/commons-lang3/3.11/*:/root/.m2/repository/net/sourceforge/cssparser/cssparser/0.9.29/*:/root/.m2/repository/org/w3c/css/sac/1.3/*:/root/.m2/repository/org/apache/xmlgraphics/batik-css/1.14/*:/root/.m2/repository/org/apache/xmlgraphics/batik-shared-resources/1.14/*:/root/.m2/repository/org/apache/xmlgraphics/batik-util/1.14/*:/root/.m2/repository/org/apache/xmlgraphics/batik-constants/1.14/*:/root/.m2/repository/org/apache/xmlgraphics/batik-i18n/1.14/*:/root/.m2/repository/org/apache/xmlgraphics/xmlgraphics-commons/2.6/*:/root/.m2/repository/commons-logging/commons-logging/1.0.4/*", "StyleTagXssTest"]
\ No newline at end of file
diff --git a/StyleTagXssTest.java b/StyleTagXssTest.java
new file mode 100644
index 0000000..ed84df8
--- /dev/null
+++ b/StyleTagXssTest.java
@@ -0,0 +1,40 @@
+import org.owasp.validator.html.AntiSamy;
+import org.owasp.validator.html.CleanResults;
+import org.owasp.validator.html.Policy;
+
+public class StyleTagXssTest {
+    public static void main(String[] args) {
+        try {
+            // Load the policy file
+            Policy policy = Policy.getInstance(StyleTagXssTest.class.getResourceAsStream("/antisamy.xml"));
+            AntiSamy antiSamy = new AntiSamy(policy);
+            
+            // Create a payload that attempts to exploit the vulnerability
+            String payload = "<div><style>p { font-family: '</style><script>alert(1)</script>'; }</style></div>";
+            
+            System.out.println("Testing payload: " + payload);
+            
+            // Scan the malicious input
+            CleanResults results = antiSamy.scan(payload);
+            String cleanHtml = results.getCleanHTML();
+            
+            System.out.println("Cleaned HTML output: " + cleanHtml);
+            
+            // Check if the vulnerability exists
+            boolean vulnerabilityExists = cleanHtml.contains("<script>") || cleanHtml.contains("alert(");
+            
+            if (vulnerabilityExists) {
+                System.out.println("VULNERABILITY DETECTED: XSS payload survived sanitization!");
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("TEST PASSED: XSS payload was properly sanitized.");
+                System.exit(0); // Test passes if vulnerability is fixed
+            }
+            
+        } catch (Exception e) {
+            System.err.println("Error during test execution: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(2); // Error during test
+        }
+    }
+}
