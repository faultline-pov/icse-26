diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..e805b71
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/codehaus-plexus__plexus-archiver_CVE-2023-37460_4.7.1 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..188f89e
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,20 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/codehaus-plexus__plexus-archiver_CVE-2023-37460_4.7.1 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Run the vulnerability test
+CMD mvn test -Dtest=SymlinkVulnerabilityTest
\ No newline at end of file
diff --git a/src/test/java/org/codehaus/plexus/archiver/SymlinkVulnerabilityTest.java b/src/test/java/org/codehaus/plexus/archiver/SymlinkVulnerabilityTest.java
new file mode 100644
index 0000000..58f72a9
--- /dev/null
+++ b/src/test/java/org/codehaus/plexus/archiver/SymlinkVulnerabilityTest.java
@@ -0,0 +1,127 @@
+package org.codehaus.plexus.archiver;
+
+import org.codehaus.plexus.archiver.zip.ZipUnArchiver;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.io.TempDir;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
+
+/**
+ * Test case for the symlink vulnerability in AbstractUnArchiver (CVE-2023-37460)
+ * 
+ * This test demonstrates a Path Traversal vulnerability (CWE-22) where an attacker can create
+ * files outside the intended extraction directory by exploiting how symlinks are handled.
+ * 
+ * The vulnerability occurs in AbstractUnArchiver.extractFile() when:
+ * 1. A symlink exists in the destination directory pointing to a location outside that directory
+ * 2. The symlink's target does not exist
+ * 3. An archive contains an entry with the same name as the symlink
+ * 
+ * When these conditions are met, the code will extract the archive entry's content to the symlink's
+ * target location, which can be anywhere on the filesystem, potentially leading to arbitrary file
+ * creation and remote code execution.
+ */
+public class SymlinkVulnerabilityTest extends TestSupport {
+
+    private static final String TEST_CONTENT = "This file was created by exploiting the vulnerability";
+    private static final String ENTRY_NAME = "vulnerable-entry";
+
+    /**
+     * Test that demonstrates the vulnerability where a zip file can write to a location
+     * outside the target directory by exploiting a symlink.
+     * 
+     * This test will FAIL if the vulnerability EXISTS (which is what we want for a security test)
+     * and will PASS if the vulnerability has been fixed.
+     * 
+     * The test follows these steps:
+     * 1. Create a symlink inside the extraction directory that points to a target outside the directory
+     * 2. Create a zip file with an entry that has the same name as the symlink
+     * 3. Extract the zip file using ZipUnArchiver
+     * 4. Check if the file outside the extraction directory was created
+     * 
+     * If the file was created, the vulnerability exists and the test fails.
+     * If the file was not created, the vulnerability is fixed and the test passes.
+     */
+    @Test
+    public void testSymlinkVulnerability(@TempDir Path tempDir) throws IOException {
+        System.out.println("Starting symlink vulnerability test");
+        
+        // Create a directory structure for our test
+        Path extractDir = tempDir.resolve("extract-dir");
+        Files.createDirectories(extractDir);
+        System.out.println("Created extraction directory: " + extractDir);
+        
+        // Create a target file path outside the extraction directory
+        Path targetOutsideExtractDir = tempDir.resolve("outside-target.txt");
+        System.out.println("Target file outside extraction directory: " + targetOutsideExtractDir);
+        
+        // Create a symlink inside the extraction directory that points to the target outside
+        Path symlinkPath = extractDir.resolve(ENTRY_NAME);
+        Files.createSymbolicLink(symlinkPath, targetOutsideExtractDir);
+        System.out.println("Created symlink: " + symlinkPath + " -> " + targetOutsideExtractDir);
+        
+        // Verify the symlink was created correctly
+        assertTrue(Files.isSymbolicLink(symlinkPath), "Symlink should be created successfully");
+        assertFalse(Files.exists(targetOutsideExtractDir), "Target file should not exist yet");
+        
+        // Create a zip file with an entry that has the same name as the symlink
+        Path zipFile = tempDir.resolve("exploit.zip");
+        createZipWithEntry(zipFile.toFile(), ENTRY_NAME, TEST_CONTENT);
+        System.out.println("Created zip file with entry: " + ENTRY_NAME);
+        
+        // Extract the zip file using ZipUnArchiver
+        System.out.println("Extracting zip file using ZipUnArchiver");
+        ZipUnArchiver unArchiver = new ZipUnArchiver(zipFile.toFile());
+        unArchiver.setDestDirectory(extractDir.toFile());
+        unArchiver.extract();
+        System.out.println("Extraction completed");
+        
+        // Check if the vulnerability was exploited - the file outside the extract directory should exist
+        // if the vulnerability exists
+        if (Files.exists(targetOutsideExtractDir)) {
+            String fileContent = new String(Files.readAllBytes(targetOutsideExtractDir), StandardCharsets.UTF_8);
+            System.out.println("Target file exists with content: " + fileContent);
+            
+            if (TEST_CONTENT.equals(fileContent)) {
+                // The vulnerability exists - the test should fail
+                Files.deleteIfExists(targetOutsideExtractDir); // Clean up
+                fail("SECURITY VULNERABILITY: The archiver wrote to a file outside the extraction directory via a symlink");
+            }
+        } else {
+            System.out.println("Target file was not created - vulnerability appears to be fixed");
+        }
+        
+        // If we reach here, either the file wasn't created or it doesn't contain our content
+        // This means the vulnerability is fixed, and the test should pass
+        
+        // Clean up
+        if (Files.exists(targetOutsideExtractDir)) {
+            Files.deleteIfExists(targetOutsideExtractDir);
+        }
+    }
+    
+    /**
+     * Creates a zip file with a single entry
+     */
+    private void createZipWithEntry(File zipFile, String entryName, String content) throws IOException {
+        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))) {
+            ZipEntry entry = new ZipEntry(entryName);
+            zos.putNextEntry(entry);
+            zos.write(content.getBytes(StandardCharsets.UTF_8));
+            zos.closeEntry();
+        }
+    }
+}
