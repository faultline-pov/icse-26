diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 000000000..7e9932091
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/hibernate__hibernate-validator_CVE-2019-10219_6.0.17.Final /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 000000000..e3dd8b1ce
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,39 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/hibernate__hibernate-validator_CVE-2019-10219_6.0.17.Final /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Build the project
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Download the EL dependencies
+RUN mvn dependency:get -Dartifact=javax.el:javax.el-api:3.0.0
+RUN mvn dependency:get -Dartifact=org.glassfish:javax.el:3.0.1-b08
+
+# Download JSoup dependency
+RUN mvn dependency:get -Dartifact=org.jsoup:jsoup:1.10.3
+
+# Extract the dependencies needed for our test
+RUN mkdir -p lib
+RUN find . -name "*.jar" -exec cp {} lib/ \;
+RUN cp ~/.m2/repository/javax/el/javax.el-api/3.0.0/javax.el-api-3.0.0.jar lib/
+RUN cp ~/.m2/repository/org/glassfish/javax.el/3.0.1-b08/javax.el-3.0.1-b08.jar lib/
+RUN cp ~/.m2/repository/org/jsoup/jsoup/1.10.3/jsoup-1.10.3.jar lib/
+
+# Compile our vulnerability test
+RUN javac -cp "lib/*" SafeHtmlVulnerabilityTest.java
+
+# Run our vulnerability test
+CMD java -cp ".:lib/*" SafeHtmlVulnerabilityTest
\ No newline at end of file
diff --git a/SafeHtmlVulnerabilityTest.java b/SafeHtmlVulnerabilityTest.java
new file mode 100644
index 000000000..9556e7414
--- /dev/null
+++ b/SafeHtmlVulnerabilityTest.java
@@ -0,0 +1,106 @@
+import javax.validation.Validation;
+import javax.validation.Validator;
+import javax.validation.ValidatorFactory;
+import javax.validation.constraints.NotNull;
+
+import org.hibernate.validator.constraints.SafeHtml;
+import org.hibernate.validator.constraints.SafeHtml.WhiteListType;
+
+/**
+ * Test case to demonstrate the vulnerability in SafeHtml annotation (CVE-2019-10219)
+ * where malicious code in HTML comments and processing instructions
+ * is not properly sanitized, potentially leading to XSS attacks.
+ *
+ * This test will exit with code 1 if the vulnerability exists,
+ * and code 0 if the vulnerability does not exist.
+ */
+public class SafeHtmlVulnerabilityTest {
+
+    /**
+     * A class with a field annotated with @SafeHtml
+     */
+    public static class UserInput {
+        @NotNull
+        @SafeHtml(whitelistType = WhiteListType.RELAXED)
+        private String content;
+
+        public UserInput(String content) {
+            this.content = content;
+        }
+
+        public String getContent() {
+            return content;
+        }
+    }
+
+    public static void main(String[] args) {
+        System.out.println("=== SafeHtml Vulnerability Test (CVE-2019-10219) ===");
+        System.out.println("This test checks if the SafeHtml annotation properly sanitizes");
+        System.out.println("malicious code in HTML comments and processing instructions.");
+        System.out.println("================================================================\n");
+
+        // Create a validator
+        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
+        Validator validator = factory.getValidator();
+
+        // First, verify that the validator works correctly for normal cases
+        String safeInput = "<p>This is safe content</p>";
+        String unsafeInput = "<p>Unsafe <script>alert('XSS')</script> content</p>";
+        
+        UserInput safeUserInput = new UserInput(safeInput);
+        UserInput unsafeUserInput = new UserInput(unsafeInput);
+        
+        boolean isSafeValid = validator.validate(safeUserInput).isEmpty();
+        boolean isUnsafeValid = validator.validate(unsafeUserInput).isEmpty();
+        
+        System.out.println("Baseline Test - Safe HTML:\n" + 
+                         "Input: " + safeInput + "\n" +
+                         "Validation result: " + isSafeValid + " (should be true)\n");
+
+        System.out.println("Baseline Test - Unsafe HTML:\n" + 
+                         "Input: " + unsafeInput + "\n" +
+                         "Validation result: " + isUnsafeValid + " (should be false)\n");
+        
+        // If the validator doesn't work as expected for baseline cases, we can't reliably test the vulnerability
+        if (!isSafeValid || isUnsafeValid) {
+            System.out.println("ERROR: Validator is not working correctly for baseline cases.");
+            System.out.println("Cannot reliably test for the vulnerability.");
+            System.exit(2);
+        }
+
+        // Test 1: Malicious input with script in HTML comment
+        String maliciousInput1 = "<p>Safe content</p><!-- <script>alert('XSS')</script> -->";
+        UserInput userInput1 = new UserInput(maliciousInput1);
+
+        // Test 2: Malicious input with script in XML processing instruction
+        String maliciousInput2 = "<p>Safe content</p><?xml-stylesheet href='javascript:alert(1)' ?>";
+        UserInput userInput2 = new UserInput(maliciousInput2);
+
+        // Validate vulnerability test inputs
+        boolean isValid1 = validator.validate(userInput1).isEmpty();
+        boolean isValid2 = validator.validate(userInput2).isEmpty();
+
+        System.out.println("Test 1 - HTML Comment XSS:\n" + 
+                         "Input: " + maliciousInput1 + "\n" +
+                         "Validation result: " + isValid1 + " (should be false if secure)\n");
+
+        System.out.println("Test 2 - Processing Instruction XSS:\n" + 
+                         "Input: " + maliciousInput2 + "\n" +
+                         "Validation result: " + isValid2 + " (should be false if secure)\n");
+
+        // If any test passes when it should fail, the vulnerability exists
+        boolean vulnerabilityExists = isValid1 || isValid2;
+        
+        System.out.println("================================================================");
+        if (vulnerabilityExists) {
+            System.out.println("RESULT: VULNERABILITY DETECTED - CVE-2019-10219");
+            System.out.println("The SafeHtml annotation does not properly sanitize HTML comments");
+            System.out.println("or processing instructions, which can lead to XSS attacks.");
+            System.exit(1); // Exit with error code if vulnerability exists
+        } else {
+            System.out.println("RESULT: NO VULNERABILITY DETECTED");
+            System.out.println("The SafeHtml annotation properly sanitizes HTML comments and processing instructions.");
+            System.exit(0); // Exit with success code if no vulnerability
+        }
+    }
+}
\ No newline at end of file
diff --git a/SafeHtmlVulnerabilityTestRunner.java b/SafeHtmlVulnerabilityTestRunner.java
new file mode 100644
index 000000000..9a855c762
--- /dev/null
+++ b/SafeHtmlVulnerabilityTestRunner.java
@@ -0,0 +1,37 @@
+import org.hibernate.validator.test.internal.constraintvalidators.hv.SafeHtmlVulnerabilityTest;
+import org.testng.TestListenerAdapter;
+import org.testng.TestNG;
+import org.testng.ITestResult;
+import java.util.List;
+
+/**
+ * Runner for the SafeHtmlVulnerabilityTest
+ * This class will run the tests and exit with code 1 if the vulnerability exists,
+ * and code 0 if the vulnerability does not exist.
+ */
+public class SafeHtmlVulnerabilityTestRunner {
+    public static void main(String[] args) {
+        TestListenerAdapter tla = new TestListenerAdapter();
+        TestNG testng = new TestNG();
+        testng.setTestClasses(new Class[] { SafeHtmlVulnerabilityTest.class });
+        testng.addListener(tla);
+        testng.run();
+        
+        // Check if any tests failed
+        List<ITestResult> failedTests = tla.getFailedTests();
+        
+        if (failedTests.isEmpty()) {
+            // If no tests failed, it means the vulnerability does not exist (tests passed)
+            System.out.println("\n\nTEST RESULT: PASS - The vulnerability does not exist\n");
+            System.exit(0);
+        } else {
+            // If tests failed, it means the vulnerability exists
+            System.out.println("\n\nTEST RESULT: FAIL - The vulnerability exists\n");
+            for (ITestResult result : failedTests) {
+                System.out.println("Failed test: " + result.getName());
+                System.out.println("Reason: " + result.getThrowable().getMessage());
+            }
+            System.exit(1);
+        }
+    }
+}
\ No newline at end of file
diff --git a/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/SafeHtmlVulnerabilityTest.java b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/SafeHtmlVulnerabilityTest.java
new file mode 100644
index 000000000..807ef7225
--- /dev/null
+++ b/engine/src/test/java/org/hibernate/validator/test/internal/constraintvalidators/hv/SafeHtmlVulnerabilityTest.java
@@ -0,0 +1,80 @@
+package org.hibernate.validator.test.internal.constraintvalidators.hv;
+
+import static org.testng.Assert.assertFalse;
+import static org.testng.Assert.assertTrue;
+
+import javax.validation.Validation;
+import javax.validation.Validator;
+import javax.validation.ValidatorFactory;
+
+import org.hibernate.validator.constraints.SafeHtml;
+import org.hibernate.validator.constraints.SafeHtml.WhiteListType;
+import org.testng.annotations.Test;
+
+/**
+ * Test case to demonstrate the vulnerability in SafeHtml annotation
+ * where malicious code in HTML comments and processing instructions
+ * is not properly sanitized.
+ */
+public class SafeHtmlVulnerabilityTest {
+
+    /**
+     * A class with a field annotated with @SafeHtml
+     */
+    public static class UserInput {
+        @SafeHtml(whitelistType = WhiteListType.RELAXED)
+        private String content;
+
+        public UserInput(String content) {
+            this.content = content;
+        }
+
+        public String getContent() {
+            return content;
+        }
+    }
+
+    @Test
+    public void testXssVulnerabilityInHtmlComments() {
+        // Create a validator
+        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
+        Validator validator = factory.getValidator();
+
+        // Malicious input with script in HTML comment
+        String maliciousInput = "<p>Safe content</p><!-- <script>alert('XSS')</script> -->";
+        UserInput userInput = new UserInput(maliciousInput);
+
+        // This should fail because the HTML comment contains a script tag
+        // which is not properly sanitized
+        boolean isValid = validator.validate(userInput).isEmpty();
+        
+        // If the vulnerability exists, this will be true (validation passes)
+        // If the vulnerability is fixed, this will be false (validation fails)
+        System.out.println("Validation result for HTML comment XSS: " + isValid);
+        
+        // The test should fail if the vulnerability exists
+        assertFalse(isValid, "Vulnerability exists: SafeHtml allows script tags in HTML comments");
+    }
+
+    @Test
+    public void testXssVulnerabilityInProcessingInstructions() {
+        // Create a validator
+        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
+        Validator validator = factory.getValidator();
+
+        // Malicious input with script in XML processing instruction
+        String maliciousInput = "<p>Safe content</p><?xml-stylesheet href='javascript:alert(1)' ?>";
+        UserInput userInput = new UserInput(maliciousInput);
+
+        // This should fail because the processing instruction contains malicious JavaScript
+        // which is not properly sanitized
+        boolean isValid = validator.validate(userInput).isEmpty();
+        
+        // If the vulnerability exists, this will be true (validation passes)
+        // If the vulnerability is fixed, this will be false (validation fails)
+        System.out.println("Validation result for processing instruction XSS: " + isValid);
+        
+        // The test should fail if the vulnerability exists
+        assertFalse(isValid, "Vulnerability exists: SafeHtml allows JavaScript in processing instructions");
+    }
+}
\ No newline at end of file
