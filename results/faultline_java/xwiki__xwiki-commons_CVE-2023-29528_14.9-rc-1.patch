diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 000000000..f0f07d332
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/xwiki__xwiki-commons_CVE-2023-29528_14.9-rc-1 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 000000000..1e6911654
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,26 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/xwiki__xwiki-commons_CVE-2023-29528_14.9-rc-1 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Copy dependencies for the XML module
+RUN mvn dependency:copy-dependencies -DoutputDirectory=target/dependencies -f xwiki-commons-core/xwiki-commons-xml/pom.xml
+
+# Compile the test
+RUN javac -cp "xwiki-commons-core/xwiki-commons-xml/target/xwiki-commons-xml-14.10-SNAPSHOT.jar:xwiki-commons-core/xwiki-commons-xml/target/dependencies/*:xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/target/xwiki-commons-component-api-14.10-SNAPSHOT.jar:xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/target/xwiki-commons-component-default-14.10-SNAPSHOT.jar" XSSVulnerabilityTest.java
+
+# Run the test
+CMD java -cp ".:xwiki-commons-core/xwiki-commons-xml/target/xwiki-commons-xml-14.10-SNAPSHOT.jar:xwiki-commons-core/xwiki-commons-xml/target/dependencies/*:xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-api/target/xwiki-commons-component-api-14.10-SNAPSHOT.jar:xwiki-commons-core/xwiki-commons-component/xwiki-commons-component-default/target/xwiki-commons-component-default-14.10-SNAPSHOT.jar" XSSVulnerabilityTest
\ No newline at end of file
diff --git a/XSSVulnerabilityTest.java b/XSSVulnerabilityTest.java
new file mode 100644
index 000000000..bab8826b0
--- /dev/null
+++ b/XSSVulnerabilityTest.java
@@ -0,0 +1,95 @@
+import java.io.StringReader;
+import java.io.StringWriter;
+
+import javax.xml.transform.OutputKeys;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.w3c.dom.Document;
+import org.xwiki.component.embed.EmbeddableComponentManager;
+import org.xwiki.xml.html.HTMLCleaner;
+import org.xwiki.xml.html.HTMLCleanerConfiguration;
+
+/**
+ * Test case for CVE-2023-29528 - XSS vulnerability in HTML cleaner's restricted mode.
+ *
+ * This test verifies if the HTML cleaner properly sanitizes malformed HTML comments that could be used
+ * for cross-site scripting (XSS) attacks. The vulnerability exists when the HTML cleaner in "restricted" mode
+ * does not properly handle malformed HTML comments that start with "<!-->", allowing JavaScript code to be
+ * preserved in the output.
+ *
+ * The vulnerability flow:
+ * 1. The HTML cleaner is configured to run in "restricted" mode
+ * 2. A malformed HTML comment starting with "<!-->" is provided as input
+ * 3. The comment contains HTML elements with event handlers that can execute JavaScript
+ * 4. The SanitizerFilter processes the document but fails to properly sanitize the malformed comment
+ * 5. The BodyFilter ignores comment nodes, allowing the malicious content to pass through
+ * 6. The resulting document contains the unsanitized JavaScript code
+ *
+ * This test will FAIL (exit with code 1) if the vulnerability exists, and PASS (exit with code 0) if it has been fixed.
+ */
+public class XSSVulnerabilityTest
+{
+    public static void main(String[] args) throws Exception
+    {
+        // Initialize the component manager
+        EmbeddableComponentManager componentManager = new EmbeddableComponentManager();
+        componentManager.initialize(XSSVulnerabilityTest.class.getClassLoader());
+
+        // Get the HTML cleaner
+        HTMLCleaner htmlCleaner = componentManager.getInstance(HTMLCleaner.class);
+        
+        // Get the default configuration and set it to restricted mode
+        HTMLCleanerConfiguration configuration = htmlCleaner.getDefaultConfiguration();
+        configuration.setParameters(java.util.Collections.singletonMap(HTMLCleanerConfiguration.RESTRICTED, "true"));
+        
+        // The malicious input with a malformed HTML comment that contains JavaScript
+        // The comment starts with "<!-->" (note the closing bracket immediately after the comment opening)
+        // and contains an HTML element with an event handler that can execute JavaScript
+        String maliciousInput = "<!--> <Details Open OnToggle=alert('XSS')>";
+        
+        System.out.println("Testing HTML cleaner with malicious input: " + maliciousInput);
+        
+        // Clean the HTML using the restricted mode
+        Document cleanedDocument = htmlCleaner.clean(new StringReader(maliciousInput), configuration);
+        
+        // Convert the document to string for inspection
+        String cleanedHtml = documentToString(cleanedDocument);
+        System.out.println("Cleaned HTML: " + cleanedHtml);
+        
+        // Check if the malicious JavaScript is still present in the cleaned HTML
+        // We check for various forms of the event handler attribute as it might be normalized
+        boolean isVulnerable = cleanedHtml.contains("OnToggle=alert") || 
+                               cleanedHtml.contains("ontoggle=") || 
+                               cleanedHtml.contains("ONTOGGLE=");
+        
+        if (isVulnerable) {
+            System.out.println("VULNERABILITY DETECTED: The HTML cleaner did not properly sanitize the malicious input.");
+            System.out.println("The malformed HTML comment with JavaScript code was preserved in the output.");
+            System.exit(1); // Test fails if vulnerability exists
+        } else {
+            System.out.println("No vulnerability detected: The HTML cleaner properly sanitized the input.");
+            System.out.println("The malformed HTML comment was either removed or properly sanitized.");
+            System.exit(0); // Test passes if vulnerability is fixed
+        }
+    }
+    
+    /**
+     * Converts a DOM Document to a String.
+     */
+    private static String documentToString(Document document) throws Exception
+    {
+        TransformerFactory tf = TransformerFactory.newInstance();
+        Transformer transformer = tf.newTransformer();
+        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no");
+        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
+        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
+        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
+
+        StringWriter writer = new StringWriter();
+        transformer.transform(new DOMSource(document), new StreamResult(writer));
+        return writer.toString();
+    }
+}
