diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..eb1225b
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__jspwiki_CVE-2019-10078_2.11.0.M3 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..cd6679a
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,37 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/apache__jspwiki_CVE-2019-10078_2.11.0.M3 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Copy all dependencies to the target/dependency directory
+RUN cd jspwiki-main && mvn dependency:copy-dependencies
+
+# Create a shell script to run the test and check the exit code
+RUN echo '#!/bin/bash\n\
+mvn -f jspwiki-main/pom.xml test -Dtest=org.apache.wiki.plugin.vulnerability.XSSVulnerabilityTestRunner\n\
+TEST_EXIT_CODE=$?\n\
+if [ $TEST_EXIT_CODE -eq 0 ]; then\n\
+  echo "TEST PASSED: No XSS vulnerability detected. The vulnerability has been fixed."\n\
+  exit 0 # Exit with success if no vulnerability is found (test passes)\n\
+else\n\
+  echo "TEST FAILED: XSS vulnerability detected. The vulnerability exists."\n\
+  exit 1 # Exit with error if vulnerability is found (test fails)\n\
+fi' > /project/run_test.sh
+
+RUN chmod +x /project/run_test.sh
+
+# Run the test script
+CMD ["/project/run_test.sh"]
\ No newline at end of file
diff --git a/jspwiki-main/src/test/java/org/apache/wiki/plugin/vulnerability/XSSVulnerabilityTest.java b/jspwiki-main/src/test/java/org/apache/wiki/plugin/vulnerability/XSSVulnerabilityTest.java
new file mode 100644
index 0000000..2cc4c6b
--- /dev/null
+++ b/jspwiki-main/src/test/java/org/apache/wiki/plugin/vulnerability/XSSVulnerabilityTest.java
@@ -0,0 +1,136 @@
+/*
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    "License"); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+ */
+package org.apache.wiki.plugin.vulnerability;
+
+import org.apache.wiki.TestEngine;
+import org.apache.wiki.WikiContext;
+import org.apache.wiki.WikiEngine;
+import org.apache.wiki.WikiPage;
+import org.apache.wiki.api.exceptions.WikiException;
+import org.apache.wiki.render.RenderingManager;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import java.util.Properties;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+/**
+ * Test case for XSS vulnerability in JSPWiki plugins.
+ * This test verifies that plugin parameters are properly sanitized to prevent XSS attacks.
+ */
+public class XSSVulnerabilityTest {
+
+    private TestEngine testEngine;
+    private WikiContext context;
+    private Properties props;
+    private WikiPage testPage;
+    private static final String TEST_PAGE_NAME = "XSSTestPage";
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        props = TestEngine.getTestProperties();
+        testEngine = new TestEngine(props);
+        testPage = new WikiPage(testEngine, TEST_PAGE_NAME);
+        testEngine.saveText(TEST_PAGE_NAME, "Initial content");
+        context = new WikiContext(testEngine, testPage);
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+        testEngine.deleteTestPage(TEST_PAGE_NAME);
+    }
+
+    /**
+     * Test for XSS vulnerability in ReferredPagesPlugin.
+     * This test checks if a malicious script injected as a plugin parameter is properly escaped.
+     */
+    @Test
+    public void testXSSVulnerabilityInReferredPagesPlugin() throws Exception {
+        // Create a test page that will be referred to
+        String referredPageName = "ReferredPage";
+        testEngine.saveText(referredPageName, "This is a page that will be referred to");
+        
+        try {
+            // Create a malicious plugin invocation with XSS payload in the 'include' parameter
+            String xssPayload = "<script>alert('XSS')</script>";
+            String wikiText = "[{ReferredPagesPlugin page='" + TEST_PAGE_NAME + "' include='" + xssPayload + "'}]";
+            
+            // Save the page with the plugin invocation
+            testEngine.saveText(TEST_PAGE_NAME, wikiText);
+            
+            // Render the page
+            String renderedContent = testEngine.getHTML(TEST_PAGE_NAME);
+            
+            // Check if the XSS payload is present in the rendered output without being escaped
+            boolean isVulnerable = renderedContent.contains(xssPayload);
+            
+            // The test should fail if the vulnerability exists (XSS payload is not escaped)
+            assertFalse(isVulnerable, "XSS vulnerability detected: unescaped script tag found in output");
+            
+            // Check if the XSS payload is properly escaped in the rendered output
+            boolean isEscaped = renderedContent.contains("&lt;script&gt;") || 
+                               !renderedContent.contains("<script>");
+            
+            // The test should pass if the XSS payload is properly escaped
+            assertTrue(isEscaped, "XSS payload should be properly escaped");
+            
+        } finally {
+            // Clean up
+            testEngine.deleteTestPage(referredPageName);
+        }
+    }
+
+    /**
+     * Test for XSS vulnerability in multiple plugins.
+     * This test checks if a malicious script injected as a plugin parameter is properly escaped.
+     */
+    @Test
+    public void testXSSVulnerabilityInMultiplePlugins() throws Exception {
+        // Test with different plugins that might be vulnerable
+        String[] pluginsToTest = {
+            "ReferredPagesPlugin", 
+            "ReferringPagesPlugin", 
+            "InsertPage",
+            "Counter"
+        };
+        
+        for (String pluginName : pluginsToTest) {
+            // Create a malicious plugin invocation with XSS payload
+            String xssPayload = "\"'><script>alert('XSS')</script>";
+            String wikiText = "[{" + pluginName + " text='" + xssPayload + "' page='" + TEST_PAGE_NAME + "'}]";
+            
+            // Save the page with the plugin invocation
+            testEngine.saveText(TEST_PAGE_NAME, wikiText);
+            
+            // Render the page
+            String renderedContent = testEngine.getHTML(TEST_PAGE_NAME);
+            
+            // Check if the XSS payload is present in the rendered output without being escaped
+            boolean isVulnerable = renderedContent.contains("<script>alert('XSS')</script>");
+            
+            // The test should fail if the vulnerability exists (XSS payload is not escaped)
+            assertFalse(isVulnerable, "XSS vulnerability detected in " + pluginName + ": unescaped script tag found in output");
+            
+            System.out.println("Tested plugin: " + pluginName + ", Vulnerable: " + isVulnerable);
+        }
+    }
+}
diff --git a/jspwiki-main/src/test/java/org/apache/wiki/plugin/vulnerability/XSSVulnerabilityTestRunner.java b/jspwiki-main/src/test/java/org/apache/wiki/plugin/vulnerability/XSSVulnerabilityTestRunner.java
new file mode 100644
index 0000000..c84f08e
--- /dev/null
+++ b/jspwiki-main/src/test/java/org/apache/wiki/plugin/vulnerability/XSSVulnerabilityTestRunner.java
@@ -0,0 +1,195 @@
+/*
+    Licensed to the Apache Software Foundation (ASF) under one
+    or more contributor license agreements.  See the NOTICE file
+    distributed with this work for additional information
+    regarding copyright ownership.  The ASF licenses this file
+    to you under the Apache License, Version 2.0 (the
+    "License"); you may not use this file except in compliance
+    with the License.  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing,
+    software distributed under the License is distributed on an
+    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+    KIND, either express or implied.  See the License for the
+    specific language governing permissions and limitations
+    under the License.
+ */
+package org.apache.wiki.plugin.vulnerability;
+
+import org.apache.wiki.TestEngine;
+import org.apache.wiki.WikiContext;
+import org.apache.wiki.WikiEngine;
+import org.apache.wiki.WikiPage;
+import org.apache.wiki.api.exceptions.WikiException;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import java.util.Properties;
+
+import static org.junit.jupiter.api.Assertions.fail;
+
+/**
+ * Test runner for XSS vulnerability in JSPWiki plugins.
+ * This test verifies that plugin parameters are properly sanitized to prevent XSS attacks.
+ * 
+ * The test will fail if the vulnerability exists (XSS is possible).
+ * The test will pass if the vulnerability is fixed (no XSS possible).
+ */
+public class XSSVulnerabilityTestRunner {
+
+    private static final String TEST_PAGE_NAME = "XSSTestPage";
+    private TestEngine testEngine;
+    
+    @BeforeEach
+    public void setUp() throws Exception {
+        System.out.println("Setting up XSS vulnerability test...");
+        
+        // Set up the test environment
+        Properties props = TestEngine.getTestProperties();
+        testEngine = new TestEngine(props);
+        
+        // Create a test page that will be referred to
+        String referredPageName = "ReferredPage";
+        testEngine.saveText(referredPageName, "This is a page that will be referred to");
+    }
+    
+    @AfterEach
+    public void tearDown() throws Exception {
+        System.out.println("Cleaning up after XSS vulnerability test...");
+        testEngine.deleteTestPage(TEST_PAGE_NAME);
+        testEngine.deleteTestPage("ReferredPage");
+    }
+    
+    @Test
+    public void testReferredPagesPluginXSSVulnerability() throws Exception {
+        System.out.println("Testing ReferredPagesPlugin for XSS vulnerability...");
+        
+        // Create a malicious plugin invocation with XSS payload
+        String xssPayload = "<script>alert('XSS')</script>";
+        String wikiText = "[{ReferredPagesPlugin include='" + xssPayload + "'}]";
+        
+        // Save the page with the plugin invocation
+        testEngine.saveText(TEST_PAGE_NAME, wikiText);
+        
+        // Render the page
+        String renderedContent = testEngine.getHTML(TEST_PAGE_NAME);
+        
+        System.out.println("Rendered content: " + renderedContent);
+        
+        // Check if the XSS payload is present in the rendered output without being escaped
+        if (renderedContent.contains("<script>")) {
+            System.out.println("VULNERABILITY FOUND in ReferredPagesPlugin!");
+            System.out.println("XSS payload was not properly escaped in the output.");
+            fail("XSS vulnerability detected in ReferredPagesPlugin");
+        } else {
+            System.out.println("No vulnerability detected in ReferredPagesPlugin.");
+        }
+    }
+    
+    @Test
+    public void testReferringPagesPluginXSSVulnerability() throws Exception {
+        System.out.println("Testing ReferringPagesPlugin for XSS vulnerability...");
+        
+        // Create a malicious plugin invocation with XSS payload
+        String xssPayload = "<script>alert('XSS')</script>";
+        String wikiText = "[{ReferringPagesPlugin exclude='" + xssPayload + "'}]";
+        
+        // Save the page with the plugin invocation
+        testEngine.saveText(TEST_PAGE_NAME, wikiText);
+        
+        // Render the page
+        String renderedContent = testEngine.getHTML(TEST_PAGE_NAME);
+        
+        System.out.println("Rendered content: " + renderedContent);
+        
+        // Check if the XSS payload is present in the rendered output without being escaped
+        if (renderedContent.contains("<script>")) {
+            System.out.println("VULNERABILITY FOUND in ReferringPagesPlugin!");
+            System.out.println("XSS payload was not properly escaped in the output.");
+            fail("XSS vulnerability detected in ReferringPagesPlugin");
+        } else {
+            System.out.println("No vulnerability detected in ReferringPagesPlugin.");
+        }
+    }
+    
+    @Test
+    public void testInsertPagePluginXSSVulnerability() throws Exception {
+        System.out.println("Testing InsertPage plugin for XSS vulnerability...");
+        
+        // Create a malicious plugin invocation with XSS payload
+        String xssPayload = "<script>alert('XSS')</script>";
+        String wikiText = "[{InsertPage page='" + xssPayload + "'}]";
+        
+        // Save the page with the plugin invocation
+        testEngine.saveText(TEST_PAGE_NAME, wikiText);
+        
+        // Render the page
+        String renderedContent = testEngine.getHTML(TEST_PAGE_NAME);
+        
+        System.out.println("Rendered content: " + renderedContent);
+        
+        // Check if the XSS payload is present in the rendered output without being escaped
+        if (renderedContent.contains("<script>")) {
+            System.out.println("VULNERABILITY FOUND in InsertPage plugin!");
+            System.out.println("XSS payload was not properly escaped in the output.");
+            fail("XSS vulnerability detected in InsertPage plugin");
+        } else {
+            System.out.println("No vulnerability detected in InsertPage plugin.");
+        }
+    }
+    
+    @Test
+    public void testCounterPluginXSSVulnerability() throws Exception {
+        System.out.println("Testing Counter plugin for XSS vulnerability...");
+        
+        // Create a malicious plugin invocation with XSS payload
+        String xssPayload = "<script>alert('XSS')</script>";
+        String wikiText = "[{Counter name='" + xssPayload + "'}]";
+        
+        // Save the page with the plugin invocation
+        testEngine.saveText(TEST_PAGE_NAME, wikiText);
+        
+        // Render the page
+        String renderedContent = testEngine.getHTML(TEST_PAGE_NAME);
+        
+        System.out.println("Rendered content: " + renderedContent);
+        
+        // Check if the XSS payload is present in the rendered output without being escaped
+        if (renderedContent.contains("<script>")) {
+            System.out.println("VULNERABILITY FOUND in Counter plugin!");
+            System.out.println("XSS payload was not properly escaped in the output.");
+            fail("XSS vulnerability detected in Counter plugin");
+        } else {
+            System.out.println("No vulnerability detected in Counter plugin.");
+        }
+    }
+    
+    @Test
+    public void testTableOfContentsPluginXSSVulnerability() throws Exception {
+        System.out.println("Testing TableOfContents plugin for XSS vulnerability...");
+        
+        // Create a malicious plugin invocation with XSS payload
+        String xssPayload = "<script>alert('XSS')</script>";
+        String wikiText = "[{TableOfContents title='" + xssPayload + "'}]";
+        
+        // Save the page with the plugin invocation
+        testEngine.saveText(TEST_PAGE_NAME, wikiText);
+        
+        // Render the page
+        String renderedContent = testEngine.getHTML(TEST_PAGE_NAME);
+        
+        System.out.println("Rendered content: " + renderedContent);
+        
+        // Check if the XSS payload is present in the rendered output without being escaped
+        if (renderedContent.contains("<script>")) {
+            System.out.println("VULNERABILITY FOUND in TableOfContents plugin!");
+            System.out.println("XSS payload was not properly escaped in the output.");
+            fail("XSS vulnerability detected in TableOfContents plugin");
+        } else {
+            System.out.println("No vulnerability detected in TableOfContents plugin.");
+        }
+    }
+}
