diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..f2964c5
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/jstachio__jstachio_CVE-2023-33962_1.0.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..1f0aaf2
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,26 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/jstachio__jstachio_CVE-2023-33962_1.0.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Create a test directory
+RUN mkdir -p /project/test
+
+# Compile the test with the correct classpath
+RUN javac -cp "/project/api/jstachio/target/classes:/project/api/annotation/target/classes" -d /project/test /project/XssVulnerabilityTest.java
+
+# Run the test
+CMD ["java", "-cp", "/project/test:/project/api/jstachio/target/classes:/project/api/annotation/target/classes", "XssVulnerabilityTest"]
diff --git a/XssVulnerabilityTest.java b/XssVulnerabilityTest.java
new file mode 100644
index 0000000..b4975e0
--- /dev/null
+++ b/XssVulnerabilityTest.java
@@ -0,0 +1,80 @@
+import io.jstach.jstachio.Escaper;
+import io.jstach.jstachio.Output;
+import io.jstach.jstachio.escapers.Html;
+import java.io.StringWriter;
+
+/**
+ * Test case for JStachio XSS vulnerability with unescaped single quotes.
+ * This test verifies if the vulnerability exists by checking if single quotes
+ * are properly escaped in HTML attributes.
+ */
+public class XssVulnerabilityTest {
+
+    public static void main(String[] args) {
+        try {
+            // Create a test string with a malicious payload that contains single quotes
+            String maliciousInput = "' onblur='alert(1)";
+            
+            // Create a simple HTML template with the malicious input in a single-quoted attribute
+            String template = "<div attr='" + maliciousInput + "'></div>";
+            System.out.println("Original template: " + template);
+            
+            // Test if the HTML escaper properly escapes single quotes
+            String escapedResult = escapeHtml(maliciousInput);
+            String safeTemplate = "<div attr='" + escapedResult + "'></div>";
+            System.out.println("Escaped result: " + escapedResult);
+            System.out.println("Safe template: " + safeTemplate);
+            
+            // Check if the vulnerability exists
+            // If single quotes are not escaped, the output will contain the unescaped JavaScript code
+            if (escapedResult.contains("'")) {
+                System.out.println("VULNERABILITY DETECTED: Single quotes are not escaped properly!");
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected: Single quotes are properly escaped.");
+                System.exit(0); // Test passes if vulnerability is fixed
+            }
+        } catch (Exception e) {
+            System.err.println("Error running test: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+    
+    /**
+     * Escapes a string using the HTML escaper from JStachio
+     */
+    private static String escapeHtml(String input) throws Exception {
+        Escaper escaper = Html.of();
+        StringWriter writer = new StringWriter();
+        StringOutput output = new StringOutput(writer);
+        escaper.append(output, input);
+        return writer.toString();
+    }
+    
+    /**
+     * Simple implementation of Output interface for testing
+     */
+    private static class StringOutput implements Output<Exception> {
+        private final StringWriter writer;
+        
+        public StringOutput(StringWriter writer) {
+            this.writer = writer;
+        }
+        
+        @Override
+        public void append(CharSequence csq) throws Exception {
+            writer.append(csq);
+        }
+        
+        @Override
+        public void append(CharSequence csq, int start, int end) throws Exception {
+            writer.append(csq, start, end);
+        }
+        
+        @Override
+        public void append(char c) throws Exception {
+            writer.append(c);
+        }
+    }
+}
