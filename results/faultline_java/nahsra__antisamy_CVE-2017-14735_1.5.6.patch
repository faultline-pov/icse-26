diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..ff22745
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+COPY ./java-env/apache-maven-3.9.10 $WORKSPACE_BASE/java-env/apache-maven-3.9.10
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.9.10/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/nahsra__antisamy_CVE-2017-14735_1.5.6 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..0eeba97
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,20 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk-17.0.12 $WORKSPACE_BASE/java-env/jdk-17.0.12
+COPY ./java-env/apache-maven-3.9.10 $WORKSPACE_BASE/java-env/apache-maven-3.9.10
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.9.10/bin:$WORKSPACE_BASE/java-env/jdk-17.0.12/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk-17.0.12
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/nahsra__antisamy_CVE-2017-14735_1.5.6 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Run our vulnerability test
+CMD ["mvn", "exec:java", "-Dexec.mainClass=org.owasp.validator.html.test.HTML5EntityXssTest", "-Dexec.classpathScope=test"]
\ No newline at end of file
diff --git a/src/test/java/org/owasp/validator/html/test/HTML5EntityXssTest.java b/src/test/java/org/owasp/validator/html/test/HTML5EntityXssTest.java
new file mode 100644
index 0000000..11707eb
--- /dev/null
+++ b/src/test/java/org/owasp/validator/html/test/HTML5EntityXssTest.java
@@ -0,0 +1,53 @@
+package org.owasp.validator.html.test;
+
+import org.owasp.validator.html.AntiSamy;
+import org.owasp.validator.html.CleanResults;
+import org.owasp.validator.html.Policy;
+import org.owasp.validator.html.PolicyException;
+import org.owasp.validator.html.ScanException;
+
+import java.io.File;
+
+public class HTML5EntityXssTest {
+
+    public static void main(String[] args) {
+        try {
+            // Load the policy file
+            Policy policy = Policy.getInstance(new File("src/main/resources/antisamy.xml"));
+            
+            // Create an AntiSamy instance
+            AntiSamy antiSamy = new AntiSamy(policy);
+            
+            // Create a malicious input using HTML5 entity &colon; in a CSS URL context
+            // This should be detected as a vulnerability
+            String maliciousInput = "<div style=\"background-image: url(javascript&colon;alert(1))\">XSS Test</div>";
+            
+            System.out.println("Testing with malicious input: " + maliciousInput);
+            
+            // Scan the malicious input
+            CleanResults results = antiSamy.scan(maliciousInput);
+            
+            // Get the cleaned HTML
+            String cleanedHtml = results.getCleanHTML();
+            
+            System.out.println("Cleaned HTML: " + cleanedHtml);
+            
+            // Check if the vulnerability exists
+            // If the javascript&colon; is still present in the cleaned HTML, the vulnerability exists
+            if (cleanedHtml.contains("javascript&colon;") || 
+                cleanedHtml.contains("javascript:colon") || 
+                cleanedHtml.contains("javascript:")) {
+                System.out.println("VULNERABILITY DETECTED: HTML5 entity &colon; was not properly sanitized!");
+                System.exit(1); // Exit with error code if vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected. HTML5 entity &colon; was properly sanitized.");
+                System.exit(0); // Exit with success code if no vulnerability
+            }
+            
+        } catch (PolicyException | ScanException e) {
+            System.err.println("Error during test: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+}
