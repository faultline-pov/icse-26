diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..6cf5c76
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/OWASP__json-sanitizer_CVE-2020-13973_1.2.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..940f55f
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,22 @@
+FROM ubuntu:22.04
+
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+
+RUN mkdir -p /java-env
+COPY ./java-env/jdk1.8.0_202 //java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 //java-env/apache-maven-3.5.0
+
+ENV JAVA_HOME=/java-env/jdk1.8.0_202
+ENV M2_HOME=/java-env/apache-maven-3.5.0
+ENV PATH=${JAVA_HOME}/bin:${M2_HOME}/bin:${PATH}
+
+COPY ./project-sources/OWASP__json-sanitizer_CVE-2020-13973_1.2.0 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean compile -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Run the vulnerability checker
+CMD ["java", "-cp", "target/classes", "com.google.json.XssVulnerabilityChecker"]
diff --git a/src/main/java/com/google/json/XssVulnerabilityChecker.java b/src/main/java/com/google/json/XssVulnerabilityChecker.java
new file mode 100644
index 0000000..50190d9
--- /dev/null
+++ b/src/main/java/com/google/json/XssVulnerabilityChecker.java
@@ -0,0 +1,42 @@
+package com.google.json;
+
+/**
+ * Main class to check for the XSS vulnerability (CVE-2020-13973) in json-sanitizer.
+ * 
+ * This program exits with code 0 if the vulnerability is NOT present (fixed version),
+ * and exits with code 1 if the vulnerability IS present (vulnerable version).
+ */
+public class XssVulnerabilityChecker {
+
+    public static void main(String[] args) {
+        // The vulnerable code attempts to escape '</script' sequences by looking for
+        // a pattern where '/' is preceded by '<' and followed by 's' and 'c'.
+        // However, there's a flaw in the detection logic.
+        
+        // According to the vulnerability description, the issue is that the sanitizer
+        // doesn't properly handle all cases where an attacker can break out of a script tag
+        // Let's try a variation that might bypass the sanitizer
+        String maliciousInput = "{\"payload\":\"<\\/ script>alert('XSS')\"}";
+        
+        // Sanitize the input
+        String sanitizedOutput = JsonSanitizer.sanitize(maliciousInput);
+        
+        System.out.println("Original input: " + maliciousInput);
+        System.out.println("Sanitized output: " + sanitizedOutput);
+        
+        // In vulnerable versions, the output will not properly escape the sequence
+        // The vulnerability is that the sanitizer doesn't properly handle all variations
+        // that can break out of a script tag
+        boolean isVulnerable = sanitizedOutput.contains("<\\/ script>");
+        
+        if (isVulnerable) {
+            System.out.println("VULNERABILITY DETECTED: The sanitizer failed to properly escape a sequence that can break out of a script tag");
+            System.out.println("This version of json-sanitizer is vulnerable to XSS attacks (CVE-2020-13973)");
+            System.exit(1); // Exit with error code if vulnerable
+        } else {
+            System.out.println("No vulnerability detected. The sanitizer properly escaped the malicious sequence.");
+            System.out.println("This version of json-sanitizer is NOT vulnerable to the XSS attack (CVE-2020-13973)");
+            System.exit(0); // Exit with success code if not vulnerable
+        }
+    }
+}
diff --git a/src/test/java/com/google/json/XssVulnerabilityTest.java b/src/test/java/com/google/json/XssVulnerabilityTest.java
new file mode 100644
index 0000000..34cac1b
--- /dev/null
+++ b/src/test/java/com/google/json/XssVulnerabilityTest.java
@@ -0,0 +1,40 @@
+package com.google.json;
+
+import static org.junit.Assert.*;
+import org.junit.Test;
+
+public class XssVulnerabilityTest {
+
+    /**
+     * Test for CVE-2020-13973: XSS vulnerability in json-sanitizer before 1.2.1
+     * 
+     * The vulnerability allows an attacker to craft a string that bypasses the sanitization
+     * of "</script" sequences, potentially leading to XSS attacks when the output is embedded
+     * in an HTML page within a script tag.
+     */
+    @Test
+    public void testXssVulnerability() {
+        // The vulnerable code attempts to escape '</script' sequences by looking for
+        // a pattern where '/' is preceded by '<' and followed by 's' and 'c'.
+        // However, there's a flaw in the detection logic.
+        
+        // This input contains a malicious sequence that should be escaped but isn't
+        // in vulnerable versions
+        String maliciousInput = "{\"payload\":\"<\\/sCript>alert('XSS')\"}";
+        
+        // Sanitize the input
+        String sanitizedOutput = JsonSanitizer.sanitize(maliciousInput);
+        
+        // In vulnerable versions, the output will still contain the unescaped sequence
+        // that can break out of a script tag when embedded in HTML
+        boolean isVulnerable = sanitizedOutput.contains("<\/sCript>");
+        
+        // The test should fail if the vulnerability exists
+        assertFalse("XSS Vulnerability detected: The sanitizer failed to properly escape '</script' sequence", isVulnerable);
+        
+        // In fixed versions, the output should properly escape the sequence
+        assertTrue("Sanitizer should escape the malicious sequence", 
+                sanitizedOutput.contains("<\\\/sCript>") || 
+                !sanitizedOutput.contains("<\/sCript>"));
+    }
+}
