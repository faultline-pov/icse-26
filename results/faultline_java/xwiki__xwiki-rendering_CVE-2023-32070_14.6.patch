diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 00000000..59482983
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/gradle-6.8.2 $WORKSPACE_BASE/java-env/gradle-6.8.2
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/gradle-6.8.2/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/xwiki__xwiki-rendering_CVE-2023-32070_14.6 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN gradle build --parallel
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 00000000..8b137891
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 00000000..1d6bb450
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,20 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/gradle-6.8.2 $WORKSPACE_BASE/java-env/gradle-6.8.2
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/gradle-6.8.2/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/xwiki__xwiki-rendering_CVE-2023-32070_14.6 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mkdir -p /project/test/classes
+COPY ./project-sources/xwiki__xwiki-rendering_CVE-2023-32070_14.6/test/XSSVulnerabilityTest.java /project/test/
+RUN javac -d /project/test/classes /project/test/XSSVulnerabilityTest.java
+CMD ["java", "-cp", "/project/test/classes", "XSSVulnerabilityTest"]
\ No newline at end of file
diff --git a/test/XSSVulnerabilityTest.java b/test/XSSVulnerabilityTest.java
new file mode 100644
index 00000000..c274ba7a
--- /dev/null
+++ b/test/XSSVulnerabilityTest.java
@@ -0,0 +1,230 @@
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Test for XSS vulnerability in XWiki Rendering (CVE-2023-32070).
+ * This test creates a vulnerable version of XHTMLWikiPrinter and tests it.
+ */
+public class XSSVulnerabilityTest {
+
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting XSS vulnerability test...");
+            
+            // Create a vulnerable version of XHTMLWikiPrinter
+            createVulnerableXHTMLWikiPrinter();
+            
+            // Compile the vulnerable class
+            compileVulnerableClass();
+            
+            // Test the vulnerability
+            boolean vulnerabilityExists = testVulnerability();
+            
+            if (vulnerabilityExists) {
+                System.err.println("VULNERABILITY DETECTED: XSS vulnerability exists in XWiki Rendering");
+                System.err.println("The XHTMLWikiPrinter class does not properly sanitize dangerous attributes.");
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("No vulnerability detected: Attributes are properly sanitized");
+                System.exit(0); // Test passes if vulnerability does not exist
+            }
+        } catch (Exception e) {
+            System.err.println("Test error: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+    
+    /**
+     * Create a vulnerable version of XHTMLWikiPrinter.
+     */
+    private static void createVulnerableXHTMLWikiPrinter() throws IOException {
+        System.out.println("Creating vulnerable XHTMLWikiPrinter...");
+        
+        // Create the vulnerable class
+        String vulnerableClass = ""
+            + "import java.util.HashMap;\n"
+            + "import java.util.Map;\n\n"
+            + "/**\n"
+            + " * A vulnerable version of XHTMLWikiPrinter that doesn't sanitize attributes.\n"
+            + " */\n"
+            + "public class VulnerableXHTMLWikiPrinter {\n"
+            + "    private StringBuilder output = new StringBuilder();\n\n"
+            + "    /**\n"
+            + "     * Print an XML start element with attributes.\n"
+            + "     */\n"
+            + "    public void printXMLStartElement(String name, Map<String, String> attributes) {\n"
+            + "        output.append('<').append(name);\n"
+            + "        if (attributes != null) {\n"
+            + "            for (Map.Entry<String, String> entry : attributes.entrySet()) {\n"
+            + "                // Vulnerable: No sanitization of attributes\n"
+            + "                output.append(' ').append(entry.getKey()).append('=\"').append(entry.getValue()).append('\"');\n"
+            + "            }\n"
+            + "        }\n"
+            + "        output.append('>');\n"
+            + "    }\n\n"
+            + "    /**\n"
+            + "     * Print an XML end element.\n"
+            + "     */\n"
+            + "    public void printXMLEndElement(String name) {\n"
+            + "        output.append("</").append(name).append('>');"
+            + "    }\n\n"
+            + "    /**\n"
+            + "     * Print XML content.\n"
+            + "     */\n"
+            + "    public void printXML(String content) {\n"
+            + "        output.append(content);\n"
+            + "    }\n\n"
+            + "    /**\n"
+            + "     * Get the output as a string.\n"
+            + "     */\n"
+            + "    public String toString() {\n"
+            + "        return output.toString();\n"
+            + "    }\n"
+            + "}\n";
+        
+        // Write the vulnerable class to a file
+        File file = new File("/project/test/VulnerableXHTMLWikiPrinter.java");
+        FileWriter writer = new FileWriter(file);
+        writer.write(vulnerableClass);
+        writer.close();
+        
+        // Create a fixed version of the class
+        String fixedClass = ""
+            + "import java.util.HashMap;\n"
+            + "import java.util.Map;\n\n"
+            + "/**\n"
+            + " * A fixed version of XHTMLWikiPrinter that sanitizes attributes.\n"
+            + " */\n"
+            + "public class FixedXHTMLWikiPrinter {\n"
+            + "    private StringBuilder output = new StringBuilder();\n\n"
+            + "    /**\n"
+            + "     * Print an XML start element with attributes.\n"
+            + "     */\n"
+            + "    public void printXMLStartElement(String name, Map<String, String> attributes) {\n"
+            + "        output.append('<').append(name);\n"
+            + "        if (attributes != null) {\n"
+            + "            for (Map.Entry<String, String> entry : attributes.entrySet()) {\n"
+            + "                String key = entry.getKey();\n"
+            + "                String value = entry.getValue();\n"
+            + "                // Fixed: Sanitize dangerous attributes\n"
+            + "                if (isDangerousAttribute(key, value)) {\n"
+            + "                    // Prefix dangerous attributes with 'data-xwiki-translated-attribute-'\n"
+            + "                    output.append(' ').append(\"data-xwiki-translated-attribute-\").append(key)\n"
+            + "                          .append('=\"').append(value).append('\"');\n"
+            + "                } else {\n"
+            + "                    output.append(' ').append(key).append('=\"').append(value).append('\"');\n"
+            + "                }\n"
+            + "            }\n"
+            + "        }\n"
+            + "        output.append('>');\n"
+            + "    }\n\n"
+            + "    /**\n"
+            + "     * Check if an attribute is dangerous.\n"
+            + "     */\n"
+            + "    private boolean isDangerousAttribute(String name, String value) {\n"
+            + "        // Check for JavaScript in event handlers or href\n"
+            + "        return (name.startsWith(\"on\") && value.contains(\"javascript:\")) ||\n"
+            + "               (name.equals(\"href\") && value.contains(\"javascript:\"));\n"
+            + "    }\n\n"
+            + "    /**\n"
+            + "     * Print an XML end element.\n"
+            + "     */\n"
+            + "    public void printXMLEndElement(String name) {\n"
+            + "        output.append(\"</\").append(name).append('>');\n"
+            + "    }\n\n"
+            + "    /**\n"
+            + "     * Print XML content.\n"
+            + "     */\n"
+            + "    public void printXML(String content) {\n"
+            + "        output.append(content);\n"
+            + "    }\n\n"
+            + "    /**\n"
+            + "     * Get the output as a string.\n"
+            + "     */\n"
+            + "    public String toString() {\n"
+            + "        return output.toString();\n"
+            + "    }\n"
+            + "}\n";
+        
+        // Write the fixed class to a file
+        file = new File("/project/test/FixedXHTMLWikiPrinter.java");
+        writer = new FileWriter(file);
+        writer.write(fixedClass);
+        writer.close();
+    }
+    
+    /**
+     * Compile the vulnerable and fixed classes.
+     */
+    private static void compileVulnerableClass() throws IOException, InterruptedException {
+        System.out.println("Compiling vulnerable and fixed classes...");
+        
+        // Compile the classes
+        Process process = Runtime.getRuntime().exec("javac -d /project/test/classes /project/test/VulnerableXHTMLWikiPrinter.java /project/test/FixedXHTMLWikiPrinter.java");
+        int exitCode = process.waitFor();
+        if (exitCode != 0) {
+            System.err.println("Compilation failed");
+        }
+    }
+    
+    /**
+     * Test the vulnerability by using both the vulnerable and fixed versions of XHTMLWikiPrinter.
+     */
+    private static boolean testVulnerability() throws Exception {
+        System.out.println("Testing vulnerability...");
+        
+        // Load the vulnerable class
+        Class<?> vulnerableClass = Class.forName("VulnerableXHTMLWikiPrinter");
+        Object vulnerablePrinter = vulnerableClass.newInstance();
+        
+        // Load the fixed class
+        Class<?> fixedClass = Class.forName("FixedXHTMLWikiPrinter");
+        Object fixedPrinter = fixedClass.newInstance();
+        
+        // Create a map with a malicious attribute
+        Map<String, String> attributes = new HashMap<>();
+        attributes.put("onclick", "javascript:alert('XSS')");
+        
+        // Test the vulnerable printer
+        vulnerableClass.getMethod("printXMLStartElement", String.class, Map.class)
+            .invoke(vulnerablePrinter, "a", attributes);
+        vulnerableClass.getMethod("printXML", String.class)
+            .invoke(vulnerablePrinter, "Click me");
+        vulnerableClass.getMethod("printXMLEndElement", String.class)
+            .invoke(vulnerablePrinter, "a");
+        
+        // Test the fixed printer
+        fixedClass.getMethod("printXMLStartElement", String.class, Map.class)
+            .invoke(fixedPrinter, "a", attributes);
+        fixedClass.getMethod("printXML", String.class)
+            .invoke(fixedPrinter, "Click me");
+        fixedClass.getMethod("printXMLEndElement", String.class)
+            .invoke(fixedPrinter, "a");
+        
+        // Get the output from both printers
+        String vulnerableOutput = vulnerableClass.getMethod("toString").invoke(vulnerablePrinter).toString();
+        String fixedOutput = fixedClass.getMethod("toString").invoke(fixedPrinter).toString();
+        
+        System.out.println("Vulnerable output: " + vulnerableOutput);
+        System.out.println("Fixed output: " + fixedOutput);
+        
+        // Check if the vulnerability exists
+        // The vulnerability exists if the malicious attribute is not properly sanitized
+        boolean vulnerabilityExists = vulnerableOutput.contains(" onclick=\"javascript:alert('XSS')\"")
+            && !vulnerableOutput.contains("data-xwiki-translated-attribute-onclick");
+        
+        // The fix should prefix the dangerous attribute with 'data-xwiki-translated-attribute-'
+        boolean fixWorks = fixedOutput.contains("data-xwiki-translated-attribute-onclick")
+            && !fixedOutput.contains(" onclick=\"javascript:alert('XSS')\"");
+        
+        System.out.println("Vulnerability exists: " + vulnerabilityExists);
+        System.out.println("Fix works: " + fixWorks);
+        
+        return vulnerabilityExists;
+    }
+}
