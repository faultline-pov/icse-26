diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..b5bc198
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/SpringSource__spring-security-oauth_CVE-2018-1260_2.3.2.RELEASE /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..d263715
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,33 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/SpringSource__spring-security-oauth_CVE-2018-1260_2.3.2.RELEASE /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Create a simple wrapper script to run our test
+RUN echo '#!/bin/bash\n\
+cd /project\n\
+echo "Running CVE-2018-1260 vulnerability test..."\n\
+\n\
+# Run the test\nmvn -f spring-security-oauth2/pom.xml test -Dtest=org.springframework.security.oauth2.provider.endpoint.CVE_2018_1260_Test\n\
+# The test will fail if the vulnerability exists\nif [ $? -ne 0 ]; then\n\
+  echo "VULNERABILITY DETECTED: CVE-2018-1260 - Spring Security OAuth is vulnerable to remote code execution"\n\
+  exit 1\n\
+else\n\
+  echo "Test PASSED: The vulnerability does NOT exist."\n\
+  exit 0\n\
+fi' > /project/run_test.sh && chmod +x /project/run_test.sh
+
+# Run our vulnerability test
+CMD ["/project/run_test.sh"]
\ No newline at end of file
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CVE_2018_1260_Test.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CVE_2018_1260_Test.java
new file mode 100644
index 0000000..81f7060
--- /dev/null
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CVE_2018_1260_Test.java
@@ -0,0 +1,74 @@
+/*
+ * Test for CVE-2018-1260 vulnerability
+ */
+package org.springframework.security.oauth2.provider.endpoint;
+
+import static org.junit.Assert.fail;
+
+import java.io.File;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Test;
+import org.springframework.mock.web.MockHttpServletRequest;
+import org.springframework.mock.web.MockHttpServletResponse;
+
+/**
+ * Test for CVE-2018-1260 vulnerability in Spring Security OAuth.
+ * 
+ * This vulnerability exists in the SpelView class which processes SpEL expressions
+ * from user-controlled input without proper validation. If vulnerable, an attacker
+ * can inject malicious SpEL expressions that will be evaluated during rendering.
+ * 
+ * The test creates a SpelView with a malicious template containing a SpEL expression
+ * that attempts to execute a command to create a marker file. If the vulnerability
+ * exists, the SpEL expression will be evaluated and the command will be executed.
+ * 
+ * This test will FAIL (exit with non-zero code) if the vulnerability EXISTS,
+ * and PASS (exit with code 0) if the vulnerability DOES NOT EXIST.
+ */
+public class CVE_2018_1260_Test {
+
+    private static final String MARKER_FILE = "/tmp/cve_2018_1260_vulnerable";
+
+    @Test
+    public void testSpelViewVulnerability() throws Exception {
+        // Delete the marker file if it exists from a previous run
+        File markerFile = new File(MARKER_FILE);
+        if (markerFile.exists()) {
+            markerFile.delete();
+        }
+        
+        // Create a template with a malicious SpEL expression that would create a file if vulnerable
+        // This is the key part of the test - we're injecting a SpEL expression that will execute code
+        // if the vulnerability exists
+        String template = "Hello ${T(java.lang.Runtime).getRuntime().exec('touch " + MARKER_FILE + "')}";
+        
+        // Create a SpelView with the malicious template
+        SpelView spelView = new SpelView(template);
+        
+        // Create a model with some data
+        Map<String, Object> model = new HashMap<String, Object>();
+        model.put("normal", "value");
+        
+        // Create mock request and response
+        MockHttpServletRequest request = new MockHttpServletRequest();
+        MockHttpServletResponse response = new MockHttpServletResponse();
+        
+        try {
+            // Render the view - this will execute our code if vulnerable
+            spelView.render(model, request, response);
+        } catch (Exception e) {
+            // Even if an exception occurs, we still need to check if the command was executed
+            // Some implementations might throw an exception after executing the code
+        }
+        
+        // Check if our code was executed by looking for the marker file
+        if (markerFile.exists()) {
+            // Vulnerability exists - the test should fail
+            markerFile.delete(); // Clean up
+            fail("VULNERABILITY DETECTED: CVE-2018-1260 - Spring Security OAuth is vulnerable to remote code execution");
+        }
+        // If we get here, the vulnerability does not exist - test passes
+    }
+}
