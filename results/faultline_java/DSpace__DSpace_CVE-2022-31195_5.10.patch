diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 000000000..0bf9b66ae
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/DSpace__DSpace_CVE-2022-31195_5.10 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 000000000..b672a4624
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,120 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential zip
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/DSpace__DSpace_CVE-2022-31195_5.10 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Build the project first
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Create a simple Java program to test the vulnerability
+RUN echo 'import java.io.*; \
+import java.util.zip.*; \
+import org.dspace.app.itemimport.ItemImport; \
+ \
+public class TestPathTraversal { \
+    private static final String VULNERABLE_PATH = "../vulnerable_file.txt"; \
+    private static final String VULNERABLE_CONTENT = "This file was created through path traversal"; \
+ \
+    public static void main(String[] args) { \
+        try { \
+            // Create a temporary directory for our test \
+            File tempDir = new File("/tmp/dspace-test-" + System.currentTimeMillis()); \
+            tempDir.mkdir(); \
+            \
+            // Create a zip file with a path traversal payload \
+            File zipFile = new File(tempDir, "malicious.zip"); \
+            createMaliciousZipFile(zipFile); \
+            \
+            // Define the path where the vulnerable file would be created \
+            File vulnerableFile = new File(tempDir.getParentFile(), "vulnerable_file.txt"); \
+            \
+            // Delete the file if it exists from a previous test run \
+            if (vulnerableFile.exists()) { \
+                vulnerableFile.delete(); \
+            } \
+            \
+            System.out.println("Testing for path traversal vulnerability in ItemImport.unzip()..."); \
+            System.out.println("Zip file: " + zipFile.getAbsolutePath()); \
+            System.out.println("Temp directory: " + tempDir.getAbsolutePath()); \
+            System.out.println("Vulnerable file would be at: " + vulnerableFile.getAbsolutePath()); \
+            \
+            // Call the vulnerable method \
+            String extractedDir = ItemImport.unzip(zipFile, tempDir.getAbsolutePath()); \
+            System.out.println("Extraction completed to: " + extractedDir); \
+            \
+            // Check if the file was created outside the intended directory \
+            boolean vulnerabilityExists = vulnerableFile.exists(); \
+            \
+            if (vulnerabilityExists) { \
+                // Read the content to verify it is our payload \
+                BufferedReader reader = new BufferedReader(new FileReader(vulnerableFile)); \
+                String content = reader.readLine(); \
+                reader.close(); \
+                \
+                System.out.println("VULNERABILITY DETECTED: File was created outside the intended directory"); \
+                System.out.println("File content: " + content); \
+                \
+                // Clean up \
+                vulnerableFile.delete(); \
+                zipFile.delete(); \
+                tempDir.delete(); \
+                \
+                // Exit with error code to indicate vulnerability exists \
+                System.exit(1); \
+            } else { \
+                System.out.println("SECURE: No path traversal vulnerability detected"); \
+                \
+                // Clean up \
+                zipFile.delete(); \
+                tempDir.delete(); \
+                \
+                // Exit with success code to indicate no vulnerability \
+                System.exit(0); \
+            } \
+            \
+        } catch (Exception e) { \
+            System.err.println("Error during test: " + e.getMessage()); \
+            e.printStackTrace(); \
+            System.exit(2); \
+        } \
+    } \
+ \
+    /** \
+     * Creates a zip file with a path traversal payload \
+     */ \
+    private static void createMaliciousZipFile(File zipFile) throws IOException { \
+        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile)); \
+        \
+        // Add a malicious entry with path traversal \
+        ZipEntry entry = new ZipEntry(VULNERABLE_PATH); \
+        zos.putNextEntry(entry); \
+        \
+        // Write content to the entry \
+        byte[] data = VULNERABLE_CONTENT.getBytes(); \
+        zos.write(data, 0, data.length); \
+        \
+        // Close the entry and zip file \
+        zos.closeEntry(); \
+        zos.close(); \
+        \
+        System.out.println("Created malicious zip file with path traversal payload"); \
+    } \
+}' > TestPathTraversal.java
+
+# Compile the test
+RUN javac -cp dspace-api/target/dspace-api-5.10.jar:dspace-api/target/dependency/* TestPathTraversal.java
+
+# Run the test
+CMD ["java", "-cp", ".:dspace-api/target/dspace-api-5.10.jar:dspace-api/target/dependency/*", "TestPathTraversal"]
\ No newline at end of file
diff --git a/PathTraversalTest.java b/PathTraversalTest.java
new file mode 100644
index 000000000..03c4c7c8f
--- /dev/null
+++ b/PathTraversalTest.java
@@ -0,0 +1,93 @@
+import java.io.*;
+import java.util.zip.*;
+import org.dspace.app.itemimport.ItemImport;
+
+public class PathTraversalTest {
+    private static final String VULNERABLE_PATH = "../vulnerable_file.txt";
+    private static final String VULNERABLE_CONTENT = "This file was created through path traversal";
+
+    public static void main(String[] args) {
+        try {
+            // Create a temporary directory for our test
+            File tempDir = new File("/tmp/dspace-test-" + System.currentTimeMillis());
+            tempDir.mkdir();
+            
+            // Create a zip file with a path traversal payload
+            File zipFile = new File(tempDir, "malicious.zip");
+            createMaliciousZipFile(zipFile);
+            
+            // Define the path where the vulnerable file would be created
+            File vulnerableFile = new File(tempDir.getParentFile(), "vulnerable_file.txt");
+            
+            // Delete the file if it exists from a previous test run
+            if (vulnerableFile.exists()) {
+                vulnerableFile.delete();
+            }
+            
+            System.out.println("Testing for path traversal vulnerability in ItemImport.unzip()...");
+            System.out.println("Zip file: " + zipFile.getAbsolutePath());
+            System.out.println("Temp directory: " + tempDir.getAbsolutePath());
+            System.out.println("Vulnerable file would be at: " + vulnerableFile.getAbsolutePath());
+            
+            // Call the vulnerable method
+            String extractedDir = ItemImport.unzip(zipFile, tempDir.getAbsolutePath());
+            System.out.println("Extraction completed to: " + extractedDir);
+            
+            // Check if the file was created outside the intended directory
+            boolean vulnerabilityExists = vulnerableFile.exists();
+            
+            if (vulnerabilityExists) {
+                // Read the content to verify it's our payload
+                BufferedReader reader = new BufferedReader(new FileReader(vulnerableFile));
+                String content = reader.readLine();
+                reader.close();
+                
+                System.out.println("VULNERABILITY DETECTED: File was created outside the intended directory");
+                System.out.println("File content: " + content);
+                
+                // Clean up
+                vulnerableFile.delete();
+                zipFile.delete();
+                tempDir.delete();
+                
+                // Exit with error code to indicate vulnerability exists
+                System.exit(1);
+            } else {
+                System.out.println("SECURE: No path traversal vulnerability detected");
+                
+                // Clean up
+                zipFile.delete();
+                tempDir.delete();
+                
+                // Exit with success code to indicate no vulnerability
+                System.exit(0);
+            }
+            
+        } catch (Exception e) {
+            System.err.println("Error during test: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(2);
+        }
+    }
+
+    /**
+     * Creates a zip file with a path traversal payload
+     */
+    private static void createMaliciousZipFile(File zipFile) throws IOException {
+        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile));
+        
+        // Add a malicious entry with path traversal
+        ZipEntry entry = new ZipEntry(VULNERABLE_PATH);
+        zos.putNextEntry(entry);
+        
+        // Write content to the entry
+        byte[] data = VULNERABLE_CONTENT.getBytes();
+        zos.write(data, 0, data.length);
+        
+        // Close the entry and zip file
+        zos.closeEntry();
+        zos.close();
+        
+        System.out.println("Created malicious zip file with path traversal payload");
+    }
+}
\ No newline at end of file
diff --git a/diff.patch b/diff.patch
new file mode 100644
index 000000000..4ed42b31e
--- /dev/null
+++ b/diff.patch
@@ -0,0 +1,257 @@
+diff --git a/.Dockerfile.backup b/.Dockerfile.backup
+new file mode 100644
+index 000000000..0bf9b66ae
+--- /dev/null
++++ b/.Dockerfile.backup
+@@ -0,0 +1,17 @@
++FROM ubuntu:22.04
++ENV DEBIAN_FRONTEND=noninteractive
++RUN apt -y update
++RUN apt install -y curl unzip wget git build-essential
++RUN mkdir -p /java-env
++ENV WORKSPACE_BASE="/"
++COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
++COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
++ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
++ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
++ENV PATH=$PATH:$JAVA_HOME/bin
++COPY ./project-sources/DSpace__DSpace_CVE-2022-31195_5.10 /project
++COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
++ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
++WORKDIR /project
++# Do not modify anything above this line
++RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+diff --git a/.build_diff.patch b/.build_diff.patch
+new file mode 100644
+index 000000000..8b1378917
+--- /dev/null
++++ b/.build_diff.patch
+@@ -0,0 +1 @@
++
+diff --git a/Dockerfile.vuln b/Dockerfile.vuln
+new file mode 100644
+index 000000000..b672a4624
+--- /dev/null
++++ b/Dockerfile.vuln
+@@ -0,0 +1,120 @@
++FROM ubuntu:22.04
++ENV DEBIAN_FRONTEND=noninteractive
++RUN apt -y update
++RUN apt install -y curl unzip wget git build-essential zip
++RUN mkdir -p /java-env
++ENV WORKSPACE_BASE="/"
++COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
++COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
++ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
++ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
++ENV PATH=$PATH:$JAVA_HOME/bin
++COPY ./project-sources/DSpace__DSpace_CVE-2022-31195_5.10 /project
++COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
++ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
++WORKDIR /project
++# Do not modify anything above this line
++
++# Build the project first
++RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
++
++# Create a simple Java program to test the vulnerability
++RUN echo 'import java.io.*; \
++import java.util.zip.*; \
++import org.dspace.app.itemimport.ItemImport; \
++ \
++public class TestPathTraversal { \
++    private static final String VULNERABLE_PATH = "../vulnerable_file.txt"; \
++    private static final String VULNERABLE_CONTENT = "This file was created through path traversal"; \
++ \
++    public static void main(String[] args) { \
++        try { \
++            // Create a temporary directory for our test \
++            File tempDir = new File("/tmp/dspace-test-" + System.currentTimeMillis()); \
++            tempDir.mkdir(); \
++            \
++            // Create a zip file with a path traversal payload \
++            File zipFile = new File(tempDir, "malicious.zip"); \
++            createMaliciousZipFile(zipFile); \
++            \
++            // Define the path where the vulnerable file would be created \
++            File vulnerableFile = new File(tempDir.getParentFile(), "vulnerable_file.txt"); \
++            \
++            // Delete the file if it exists from a previous test run \
++            if (vulnerableFile.exists()) { \
++                vulnerableFile.delete(); \
++            } \
++            \
++            System.out.println("Testing for path traversal vulnerability in ItemImport.unzip()..."); \
++            System.out.println("Zip file: " + zipFile.getAbsolutePath()); \
++            System.out.println("Temp directory: " + tempDir.getAbsolutePath()); \
++            System.out.println("Vulnerable file would be at: " + vulnerableFile.getAbsolutePath()); \
++            \
++            // Call the vulnerable method \
++            String extractedDir = ItemImport.unzip(zipFile, tempDir.getAbsolutePath()); \
++            System.out.println("Extraction completed to: " + extractedDir); \
++            \
++            // Check if the file was created outside the intended directory \
++            boolean vulnerabilityExists = vulnerableFile.exists(); \
++            \
++            if (vulnerabilityExists) { \
++                // Read the content to verify it is our payload \
++                BufferedReader reader = new BufferedReader(new FileReader(vulnerableFile)); \
++                String content = reader.readLine(); \
++                reader.close(); \
++                \
++                System.out.println("VULNERABILITY DETECTED: File was created outside the intended directory"); \
++                System.out.println("File content: " + content); \
++                \
++                // Clean up \
++                vulnerableFile.delete(); \
++                zipFile.delete(); \
++                tempDir.delete(); \
++                \
++                // Exit with error code to indicate vulnerability exists \
++                System.exit(1); \
++            } else { \
++                System.out.println("SECURE: No path traversal vulnerability detected"); \
++                \
++                // Clean up \
++                zipFile.delete(); \
++                tempDir.delete(); \
++                \
++                // Exit with success code to indicate no vulnerability \
++                System.exit(0); \
++            } \
++            \
++        } catch (Exception e) { \
++            System.err.println("Error during test: " + e.getMessage()); \
++            e.printStackTrace(); \
++            System.exit(2); \
++        } \
++    } \
++ \
++    /** \
++     * Creates a zip file with a path traversal payload \
++     */ \
++    private static void createMaliciousZipFile(File zipFile) throws IOException { \
++        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile)); \
++        \
++        // Add a malicious entry with path traversal \
++        ZipEntry entry = new ZipEntry(VULNERABLE_PATH); \
++        zos.putNextEntry(entry); \
++        \
++        // Write content to the entry \
++        byte[] data = VULNERABLE_CONTENT.getBytes(); \
++        zos.write(data, 0, data.length); \
++        \
++        // Close the entry and zip file \
++        zos.closeEntry(); \
++        zos.close(); \
++        \
++        System.out.println("Created malicious zip file with path traversal payload"); \
++    } \
++}' > TestPathTraversal.java
++
++# Compile the test
++RUN javac -cp dspace-api/target/dspace-api-5.10.jar:dspace-api/target/dependency/* TestPathTraversal.java
++
++# Run the test
++CMD ["java", "-cp", ".:dspace-api/target/dspace-api-5.10.jar:dspace-api/target/dependency/*", "TestPathTraversal"]
+\ No newline at end of file
+diff --git a/PathTraversalTest.java b/PathTraversalTest.java
+new file mode 100644
+index 000000000..03c4c7c8f
+--- /dev/null
++++ b/PathTraversalTest.java
+@@ -0,0 +1,93 @@
++import java.io.*;
++import java.util.zip.*;
++import org.dspace.app.itemimport.ItemImport;
++
++public class PathTraversalTest {
++    private static final String VULNERABLE_PATH = "../vulnerable_file.txt";
++    private static final String VULNERABLE_CONTENT = "This file was created through path traversal";
++
++    public static void main(String[] args) {
++        try {
++            // Create a temporary directory for our test
++            File tempDir = new File("/tmp/dspace-test-" + System.currentTimeMillis());
++            tempDir.mkdir();
++            
++            // Create a zip file with a path traversal payload
++            File zipFile = new File(tempDir, "malicious.zip");
++            createMaliciousZipFile(zipFile);
++            
++            // Define the path where the vulnerable file would be created
++            File vulnerableFile = new File(tempDir.getParentFile(), "vulnerable_file.txt");
++            
++            // Delete the file if it exists from a previous test run
++            if (vulnerableFile.exists()) {
++                vulnerableFile.delete();
++            }
++            
++            System.out.println("Testing for path traversal vulnerability in ItemImport.unzip()...");
++            System.out.println("Zip file: " + zipFile.getAbsolutePath());
++            System.out.println("Temp directory: " + tempDir.getAbsolutePath());
++            System.out.println("Vulnerable file would be at: " + vulnerableFile.getAbsolutePath());
++            
++            // Call the vulnerable method
++            String extractedDir = ItemImport.unzip(zipFile, tempDir.getAbsolutePath());
++            System.out.println("Extraction completed to: " + extractedDir);
++            
++            // Check if the file was created outside the intended directory
++            boolean vulnerabilityExists = vulnerableFile.exists();
++            
++            if (vulnerabilityExists) {
++                // Read the content to verify it's our payload
++                BufferedReader reader = new BufferedReader(new FileReader(vulnerableFile));
++                String content = reader.readLine();
++                reader.close();
++                
++                System.out.println("VULNERABILITY DETECTED: File was created outside the intended directory");
++                System.out.println("File content: " + content);
++                
++                // Clean up
++                vulnerableFile.delete();
++                zipFile.delete();
++                tempDir.delete();
++                
++                // Exit with error code to indicate vulnerability exists
++                System.exit(1);
++            } else {
++                System.out.println("SECURE: No path traversal vulnerability detected");
++                
++                // Clean up
++                zipFile.delete();
++                tempDir.delete();
++                
++                // Exit with success code to indicate no vulnerability
++                System.exit(0);
++            }
++            
++        } catch (Exception e) {
++            System.err.println("Error during test: " + e.getMessage());
++            e.printStackTrace();
++            System.exit(2);
++        }
++    }
++
++    /**
++     * Creates a zip file with a path traversal payload
++     */
++    private static void createMaliciousZipFile(File zipFile) throws IOException {
++        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile));
++        
++        // Add a malicious entry with path traversal
++        ZipEntry entry = new ZipEntry(VULNERABLE_PATH);
++        zos.putNextEntry(entry);
++        
++        // Write content to the entry
++        byte[] data = VULNERABLE_CONTENT.getBytes();
++        zos.write(data, 0, data.length);
++        
++        // Close the entry and zip file
++        zos.closeEntry();
++        zos.close();
++        
++        System.out.println("Created malicious zip file with path traversal payload");
++    }
++}
+\ No newline at end of file
