diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..ab88bad
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/codehaus-plexus__plexus-utils_CVE-2022-4244_3.0.23 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..65d77c6
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,19 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/codehaus-plexus__plexus-utils_CVE-2022-4244_3.0.23 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+CMD ["java", "-cp", "target/classes:target/test-classes", "org.codehaus.plexus.util.PathTraversalTest"]
\ No newline at end of file
diff --git a/src/test/java/org/codehaus/plexus/util/PathTraversalTest.java b/src/test/java/org/codehaus/plexus/util/PathTraversalTest.java
new file mode 100644
index 0000000..287e216
--- /dev/null
+++ b/src/test/java/org/codehaus/plexus/util/PathTraversalTest.java
@@ -0,0 +1,103 @@
+package org.codehaus.plexus.util;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+/**
+ * Test case for the path traversal vulnerability in plexus-utils.
+ * This test creates a ZIP file with a malicious entry that attempts to write
+ * outside the target directory using path traversal sequences.
+ */
+public class PathTraversalTest {
+    
+    private static final String CANARY_CONTENT = "This file was created by a path traversal attack";
+    private static final String MALICIOUS_ENTRY_NAME = "../path_traversal_test.txt";
+    private static final String SAFE_ENTRY_NAME = "safe_file.txt";
+    
+    public static void main(String[] args) {
+        try {
+            // Create temporary directories for our test
+            File tempDir = new File(System.getProperty("java.io.tmpdir"), "plexus-expand-test");
+            tempDir.mkdirs();
+            
+            File extractDir = new File(tempDir, "extract");
+            extractDir.mkdirs();
+            
+            // The vulnerable path is one directory level up from the extract directory
+            File vulnerableFile = new File(tempDir, "path_traversal_test.txt");
+            
+            // Delete the vulnerable file if it exists from a previous test run
+            if (vulnerableFile.exists()) {
+                vulnerableFile.delete();
+            }
+            
+            // Create a malicious ZIP file
+            File zipFile = new File(tempDir, "malicious.zip");
+            createZipWithPathTraversal(zipFile);
+            
+            System.out.println("Created malicious ZIP file: " + zipFile.getAbsolutePath());
+            System.out.println("Extract directory: " + extractDir.getAbsolutePath());
+            System.out.println("Vulnerable file path: " + vulnerableFile.getAbsolutePath());
+            
+            // Use the Expand class to extract the ZIP file
+            Expand expand = new Expand();
+            expand.setSrc(zipFile);
+            expand.setDest(extractDir);
+            expand.setOverwrite(true);
+            
+            System.out.println("Extracting ZIP file...");
+            expand.execute();
+            
+            // Check if the path traversal was successful
+            boolean vulnerabilityExists = vulnerableFile.exists();
+            
+            System.out.println("Path traversal vulnerability check:");
+            System.out.println("- Vulnerable file exists: " + vulnerabilityExists);
+            
+            if (vulnerabilityExists) {
+                System.out.println("- Vulnerable file content matches expected: " + 
+                    FileUtils.fileRead(vulnerableFile).equals(CANARY_CONTENT));
+                System.out.println("VULNERABILITY DETECTED: Path traversal attack was successful!");
+                System.exit(1); // Test fails if vulnerability exists
+            } else {
+                System.out.println("VULNERABILITY NOT DETECTED: Path traversal attack was blocked.");
+                System.exit(0); // Test passes if vulnerability does not exist
+            }
+            
+        } catch (Exception e) {
+            System.err.println("Test failed with exception: " + e.getMessage());
+            e.printStackTrace();
+            System.exit(2);
+        }
+    }
+    
+    /**
+     * Creates a ZIP file with a malicious entry that uses path traversal
+     */
+    private static void createZipWithPathTraversal(File zipFile) throws IOException {
+        ZipOutputStream zos = null;
+        try {
+            zos = new ZipOutputStream(new FileOutputStream(zipFile));
+            
+            // Add a malicious entry that attempts to write outside the target directory
+            ZipEntry maliciousEntry = new ZipEntry(MALICIOUS_ENTRY_NAME);
+            zos.putNextEntry(maliciousEntry);
+            zos.write(CANARY_CONTENT.getBytes());
+            zos.closeEntry();
+            
+            // Add a normal entry as well
+            ZipEntry safeEntry = new ZipEntry(SAFE_ENTRY_NAME);
+            zos.putNextEntry(safeEntry);
+            zos.write("This is a safe file".getBytes());
+            zos.closeEntry();
+            
+        } finally {
+            if (zos != null) {
+                zos.close();
+            }
+        }
+    }
+}
