diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..d92d54d
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/codehaus-plexus__plexus-archiver_CVE-2018-1002200_3.5 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..83224a8
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,19 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/codehaus-plexus__plexus-archiver_CVE-2018-1002200_3.5 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+CMD mvn test -Dtest=ZipSlipVulnerabilityTest
\ No newline at end of file
diff --git a/src/test/java/org/codehaus/plexus/archiver/zip/ZipSlipVulnerabilityTest.java b/src/test/java/org/codehaus/plexus/archiver/zip/ZipSlipVulnerabilityTest.java
new file mode 100644
index 0000000..7adb62f
--- /dev/null
+++ b/src/test/java/org/codehaus/plexus/archiver/zip/ZipSlipVulnerabilityTest.java
@@ -0,0 +1,123 @@
+package org.codehaus.plexus.archiver.zip;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipOutputStream;
+
+import org.codehaus.plexus.PlexusTestCase;
+import org.codehaus.plexus.archiver.UnArchiver;
+import org.codehaus.plexus.util.FileUtils;
+
+/**
+ * Test case for the Zip-Slip vulnerability (CVE-2018-1002200)
+ */
+public class ZipSlipVulnerabilityTest extends PlexusTestCase {
+
+    private File tempDir;
+    private File zipFile;
+    private File extractDir;
+    private File canaryFile;
+    
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        
+        // Create temporary directories
+        tempDir = new File(getBasedir(), "target/zip-slip-test");
+        tempDir.mkdirs();
+        
+        extractDir = new File(tempDir, "extract");
+        extractDir.mkdirs();
+        
+        // Create a canary file outside the extraction directory
+        canaryFile = new File(tempDir, "canary.txt");
+        if (canaryFile.exists()) {
+            canaryFile.delete();
+        }
+        
+        // Create a malicious zip file with path traversal
+        zipFile = new File(tempDir, "malicious.zip");
+        createMaliciousZipFile(zipFile);
+    }
+    
+    @Override
+    protected void tearDown() throws Exception {
+        super.tearDown();
+        FileUtils.deleteDirectory(tempDir);
+    }
+    
+    /**
+     * Test for Zip-Slip vulnerability
+     * This test should fail if the vulnerability exists and pass if it's fixed
+     */
+    public void testZipSlipVulnerability() throws Exception {
+        System.out.println("Testing for Zip-Slip vulnerability (CVE-2018-1002200)");
+        System.out.println("Extract directory: " + extractDir.getAbsolutePath());
+        System.out.println("Canary file: " + canaryFile.getAbsolutePath());
+        
+        // Get the unarchiver
+        UnArchiver unArchiver = getZipUnArchiver(zipFile);
+        unArchiver.setDestDirectory(extractDir);
+        
+        try {
+            // Extract the zip file
+            unArchiver.extract();
+            
+            // Check if the canary file was created/overwritten
+            if (canaryFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Canary file was created outside extraction directory");
+                fail("Zip-Slip vulnerability detected: File was extracted outside target directory");
+            } else {
+                System.out.println("Test passed: No files were extracted outside the target directory");
+            }
+        } catch (Exception e) {
+            // If extraction fails with a security exception, that's also acceptable
+            // as it means the vulnerability was prevented
+            System.out.println("Extraction failed with exception: " + e.getMessage());
+            System.out.println("This may indicate the vulnerability is mitigated");
+            
+            // Still check if the canary file was created
+            if (canaryFile.exists()) {
+                System.out.println("VULNERABILITY DETECTED: Canary file was created despite exception");
+                fail("Zip-Slip vulnerability detected: File was extracted outside target directory");
+            }
+        }
+    }
+    
+    /**
+     * Creates a malicious zip file with a path traversal entry
+     */
+    private void createMaliciousZipFile(File zipFile) throws IOException {
+        System.out.println("Creating malicious zip file: " + zipFile.getAbsolutePath());
+        
+        // Calculate relative path to escape the extraction directory
+        Path extractPath = extractDir.toPath();
+        Path canaryPath = canaryFile.toPath();
+        Path relativePath = extractPath.relativize(canaryPath);
+        
+        // For a more reliable test, we'll use a hardcoded path with traversal
+        String maliciousEntry = "../canary.txt";
+        
+        System.out.println("Adding malicious entry: " + maliciousEntry);
+        
+        // Create the zip file with the malicious entry
+        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFile))) {
+            ZipEntry entry = new ZipEntry(maliciousEntry);
+            zos.putNextEntry(entry);
+            byte[] data = "This file should not be created outside the extraction directory".getBytes();
+            zos.write(data, 0, data.length);
+            zos.closeEntry();
+        }
+    }
+    
+    private ZipUnArchiver getZipUnArchiver(File zipFile) throws Exception {
+        ZipUnArchiver unArchiver = (ZipUnArchiver) lookup(UnArchiver.class, "zip");
+        unArchiver.setSourceFile(zipFile);
+        return unArchiver;
+    }
+}
