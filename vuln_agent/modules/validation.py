from vuln_agent.helpers import *

class Validation:
    def __init__(self, dataset, project_name, workdir, logger):
        self.dataset = dataset
        self.project_name = project_name
        self.workdir = workdir
        self.logger = logger

    def get_commit_info(self):
        if self.dataset == 'cwe-bench-java':
            commit_json_path = Path(self.workdir) / f"../../../data/processed/{self.project_name}/.commit_info.json"
            if not commit_json_path.exists():
                self.logger.log_failure(f"Commit info file {commit_json_path} does not exist.")
                return None
            with open(commit_json_path, 'r') as commit_file:
                return json.load(commit_file)
        elif self.dataset == 'primevul':
            info_path = Path(self.workdir) / f"../../../processed_info.json"
            if not info_path.exists():
                self.logger.log_failure(f"Commit info file {info_path} does not exist.")
                return None
            with open(info_path, 'r') as info_file:
                info = json.load(info_file)
            if self.project_name not in info:
                self.logger.log_failure(f"Project {self.project_name} not found in commit info.")
                return None
            return {
                'fix_commit': info[self.project_name]['fix_commit'],
                'vulnerable_commit': info[self.project_name]['parent_commit']
            }
        else:
            self.logger.log_failure(f"Unknown dataset: {self.dataset}")
            return None
    
    def validate(self):
        """
        Validate the test case generated by the agent.
        """
        self.logger.log_status("Validating test case...")

        commit_info = self.get_commit_info()
        if not commit_info:
            return {"status": "Failed", "error": "No commit info found."}

        context_root = "../.." if self.dataset == 'cwe-bench-java' else "."

        os.chdir(self.workdir)
        try:
            run(f"git checkout {commit_info['vulnerable_commit']}",
                timeout=200, logger=self.logger)
        except RunException as e:
            self.logger.log_failure(f"Checkout failed: {truncate_reverse(str(e), 10000)}")
            return {"status": "Failed", "error": f"Checkout failed: {truncate_reverse(str(e), 10000)}"}

        try:
            run(f"docker build -f ./Dockerfile.vuln -t {self.project_name.lower()}_vuln {context_root}",
                timeout=600,
                logger=self.logger)
        except RunException as e:
            self.logger.log_failure(f"Build failed: {truncate_reverse(str(e), 10000)}")
            return {"status": "Incorrect", "error": f"Build failed: {truncate_reverse(str(e), 10000)}"}

        os.chdir(self.workdir)
        failed = False
        try:
            stdout = run(f"docker run --rm {self.project_name.lower()}_vuln",
                timeout=200,
                logger=self.logger)
        except RunException as e:
            self.logger.log_success(f"Test failed in vulnerable state")
            failed = True
        
        if not failed:
            self.logger.log_failure("Test passed in vulnerable state")
            return {"status": "Incorrect",
                    "error": ("Test passed in vulnerable state instead of failing.\n"
                              f"STDOUT:\n\n{truncate_reverse(stdout, 10000)}")}

        return {"status": "Correct"}
