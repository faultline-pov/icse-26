--- a/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
+++ b/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java
@@ -443,7 +446,13 @@ public class TikaCLI {
         } else if (arg.equals("-d") || arg.equals("--detect")) {
             type = DETECT;
         } else if (arg.startsWith("--extract-dir=")) {
-            extractDir = new File(arg.substring("--extract-dir=".length()));
+            String dirPath = arg.substring("--extract-dir=".length());
+            //if the user accidentally doesn't include
+            //a directory, set the directory to the cwd
+            if (dirPath.length() == 0) {
+                dirPath = ".";
+            }
+            extractDir = new File(dirPath);
         } else if (arg.equals("-z") || arg.equals("--extract")) {
             extractInlineImagesFromPDFs();
             type = NO_OUTPUT;
@@ -1046,21 +1056,13 @@ public class TikaCLI {
             }
             MediaType contentType = detector.detect(inputStream, metadata);
 
-            if (name.indexOf('.')==-1 && contentType!=null) {
-                try {
-                    name += config.getMimeRepository().forName(
-                            contentType.toString()).getExtension();
-                } catch (MimeTypeException e) {
-                    e.printStackTrace();
-                }
+            File outputFile = null;
+            if (name == null) {
+                name = "file" + count++;
             }
+            outputFile = getOutputFile(name, metadata, contentType);
 
-            String relID = metadata.get(Metadata.EMBEDDED_RELATIONSHIP_ID);
-            if (relID != null && !name.startsWith(relID)) {
-                name = relID + "_" + name;
-            }
 
-            File outputFile = new File(extractDir, FilenameUtils.normalize(name));
             File parent = outputFile.getParentFile();
             if (!parent.exists()) {
                 if (!parent.mkdirs()) {
@@ -1097,6 +1099,58 @@ public class TikaCLI {
             }
         }
 
+        private File getOutputFile(String name, Metadata metadata, MediaType contentType) {
+            String ext = getExtension(contentType);
+            if (name.indexOf('.')==-1 && contentType!=null) {
+                name += ext;
+            }
+
+            String relID = metadata.get(Metadata.EMBEDDED_RELATIONSHIP_ID);
+            if (relID != null && !name.startsWith(relID)) {
+                name = relID + "_" + name;
+            }
+            //defensively do this so that we don't get an exception
+            //from FilenameUtils.normalize
+            name = name.replaceAll("\u0000", " ");
+            String normalizedName = FilenameUtils.normalize(name);
+
+            if (normalizedName == null) {
+                normalizedName = FilenameUtils.getName(name);
+            }
+
+            if (normalizedName == null) {
+                normalizedName = "file"+count++ +ext;
+            }
+            //strip off initial C:/ or ~/ or /
+            int prefixLength = FilenameUtils.getPrefixLength(normalizedName);
+            if (prefixLength > -1) {
+                normalizedName = normalizedName.substring(prefixLength);
+            }
+            File outputFile = new File(extractDir, normalizedName);
+            //if file already exists, prepend uuid
+            if (outputFile.exists()) {
+                String fileName = FilenameUtils.getName(normalizedName);
+                outputFile = new File(extractDir, UUID.randomUUID().toString()+"-"+fileName);
+            }
+            return outputFile;
+        }
+
+        private String getExtension(MediaType contentType) {
+            try {
+                String ext = config.getMimeRepository().forName(
+                        contentType.toString()).getExtension();
+                if (ext == null) {
+                    return ".bin";
+                } else {
+                    return ext;
+                }
+            } catch (MimeTypeException e) {
+                e.printStackTrace();
+            }
+            return ".bin";
+
+        }
+
         protected void copy(DirectoryEntry sourceDir, DirectoryEntry destDir)
                 throws IOException {
             for (org.apache.poi.poifs.filesystem.Entry entry : sourceDir) {

--- a/tika-server/src/main/java/org/apache/tika/server/resource/UnpackerResource.java
+++ b/tika-server/src/main/java/org/apache/tika/server/resource/UnpackerResource.java
@@ -220,7 +222,7 @@ public class UnpackerResource {
                 }
             }
 
-            final String finalName = name;
+            final String finalName = getFinalName(name, zout);
 
             if (data.length > 0) {
                 zout.put(finalName, data);

--- a/tika-example/src/main/java/org/apache/tika/example/ExtractEmbeddedFiles.java
+++ b/tika-example/src/main/java/org/apache/tika/example/ExtractEmbeddedFiles.java
@@ -82,6 +83,11 @@ public class ExtractEmbeddedFiles {
                 //make sure to select only the file name (not any directory paths
                 //that might be included in the name) and make sure
                 //to normalize the name
+                name = name.replaceAll("\u0000", " ");
+                int prefix = FilenameUtils.getPrefixLength(name);
+                if (prefix > -1) {
+                    name = name.substring(prefix);
+                }
                 name = FilenameUtils.normalize(FilenameUtils.getName(name));
             }
 
@@ -96,9 +102,11 @@ public class ExtractEmbeddedFiles {
                     e.printStackTrace();
                 }
             }
-            //should add check to make sure that you aren't overwriting a file
+
             Path outputFile = outputDir.resolve(name);
-            //do a better job than this of checking
+            if (Files.exists(outputFile)) {
+                outputFile = outputDir.resolve(UUID.randomUUID().toString()+"-"+name);
+            }
             Files.createDirectories(outputFile.getParent());
             Files.copy(stream, outputFile);
         }
