--- a/src/main/java/org/codehaus/plexus/archiver/AbstractUnArchiver.java
+++ b/src/main/java/org/codehaus/plexus/archiver/AbstractUnArchiver.java
@@ -320,20 +267,23 @@ public boolean isIgnorePermissions()
      * @since 1.1
      */
     @Override
-    public void setIgnorePermissions( final boolean ignorePermissions )
-    {
+    public void setIgnorePermissions(final boolean ignorePermissions) {
         this.ignorePermissions = ignorePermissions;
     }
 
-    protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,
-                                String entryName, final Date entryDate, final boolean isDirectory,
-                                final Integer mode, String symlinkDestination, final FileMapper[] fileMappers )
-        throws IOException, ArchiverException
-    {
-        if ( fileMappers != null )
-        {
-            for ( final FileMapper fileMapper : fileMappers )
-            {
+    protected void extractFile(
+            final File srcF,
+            final File dir,
+            final InputStream compressedInputStream,
+            String entryName,
+            final Date entryDate,
+            final boolean isDirectory,
+            final Integer mode,
+            String symlinkDestination,
+            final FileMapper[] fileMappers)
+            throws IOException, ArchiverException {
+        if (fileMappers != null) {
+            for (final FileMapper fileMapper : fileMappers) {
                 entryName = fileMapper.getMappedFileName(entryName);
             }
         }
@@ -347,50 +297,40 @@ protected void extractFile( final File srcF, final File dir, final InputStream c
         Path canonicalDirPath = dir.getCanonicalFile().toPath();
         Path canonicalDestPath = targetFileName.getCanonicalFile().toPath();
 
-        if ( !canonicalDestPath.startsWith( canonicalDirPath ) )
-        {
+        if (!canonicalDestPath.startsWith(canonicalDirPath)) {
+            throw new ArchiverException("Entry is outside of the target directory (" + entryName + ")");
+        }
+
+        // don't allow override target symlink by standard file
+        if (StringUtils.isEmpty(symlinkDestination) && Files.isSymbolicLink(canonicalDestPath)) {
             throw new ArchiverException("Entry is outside of the target directory (" + entryName + ")");
         }
 
-        try
-        {
-            if ( !shouldExtractEntry( dir, targetFileName, entryName, entryDate ) )
-            {
+        try {
+            if (!shouldExtractEntry(dir, targetFileName, entryName, entryDate)) {
                 return;
             }
 
             // create intermediary directories - sometimes zip don't add them
             final File dirF = targetFileName.getParentFile();
-            if ( dirF != null )
-            {
+            if (dirF != null) {
                 dirF.mkdirs();
             }
 
-            if ( !StringUtils.isEmpty( symlinkDestination ) )
-            {
+            if (!StringUtils.isEmpty(symlinkDestination)) {
                 SymlinkUtils.createSymbolicLink(targetFileName, new File(symlinkDestination));
-            }
-            else if ( isDirectory )
-            {
+            } else if (isDirectory) {
                 targetFileName.mkdirs();
-            }
-            else
-            {
-                try ( OutputStream out = Files.newOutputStream( targetFileName.toPath() ) )
-                {
-                    IOUtil.copy( compressedInputStream, out );
-                }
+            } else {
+                Files.copy(compressedInputStream, targetFileName.toPath(), REPLACE_EXISTING);
             }
 
             targetFileName.setLastModified(entryDate.getTime());
 
-            if ( !isIgnorePermissions() && mode != null && !isDirectory )
-            {
+            if (!isIgnorePermissions() && mode != null && !isDirectory) {
                 ArchiveEntryUtils.chmod(targetFileName, mode);
             }
-        }
-        catch ( final FileNotFoundException ex )
-        {
+        } catch (final FileNotFoundException ex) {
             getLogger().warn("Unable to expand to file " + targetFileName.getPath());
         }
     }
