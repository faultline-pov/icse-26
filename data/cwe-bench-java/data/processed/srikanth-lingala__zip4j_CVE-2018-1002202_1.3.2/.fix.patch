--- a/src/main/java/net/lingala/zip4j/tasks/AbstractExtractFileTask.java
+++ b/src/main/java/net/lingala/zip4j/tasks/AbstractExtractFileTask.java
@@ -15,94 +13,57 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.regex.Matcher;
 
+import static net.lingala.zip4j.util.InternalZipConstants.BUFF_SIZE;
 import static net.lingala.zip4j.util.InternalZipConstants.FILE_SEPARATOR;
 
 public abstract class AbstractExtractFileTask<T> extends AsyncZipTask<T> {
 
-  private final ZipModel zipModel;
-  private final UnzipParameters unzipParameters;
+  private ZipModel zipModel;
+  private byte[] buff = new byte[BUFF_SIZE];
 
-  public AbstractExtractFileTask(ZipModel zipModel, UnzipParameters unzipParameters,
-                                 AsyncTaskParameters asyncTaskParameters) {
-    super(asyncTaskParameters);
+  public AbstractExtractFileTask(ProgressMonitor progressMonitor, boolean runInThread, ZipModel zipModel) {
+    super(progressMonitor, runInThread);
     this.zipModel = zipModel;
-    this.unzipParameters = unzipParameters;
   }
 
-  protected void extractFile(ZipInputStream zipInputStream, FileHeader fileHeader, String outputPath,
-                             String newFileName, ProgressMonitor progressMonitor, byte[] readBuff) throws IOException {
+  protected void extractFile(ZipInputStream zipInputStream, FileHeader fileHeader, String outPath, String newFileName,
+                             ProgressMonitor progressMonitor) throws IOException {
 
-    boolean isSymbolicLink = isSymbolicLink(fileHeader);
-    if (isSymbolicLink && !unzipParameters.isExtractSymbolicLinks()) {
-      return;
-    }
+    progressMonitor.setFileName(fileHeader.getFileName());
 
-    if (!outputPath.endsWith(FILE_SEPARATOR)) {
-      outputPath += FILE_SEPARATOR;
+    if (!outPath.endsWith(FILE_SEPARATOR)) {
+      outPath += FILE_SEPARATOR;
     }
 
-    File outputFile = determineOutputFile(fileHeader, outputPath, newFileName);
-    progressMonitor.setFileName(outputFile.getAbsolutePath());
-
-    assertCanonicalPathsAreSame(outputFile, outputPath, fileHeader);
+    // make sure no file is extracted outside of the target directory (a.k.a zip slip)
+    String fileName = fileHeader.getFileName();
+    String completePath = outPath + fileName;
+    if (!new File(completePath).getCanonicalPath().startsWith(new File(outPath).getCanonicalPath())) {
+      throw new ZipException("illegal file name that breaks out of the target directory: "
+          + fileHeader.getFileName());
+    }
 
     verifyNextEntry(zipInputStream, fileHeader);
 
     if (fileHeader.isDirectory()) {
-      if (!outputFile.exists()) {
-        if (!outputFile.mkdirs()) {
-          throw new ZipException("Could not create directory: " + outputFile);
+      File file = new File(completePath);
+      if (!file.exists()) {
+        if (!file.mkdirs()) {
+          throw new ZipException("Could not create directory: " + file);
         }
       }
-    } else if (isSymbolicLink) {
-      createSymLink(zipInputStream, fileHeader, outputFile, progressMonitor);
     } else {
-      checkOutputDirectoryStructure(outputFile);
-      unzipFile(zipInputStream, outputFile, progressMonitor, readBuff);
-    }
-
-    if (!isSymbolicLink) {
-      UnzipUtil.applyFileAttributes(fileHeader, outputFile);
-    }
-  }
-
-  private void assertCanonicalPathsAreSame(File outputFile, String outputPath, FileHeader fileHeader)
-      throws IOException {
-
-    String outputFileCanonicalPath = outputFile.getCanonicalPath();
-    if (outputFile.isDirectory() && !outputFileCanonicalPath.endsWith(FILE_SEPARATOR)) {
-      outputFileCanonicalPath = outputFileCanonicalPath + FILE_SEPARATOR;
-    }
-
-    String outputCanonicalPath = (new File(outputPath).getCanonicalPath());
-    if (!outputCanonicalPath.endsWith(FILE_SEPARATOR)) {
-      outputCanonicalPath += FILE_SEPARATOR;
-    }
-
-    // make sure no file is extracted outside the target directory (a.k.a. zip slip)
-    if (!outputFileCanonicalPath.startsWith(outputCanonicalPath)) {
-      throw new ZipException("illegal file name that breaks out of the target directory: "
-          + fileHeader.getFileName());
+      checkOutputDirectoryStructure(fileHeader, outPath, newFileName);
+      unzipFile(zipInputStream, fileHeader, outPath, newFileName, progressMonitor);
     }
   }
 
-  private boolean isSymbolicLink(FileHeader fileHeader) {
-    byte[] externalFileAttributes = fileHeader.getExternalFileAttributes();
-
-    if (externalFileAttributes == null || externalFileAttributes.length < 4) {
-      return false;
-    }
-
-    return BitUtils.isBitSet(externalFileAttributes[3], 5);
-  }
+  private void unzipFile(ZipInputStream inputStream, FileHeader fileHeader, String outputPath, String newFileName,
+                         ProgressMonitor progressMonitor) throws IOException {
 
-  private void unzipFile(ZipInputStream inputStream, File outputFile, ProgressMonitor progressMonitor, byte[] buff)
-      throws IOException {
+    String outputFileName = Zip4jUtil.isStringNotNullAndNotEmpty(newFileName) ? newFileName : fileHeader.getFileName();
+    File outputFile = new File(outputPath + System.getProperty("file.separator") + outputFileName);
 
     int readLength;
     try (OutputStream outputStream = new FileOutputStream(outputFile)) {

--- a/src/main/java/net/lingala/zip4j/tasks/AddFolderToZipTask.java
+++ b/src/main/java/net/lingala/zip4j/tasks/AddFolderToZipTask.java
@@ -43,12 +45,7 @@ public class AddFolderToZipTask extends AbstractAddFileToZipTask<AddFolderToZipT
     String rootFolderPath;
     File folderToAdd = taskParameters.folderToAdd;
     if (taskParameters.zipParameters.isIncludeRootFolder()) {
-      File parentFile = folderToAdd.getCanonicalFile().getParentFile();
-      if (parentFile == null) {
-        rootFolderPath = folderToAdd.getCanonicalPath();
-      } else {
-        rootFolderPath = folderToAdd.getCanonicalFile().getParentFile().getCanonicalPath();
-      }
+      rootFolderPath = folderToAdd.getParentFile().getCanonicalPath();
     } else {
       rootFolderPath = folderToAdd.getCanonicalPath();
     }
@@ -57,7 +54,9 @@ public class AddFolderToZipTask extends AbstractAddFileToZipTask<AddFolderToZipT
   }
 
   private List<File> getFilesToAdd(AddFolderToZipTaskParameters taskParameters) throws ZipException {
-    List<File> filesToAdd = getFilesInDirectoryRecursive(taskParameters.folderToAdd, taskParameters.zipParameters);
+    List<File> filesToAdd = getFilesInDirectoryRecursive(taskParameters.folderToAdd,
+        taskParameters.zipParameters.isReadHiddenFiles(),
+        taskParameters.zipParameters.isReadHiddenFolders());
 
     if (taskParameters.zipParameters.isIncludeRootFolder()) {
       filesToAdd.add(taskParameters.folderToAdd);

--- a/src/main/java/net/lingala/zip4j/util/FileUtils.java
+++ b/src/main/java/net/lingala/zip4j/util/FileUtils.java
@@ -203,32 +181,20 @@ public class FileUtils {
     return splitZipFiles;
   }
 
-  public static String getRelativeFileName(File fileToAdd, ZipParameters zipParameters) throws ZipException {
+  public static String getRelativeFileName(String file, String rootFolderPath) throws ZipException {
 
     String fileName;
     try {
-      String fileCanonicalPath = fileToAdd.getCanonicalPath();
-      if (isStringNotNullAndNotEmpty(zipParameters.getDefaultFolderPath())) {
-        File rootFolderFile = new File(zipParameters.getDefaultFolderPath());
+      String fileCanonicalPath = new File(file).getCanonicalPath();
+      if (isStringNotNullAndNotEmpty(rootFolderPath)) {
+        File rootFolderFile = new File(rootFolderPath);
         String rootFolderFileRef = rootFolderFile.getCanonicalPath();
 
         if (!rootFolderFileRef.endsWith(FILE_SEPARATOR)) {
           rootFolderFileRef += FILE_SEPARATOR;
         }
 
-        String tmpFileName;
-
-        if (isSymbolicLink(fileToAdd)) {
-          String rootPath = new File(fileToAdd.getParentFile().getCanonicalFile().getPath() + File.separator + fileToAdd.getCanonicalFile().getName()).getPath();
-          tmpFileName = rootPath.substring(rootFolderFileRef.length());
-        } else {
-          if (!fileToAdd.getCanonicalFile().getPath().startsWith(rootFolderFileRef)) {
-            tmpFileName = fileToAdd.getCanonicalFile().getParentFile().getName() + FILE_SEPARATOR + fileToAdd.getCanonicalFile().getName();
-          } else {
-            tmpFileName = fileCanonicalPath.substring(rootFolderFileRef.length());
-          }
-        }
-
+        String tmpFileName = fileCanonicalPath.substring(rootFolderFileRef.length());
         if (tmpFileName.startsWith(System.getProperty("file.separator"))) {
           tmpFileName = tmpFileName.substring(1);
         }
