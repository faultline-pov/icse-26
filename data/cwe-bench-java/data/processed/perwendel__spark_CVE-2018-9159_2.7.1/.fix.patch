--- a/src/main/java/spark/resource/ClassPathResource.java
+++ b/src/main/java/spark/resource/ClassPathResource.java
@@ -74,14 +75,41 @@ public class ClassPathResource extends AbstractFileResolvingResource {
      */
     public ClassPathResource(String path, ClassLoader classLoader) {
         Assert.notNull(path, "Path must not be null");
+        Assert.isTrue(isValid(path), "Path is not valid");
+
         String pathToUse = StringUtils.cleanPath(path);
+
         if (pathToUse.startsWith("/")) {
             pathToUse = pathToUse.substring(1);
         }
+
         this.path = pathToUse;
         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
     }
 
+    private static boolean isValid(final String path) {
+        return !isInvalidPath(path);
+    }
+
+    private static boolean isInvalidPath(String path) {
+        if (path.contains("WEB-INF") || path.contains("META-INF")) {
+            return true;
+        }
+        if (path.contains(":/")) {
+            String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path);
+            if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {
+                return true;
+            }
+        }
+        if (path.contains("")) {
+            path = StringUtils.cleanPath(path);
+            if (path.contains("../")) {
+                return true;
+            }
+        }
+        return false;
+    }
+
     /**
      * Create a new ClassPathResource with optional ClassLoader and Class.
      * Only for internal usage.
@@ -108,10 +136,9 @@ public class ClassPathResource extends AbstractFileResolvingResource {
     /**
      * This implementation checks for the resolution of a resource URL.
      *
+     * @return if exists.
      * @see java.lang.ClassLoader#getResource(String)
      * @see java.lang.Class#getResource(String)
-     *
-     * @return if exists.
      */
     @Override
     public boolean exists() {
@@ -127,10 +154,9 @@ public class ClassPathResource extends AbstractFileResolvingResource {
     /**
      * This implementation opens an InputStream for the given class path resource.
      *
+     * @return the input stream.
      * @see java.lang.ClassLoader#getResourceAsStream(String)
      * @see java.lang.Class#getResourceAsStream(String)
-     *
-     * @return the input stream.
      */
     @Override
     public InputStream getInputStream() throws IOException {
