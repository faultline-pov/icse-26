--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/K8SNamespaceServiceImpl.java
+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/K8SNamespaceServiceImpl.java
@@ -114,13 +104,10 @@ public class K8SNamespaceServiceImpl extends BaseServiceImpl implements K8sNames
      * @param loginUser    login user
      * @param namespace    namespace
      * @param clusterCode  k8s not null
-     * @param limitsCpu    limits cpu, can null means not limit
-     * @param limitsMemory limits memory, can null means not limit
      * @return
      */
     @Override
-    public Map<String, Object> createK8sNamespace(User loginUser, String namespace, Long clusterCode, Double limitsCpu,
-                                                  Integer limitsMemory) {
+    public Map<String, Object> createK8sNamespace(User loginUser, String namespace, Long clusterCode) {
         Map<String, Object> result = new HashMap<>();
         if (isNotAdmin(loginUser, result)) {
             log.warn("Only admin can create K8s namespace, current login user name:{}.", loginUser.getUserName());
@@ -139,18 +126,6 @@ public class K8SNamespaceServiceImpl extends BaseServiceImpl implements K8sNames
             return result;
         }
 
-        if (limitsCpu != null && limitsCpu < 0.0) {
-            log.warn("Parameter limitsCpu is invalid.");
-            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, Constants.LIMITS_CPU);
-            return result;
-        }
-
-        if (limitsMemory != null && limitsMemory < 0) {
-            log.warn("Parameter limitsMemory is invalid.");
-            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, Constants.LIMITS_MEMORY);
-            return result;
-        }
-
         if (checkNamespaceExistInDb(namespace, clusterCode)) {
             log.warn("K8S namespace already exists.");
             putMsg(result, Status.K8S_NAMESPACE_EXIST, namespace, clusterCode);
@@ -183,18 +158,12 @@ public class K8SNamespaceServiceImpl extends BaseServiceImpl implements K8sNames
         k8sNamespaceObj.setNamespace(namespace);
         k8sNamespaceObj.setClusterCode(clusterCode);
         k8sNamespaceObj.setUserId(loginUser.getId());
-        k8sNamespaceObj.setLimitsCpu(limitsCpu);
-        k8sNamespaceObj.setLimitsMemory(limitsMemory);
-        k8sNamespaceObj.setPodReplicas(0);
-        k8sNamespaceObj.setPodRequestCpu(0.0);
-        k8sNamespaceObj.setPodRequestMemory(0);
         k8sNamespaceObj.setCreateTime(now);
         k8sNamespaceObj.setUpdateTime(now);
 
         if (!Constants.K8S_LOCAL_TEST_CLUSTER_CODE.equals(k8sNamespaceObj.getClusterCode())) {
             try {
-                String yamlStr = genDefaultResourceYaml(k8sNamespaceObj);
-                k8sClientService.upsertNamespaceAndResourceToK8s(k8sNamespaceObj, yamlStr);
+                k8sClientService.upsertNamespaceAndResourceToK8s(k8sNamespaceObj);
             } catch (Exception e) {
                 log.error("Namespace create to k8s error", e);
                 putMsg(result, Status.K8S_CLIENT_OPS_ERROR, e.getMessage());
@@ -209,65 +178,6 @@ public class K8SNamespaceServiceImpl extends BaseServiceImpl implements K8sNames
         return result;
     }
 
-    /**
-     * update K8s Namespace tag and resource limit
-     *
-     * @param loginUser    login user
-     * @param userName     owner
-     * @param limitsCpu    max cpu
-     * @param limitsMemory max memory
-     * @return
-     */
-    @Override
-    public Map<String, Object> updateK8sNamespace(User loginUser, int id, String userName, Double limitsCpu,
-                                                  Integer limitsMemory) {
-        Map<String, Object> result = new HashMap<>();
-        if (isNotAdmin(loginUser, result)) {
-            log.warn("Only admin can update K8s namespace, current login user name:{}.", loginUser.getUserName());
-            return result;
-        }
-
-        if (limitsCpu != null && limitsCpu < 0.0) {
-            log.warn("Parameter limitsCpu is invalid.");
-            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, Constants.LIMITS_CPU);
-            return result;
-        }
-
-        if (limitsMemory != null && limitsMemory < 0) {
-            log.warn("Parameter limitsMemory is invalid.");
-            putMsg(result, Status.REQUEST_PARAMS_NOT_VALID_ERROR, Constants.LIMITS_MEMORY);
-            return result;
-        }
-
-        K8sNamespace k8sNamespaceObj = k8sNamespaceMapper.selectById(id);
-        if (k8sNamespaceObj == null) {
-            log.error("K8s namespace does not exist, namespaceId:{}.", id);
-            putMsg(result, Status.K8S_NAMESPACE_NOT_EXIST, id);
-            return result;
-        }
-
-        Date now = new Date();
-        k8sNamespaceObj.setLimitsCpu(limitsCpu);
-        k8sNamespaceObj.setLimitsMemory(limitsMemory);
-        k8sNamespaceObj.setUpdateTime(now);
-
-        if (!Constants.K8S_LOCAL_TEST_CLUSTER_CODE.equals(k8sNamespaceObj.getClusterCode())) {
-            try {
-                String yamlStr = genDefaultResourceYaml(k8sNamespaceObj);
-                k8sClientService.upsertNamespaceAndResourceToK8s(k8sNamespaceObj, yamlStr);
-            } catch (Exception e) {
-                log.error("Namespace update to k8s error", e);
-                putMsg(result, Status.K8S_CLIENT_OPS_ERROR, e.getMessage());
-                return result;
-            }
-        }
-        // update to db
-        k8sNamespaceMapper.updateById(k8sNamespaceObj);
-        log.info("K8s namespace update complete, namespace:{}.", k8sNamespaceObj.getNamespace());
-        putMsg(result, Status.SUCCESS);
-        return result;
-    }
-
     /**
      * verify namespace and k8s
      *
@@ -338,42 +248,6 @@ public class K8SNamespaceServiceImpl extends BaseServiceImpl implements K8sNames
         return k8sNamespaceMapper.existNamespace(namespace, clusterCode) == Boolean.TRUE;
     }
 
-    /**
-     * use cpu memory create yaml
-     *
-     * @param k8sNamespace
-     * @return yaml file
-     */
-    private String genDefaultResourceYaml(K8sNamespace k8sNamespace) {
-        // resource use same name with namespace
-        String name = k8sNamespace.getNamespace();
-        String namespace = k8sNamespace.getNamespace();
-        String cpuStr = null;
-        if (k8sNamespace.getLimitsCpu() != null) {
-            cpuStr = k8sNamespace.getLimitsCpu() + "";
-        }
-
-        String memoryStr = null;
-        if (k8sNamespace.getLimitsMemory() != null) {
-            memoryStr = k8sNamespace.getLimitsMemory() + "Gi";
-        }
-
-        String result = resourceYaml.replace("${name}", name)
-                .replace("${namespace}", namespace);
-        if (cpuStr == null) {
-            result = result.replace("${limitCpu}", "");
-        } else {
-            result = result.replace("${limitCpu}", "limits.cpu: '" + cpuStr + "'");
-        }
-
-        if (memoryStr == null) {
-            result = result.replace("${limitMemory}", "");
-        } else {
-            result = result.replace("${limitMemory}", "limits.memory: " + memoryStr);
-        }
-        return result;
-    }
-
     /**
      * query unauthorized namespace
      *

--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/k8s/K8sClientService.java
+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/k8s/K8sClientService.java
@@ -42,17 +40,15 @@ public class K8sClientService {
     @Autowired
     private K8sManager k8sManager;
 
-    public ResourceQuota upsertNamespaceAndResourceToK8s(K8sNamespace k8sNamespace,
-                                                         String yamlStr) throws RemotingException {
+    public void upsertNamespaceAndResourceToK8s(K8sNamespace k8sNamespace) {
         if (!checkNamespaceToK8s(k8sNamespace.getNamespace(), k8sNamespace.getClusterCode())) {
-            throw new RemotingException(String.format(
+            throw new RuntimeException(String.format(
                     "namespace %s does not exist in k8s cluster, please create namespace in k8s cluster first",
                     k8sNamespace.getNamespace()));
         }
-        return upsertNamespacedResourceToK8s(k8sNamespace, yamlStr);
     }
 
-    public Optional<Namespace> deleteNamespaceToK8s(String name, Long clusterCode) throws RemotingException {
+    public Optional<Namespace> deleteNamespaceToK8s(String name, Long clusterCode) {
         Optional<Namespace> result = getNamespaceFromK8s(name, clusterCode);
         if (result.isPresent()) {
             KubernetesClient client = k8sManager.getK8sClient(clusterCode);
@@ -66,34 +62,7 @@ public class K8sClientService {
         return getNamespaceFromK8s(name, clusterCode);
     }
 
-    private ResourceQuota upsertNamespacedResourceToK8s(K8sNamespace k8sNamespace,
-                                                        String yamlStr) throws RemotingException {
-
-        KubernetesClient client = k8sManager.getK8sClient(k8sNamespace.getClusterCode());
-
-        // 创建资源
-        ResourceQuota queryExist = client.resourceQuotas()
-                .inNamespace(k8sNamespace.getNamespace())
-                .withName(k8sNamespace.getNamespace())
-                .get();
-
-        ResourceQuota body = yaml.loadAs(yamlStr, ResourceQuota.class);
-
-        if (queryExist != null) {
-            if (k8sNamespace.getLimitsCpu() == null && k8sNamespace.getLimitsMemory() == null) {
-                client.resourceQuotas().inNamespace(k8sNamespace.getNamespace())
-                        .withName(k8sNamespace.getNamespace())
-                        .delete();
-                return null;
-            }
-        }
-
-        return client.resourceQuotas().inNamespace(k8sNamespace.getNamespace())
-                .withName(k8sNamespace.getNamespace())
-                .createOrReplace(body);
-    }
-
-    private Optional<Namespace> getNamespaceFromK8s(String name, Long clusterCode) throws RemotingException {
+    private Optional<Namespace> getNamespaceFromK8s(String name, Long clusterCode) {
         NamespaceList listNamespace =
                 k8sManager.getK8sClient(clusterCode).namespaces().list();
 

--- a/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/K8sNamespaceController.java
+++ b/dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/K8sNamespaceController.java
@@ -106,58 +101,21 @@ public class K8sNamespaceController extends BaseController {
      * @param loginUser
      * @param namespace    k8s namespace
      * @param clusterCode  clusterCode
-     * @param limitsCpu    max cpu
-     * @param limitsMemory max memory
      * @return
      */
     @Operation(summary = "createK8sNamespace", description = "CREATE_NAMESPACE_NOTES")
     @Parameters({
             @Parameter(name = "namespace", description = "NAMESPACE", required = true, schema = @Schema(implementation = String.class)),
-            @Parameter(name = "clusterCode", description = "CLUSTER_CODE", required = true, schema = @Schema(implementation = long.class)),
-            @Parameter(name = "limits_cpu", description = "LIMITS_CPU", required = false, schema = @Schema(implementation = double.class)),
-            @Parameter(name = "limits_memory", description = "LIMITS_MEMORY", required = false, schema = @Schema(implementation = int.class))
+            @Parameter(name = "clusterCode", description = "CLUSTER_CODE", required = true, schema = @Schema(implementation = long.class))
     })
     @PostMapping()
     @ResponseStatus(HttpStatus.CREATED)
     @ApiException(CREATE_K8S_NAMESPACE_ERROR)
-    @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
     public Result createNamespace(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
                                   @RequestParam(value = "namespace") String namespace,
-                                  @RequestParam(value = "clusterCode") Long clusterCode,
-                                  @RequestParam(value = "limitsCpu", required = false) Double limitsCpu,
-                                  @RequestParam(value = "limitsMemory", required = false) Integer limitsMemory) {
-        Map<String, Object> result =
-                k8sNamespaceService.createK8sNamespace(loginUser, namespace, clusterCode, limitsCpu, limitsMemory);
-        return returnDataList(result);
-    }
-
-    /**
-     * update namespace,namespace and k8s not allowed update, because may create on k8s,can delete and create new instead
-     *
-     * @param loginUser
-     * @param userName     owner
-     * @param limitsCpu    max cpu
-     * @param limitsMemory max memory
-     * @return
-     */
-    @Operation(summary = "updateK8sNamespace", description = "UPDATE_NAMESPACE_NOTES")
-    @Parameters({
-            @Parameter(name = "id", description = "K8S_NAMESPACE_ID", required = true, schema = @Schema(implementation = int.class, example = "100")),
-            @Parameter(name = "userName", description = "OWNER", required = false, schema = @Schema(implementation = String.class)),
-            @Parameter(name = "limitsCpu", description = "LIMITS_CPU", required = false, schema = @Schema(implementation = double.class)),
-            @Parameter(name = "limitsMemory", description = "LIMITS_MEMORY", required = false, schema = @Schema(implementation = int.class))})
-    @PutMapping(value = "/{id}")
-    @ResponseStatus(HttpStatus.CREATED)
-    @ApiException(UPDATE_K8S_NAMESPACE_ERROR)
-    @AccessLogAnnotation(ignoreRequestArgs = "loginUser")
-    public Result updateNamespace(@Parameter(hidden = true) @RequestAttribute(value = Constants.SESSION_USER) User loginUser,
-                                  @PathVariable(value = "id") int id,
-                                  @RequestParam(value = "userName", required = false) String userName,
-                                  @RequestParam(value = "tag", required = false) String tag,
-                                  @RequestParam(value = "limitsCpu", required = false) Double limitsCpu,
-                                  @RequestParam(value = "limitsMemory", required = false) Integer limitsMemory) {
+                                  @RequestParam(value = "clusterCode") Long clusterCode) {
         Map<String, Object> result =
-                k8sNamespaceService.updateK8sNamespace(loginUser, id, userName, limitsCpu, limitsMemory);
+                k8sNamespaceService.createK8sNamespace(loginUser, namespace, clusterCode);
         return returnDataList(result);
     }
 
