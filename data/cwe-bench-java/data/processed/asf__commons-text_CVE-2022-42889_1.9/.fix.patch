--- a/src/main/java/org/apache/commons/text/StringSubstitutor.java
+++ b/src/main/java/org/apache/commons/text/StringSubstitutor.java
@@ -136,31 +136,33 @@ import org.apache.commons.text.matcher.StringMatcherFactory;
  *
  * <h2>Using Interpolation</h2>
  * <p>
- * The default interpolator let's you use string lookups like:
+ * The default interpolator lets you use string lookups like:
  * </p>
  *
  * <pre>
  * final StringSubstitutor interpolator = StringSubstitutor.createInterpolator();
- * interpolator.setEnableSubstitutionInVariables(true); // Allows for nested $'s.
- * final String text = interpolator.replace("Base64 Decoder:        ${base64Decoder:SGVsbG9Xb3JsZCE=}\n"
+ * final String text = interpolator.replace(
+ *       "Base64 Decoder:        ${base64Decoder:SGVsbG9Xb3JsZCE=}\n"
  *     + "Base64 Encoder:        ${base64Encoder:HelloWorld!}\n"
  *     + "Java Constant:         ${const:java.awt.event.KeyEvent.VK_ESCAPE}\n"
- *     + "Date:                  ${date:yyyy-MM-dd}\n" + "DNS:                   ${dns:address|apache.org}\n"
+ *     + "Date:                  ${date:yyyy-MM-dd}\n"
  *     + "Environment Variable:  ${env:USERNAME}\n"
  *     + "File Content:          ${file:UTF-8:src/test/resources/document.properties}\n"
- *     + "Java:                  ${java:version}\n" + "Localhost:             ${localhost:canonical-name}\n"
+ *     + "Java:                  ${java:version}\n"
+ *     + "Localhost:             ${localhost:canonical-name}\n"
  *     + "Properties File:       ${properties:src/test/resources/document.properties::mykey}\n"
- *     + "Resource Bundle:       ${resourceBundle:org.example.testResourceBundleLookup:mykey}\n"
- *     + "Script:                ${script:javascript:3 + 4}\n" + "System Property:       ${sys:user.dir}\n"
+ *     + "Resource Bundle:       ${resourceBundle:org.apache.commons.text.example.testResourceBundleLookup:mykey}\n"
+ *     + "System Property:       ${sys:user.dir}\n"
  *     + "URL Decoder:           ${urlDecoder:Hello%20World%21}\n"
  *     + "URL Encoder:           ${urlEncoder:Hello World!}\n"
- *     + "URL Content (HTTP):    ${url:UTF-8:http://www.apache.org}\n"
- *     + "URL Content (HTTPS):   ${url:UTF-8:https://www.apache.org}\n"
- *     + "URL Content (File):    ${url:UTF-8:file:///${sys:user.dir}/src/test/resources/document.properties}\n"
  *     + "XML XPath:             ${xml:src/test/resources/document.xml:/root/path/to/node}\n");
  * </pre>
  * <p>
- * For documentation of each lookup, see {@link StringLookupFactory}.
+ * For documentation and a full list of available lookups, see {@link StringLookupFactory}.
+ * </p>
+ * <p><strong>NOTE:</strong> The list of lookups available by default in {@link #createInterpolator()} changed
+ * in version {@code 1.10.0}. See the {@link StringLookupFactory} documentation for details and an explanation
+ * on how to reproduce the previous functionality.
  * </p>
  *
  * <h2>Using Recursive Variable Replacement</h2>
@@ -231,7 +233,6 @@ public class StringSubstitutor {
         public final int lengthChange;
 
         private Result(final boolean altered, final int lengthChange) {
-            super();
             this.altered = altered;
             this.lengthChange = lengthChange;
         }
@@ -288,14 +289,86 @@ public class StringSubstitutor {
      * Creates a new instance using the interpolator string lookup
      * {@link StringLookupFactory#interpolatorStringLookup()}.
      * <p>
-     * This StringSubstitutor lets you perform substituions like:
+     * This StringSubstitutor lets you perform substitutions like:
      * </p>
      *
      * <pre>
      * StringSubstitutor.createInterpolator().replace(
-     *   "OS name: ${sys:os.name}, " + "3 + 4 = ${script:javascript:3 + 4}");
+     *   "OS name: ${sys:os.name}, user: ${env:USER}");
      * </pre>
      *
+     * <p>The table below lists the lookups available by default in the returned instance. These
+     * may be modified through the use of the {@value StringLookupFactory#DEFAULT_STRING_LOOKUPS_PROPERTY}
+     * system property, as described in the {@link StringLookupFactory} documentation.</p>
+     *
+     * <p><strong>NOTE:</strong> The list of lookups available by default changed in version {@code 1.10.0}.
+     * Configuration via system property (as mentioned above) may be necessary to reproduce previous functionality.
+     * </p>
+     *
+     * <table>
+     * <caption>Default Lookups</caption>
+     * <tr>
+     * <th>Key</th>
+     * <th>Lookup</th>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_BASE64_DECODER}</td>
+     * <td>{@link StringLookupFactory#base64DecoderStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_BASE64_ENCODER}</td>
+     * <td>{@link StringLookupFactory#base64EncoderStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_CONST}</td>
+     * <td>{@link StringLookupFactory#constantStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_DATE}</td>
+     * <td>{@link StringLookupFactory#dateStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_ENV}</td>
+     * <td>{@link StringLookupFactory#environmentVariableStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_FILE}</td>
+     * <td>{@link StringLookupFactory#fileStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_JAVA}</td>
+     * <td>{@link StringLookupFactory#javaPlatformStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_LOCALHOST}</td>
+     * <td>{@link StringLookupFactory#localHostStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_PROPERTIES}</td>
+     * <td>{@link StringLookupFactory#propertiesStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_RESOURCE_BUNDLE}</td>
+     * <td>{@link StringLookupFactory#resourceBundleStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_SYS}</td>
+     * <td>{@link StringLookupFactory#systemPropertyStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_URL_DECODER}</td>
+     * <td>{@link StringLookupFactory#urlDecoderStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_URL_ENCODER}</td>
+     * <td>{@link StringLookupFactory#urlEncoderStringLookup()}</td>
+     * </tr>
+     * <tr>
+     * <td>{@value StringLookupFactory#KEY_XML}</td>
+     * <td>{@link StringLookupFactory#xmlStringLookup()}</td>
+     * </tr>
+     * </table>
+     *
      * @return a new instance using the interpolator string lookup.
      * @see StringLookupFactory#interpolatorStringLookup()
      * @since 1.8
@@ -351,7 +424,7 @@ public class StringSubstitutor {
         final Map<String, String> valueMap = new HashMap<>();
         final Enumeration<?> propNames = valueProperties.propertyNames();
         while (propNames.hasMoreElements()) {
-            final String propName = (String) propNames.nextElement();
+            final String propName = String.valueOf(propNames.nextElement());
             final String propValue = valueProperties.getProperty(propName);
             valueMap.put(propName, propValue);
         }
@@ -559,7 +632,7 @@ public class StringSubstitutor {
     /**
      * Creates a new instance based on the given StringSubstitutor.
      *
-     * @param other The StringSubstitutor is use as the source.
+     * @param other The StringSubstitutor used as the source.
      * @since 1.9
      */
     public StringSubstitutor(final StringSubstitutor other) {
@@ -735,6 +808,10 @@ public class StringSubstitutor {
      * @param length the length within the array to be processed, must be valid
      * @return The result of the replace operation
      * @throws IllegalArgumentException if variable is not found when its allowed to throw exception
+     * @throws StringIndexOutOfBoundsException if {@code offset} is not in the
+     *  range {@code 0 <= offset <= chars.length}
+     * @throws StringIndexOutOfBoundsException if {@code length < 0}
+     * @throws StringIndexOutOfBoundsException if {@code offset + length > chars.length}
      */
     public String replace(final char[] source, final int offset, final int length) {
         if (source == null) {
@@ -832,6 +909,10 @@ public class StringSubstitutor {
      * @param length the length within the source to be processed, must be valid
      * @return The result of the replace operation
      * @throws IllegalArgumentException if variable is not found when its allowed to throw exception
+     * @throws StringIndexOutOfBoundsException if {@code offset} is not in the
+     *  range {@code 0 <= offset <= source.length()}
+     * @throws StringIndexOutOfBoundsException if {@code length < 0}
+     * @throws StringIndexOutOfBoundsException if {@code offset + length > source.length()}
      */
     public String replace(final String source, final int offset, final int length) {
         if (source == null) {
@@ -1157,7 +1238,7 @@ public class StringSubstitutor {
      * @return this, to enable chaining
      */
     public StringSubstitutor setValueDelimiter(final String valueDelimiter) {
-        if (valueDelimiter == null || valueDelimiter.length() == 0) {
+        if (valueDelimiter == null || valueDelimiter.isEmpty()) {
             setValueDelimiterMatcher(null);
             return this;
         }
@@ -1317,7 +1398,7 @@ public class StringSubstitutor {
      * @param length the length within the builder to be processed, must be valid
      * @param priorVariables the stack keeping track of the replaced variables, may be null
      * @return The result.
-     * @throws IllegalArgumentException if variable is not found when its allowed to throw exception
+     * @throws IllegalArgumentException if variable is not found and <pre>isEnableUndefinedVariableException()==true</pre>
      * @since 1.9
      */
     private Result substitute(final TextStringBuilder builder, final int offset, final int length,

--- a/src/main/java/org/apache/commons/text/lookup/StringLookupFactory.java
+++ b/src/main/java/org/apache/commons/text/lookup/StringLookupFactory.java
@@ -391,6 +429,18 @@ public final class StringLookupFactory {
         ConstantStringLookup.clear();
     }
 
+    /**
+     * Returns the given map if the input is non-null or an empty immutable map if the input is null.
+     *
+     * @param <K> the class of the map keys
+     * @param <V> the class of the map values
+     * @param map The map to test
+     * @return the given map if the input is non-null or an empty immutable map if the input is null.
+     */
+    static <K, V> Map<K, V> toMap(final Map<K, V> map) {
+        return map == null ? Collections.emptyMap() : map;
+    }
+
     /**
      * No need to build instances for now.
      */
@@ -399,19 +449,17 @@ public final class StringLookupFactory {
     }
 
     /**
-     * Adds the {@link StringLookupFactory default lookups}.
+     * Adds the default string lookups for this class to {@code stringLookupMap}. The default string
+     * lookups are a set of built-in lookups added for convenience during string interpolation. The
+     * defaults may be configured using the {@value #DEFAULT_STRING_LOOKUPS_PROPERTY} system property.
+     * See the class documentation for details and a list of lookups.
      *
-     * @param stringLookupMap the map of string lookups.
+     * @param stringLookupMap the map of string lookups to edit.
      * @since 1.5
      */
     public void addDefaultStringLookups(final Map<String, StringLookup> stringLookupMap) {
         if (stringLookupMap != null) {
-            // "base64" is deprecated in favor of KEY_BASE64_DECODER.
-            stringLookupMap.put("base64", StringLookupFactory.INSTANCE_BASE64_DECODER);
-            for (final DefaultStringLookup stringLookup : DefaultStringLookup.values()) {
-                stringLookupMap.put(InterpolatorStringLookup.toKey(stringLookup.getKey()),
-                    stringLookup.getStringLookup());
-            }
+            stringLookupMap.putAll(DefaultStringLookupsHolder.INSTANCE.getDefaultStringLookups());
         }
     }
 
@@ -618,7 +673,7 @@ public final class StringLookupFactory {
      * </p>
      *
      * <pre>
-     * StringLookupFactory.INSTANCE.dateStringLookup().lookup("USER");
+     * StringLookupFactory.INSTANCE.environmentVariableStringLookup().lookup("USER");
      * </pre>
      * <p>
      * Using a {@link StringSubstitutor}:
@@ -679,10 +734,9 @@ public final class StringLookupFactory {
     }
 
     /**
-     * Returns a new InterpolatorStringLookup using the {@link StringLookupFactory default lookups}.
-     * <p>
-     * The lookups available to an interpolator are defined in
-     * </p>
+     * Returns a {@link InterpolatorStringLookup} containing the configured
+     * {@link #addDefaultStringLookups(Map) default lookups}. See the class documentation for
+     * details on how these defaults are configured.
      * <p>
      * Using a {@link StringLookup} from the {@link StringLookupFactory}:
      * </p>
@@ -1084,11 +1153,18 @@ public final class StringLookupFactory {
      * StringLookupFactory.INSTANCE.urlStringLookup().lookup("UTF-8:https://www.apache.org");
      * </pre>
      * <p>
-     * Using a {@link StringSubstitutor}:
+     * When used through a {@link StringSubstitutor}, this lookup must either be added programmatically
+     * (as below) or enabled as a default lookup using the {@value #DEFAULT_STRING_LOOKUPS_PROPERTY} system property
+     * (see class documentation).
      * </p>
      *
      * <pre>
-     * StringSubstitutor.createInterpolator().replace("... ${url:UTF-8:https://www.apache.org} ..."));
+     * Map&lt;String, StringLookup&gt; lookupMap = new HashMap&lt;&gt;();
+     * lookupMap.put("url", StringLookupFactory.INSTANCE.urlStringLookup());
+     *
+     * StringLookup variableResolver = StringLookupFactory.INSTANCE.interpolatorStringLookup(lookupMap, null, false);
+     *
+     * String value = new StringSubstitutor(variableResolver).replace("${url:UTF-8:https://www.apache.org}");
      * </pre>
      * <p>
      * The above examples convert {@code "UTF-8:https://www.apache.org"} to the contents of that page.

--- a/src/main/java/org/apache/commons/text/lookup/InterpolatorStringLookup.java
+++ b/src/main/java/org/apache/commons/text/lookup/InterpolatorStringLookup.java
@@ -39,10 +39,6 @@ class InterpolatorStringLookup extends AbstractStringLookup {
     /** Constant for the prefix separator. */
     private static final char PREFIX_SEPARATOR = ':';
 
-    static String toKey(final String key) {
-        return key.toLowerCase(Locale.ROOT);
-    }
-
     /** The default string lookup. */
     private final StringLookup defaultStringLookup;
 
@@ -50,7 +46,7 @@ class InterpolatorStringLookup extends AbstractStringLookup {
     private final Map<String, StringLookup> stringLookupMap;
 
     /**
-     * Creates an instance using only lookups that work without initial properties and are stateless.
+     * Constructs an instance using only lookups that work without initial properties and are stateless.
      * <p>
      * Uses the {@link StringLookupFactory default lookups}.
      * </p>
@@ -68,11 +64,10 @@ class InterpolatorStringLookup extends AbstractStringLookup {
      */
     InterpolatorStringLookup(final Map<String, StringLookup> stringLookupMap, final StringLookup defaultStringLookup,
         final boolean addDefaultLookups) {
-        super();
         this.defaultStringLookup = defaultStringLookup;
         this.stringLookupMap = new HashMap<>(stringLookupMap.size());
         for (final Entry<String, StringLookup> entry : stringLookupMap.entrySet()) {
-            this.stringLookupMap.put(toKey(entry.getKey()), entry.getValue());
+            this.stringLookupMap.put(StringLookupFactory.toKey(entry.getKey()), entry.getValue());
         }
         if (addDefaultLookups) {
             StringLookupFactory.INSTANCE.addDefaultStringLookups(this.stringLookupMap);
@@ -80,7 +75,7 @@ class InterpolatorStringLookup extends AbstractStringLookup {
     }
 
     /**
-     * Creates an instance using only lookups that work without initial properties and are stateless.
+     * Constructs an instance using only lookups that work without initial properties and are stateless.
      * <p>
      * Uses the {@link StringLookupFactory default lookups}.
      * </p>
@@ -116,19 +111,19 @@ class InterpolatorStringLookup extends AbstractStringLookup {
      * the prefix stripped to the lookup object registered for this prefix. If no prefix can be found or if the
      * associated lookup object cannot resolve this variable, the default lookup object will be used.
      *
-     * @param var the name of the variable whose value is to be looked up
+     * @param key the name of the variable whose value is to be looked up
      * @return The value of this variable or <b>null</b> if it cannot be resolved
      */
     @Override
-    public String lookup(String var) {
-        if (var == null) {
+    public String lookup(String key) {
+        if (key == null) {
             return null;
         }
 
-        final int prefixPos = var.indexOf(PREFIX_SEPARATOR);
+        final int prefixPos = key.indexOf(PREFIX_SEPARATOR);
         if (prefixPos >= 0) {
-            final String prefix = toKey(var.substring(0, prefixPos));
-            final String name = var.substring(prefixPos + 1);
+            final String prefix = StringLookupFactory.toKey(key.substring(0, prefixPos));
+            final String name = key.substring(prefixPos + 1);
             final StringLookup lookup = stringLookupMap.get(prefix);
             String value = null;
             if (lookup != null) {
@@ -138,10 +133,10 @@ class InterpolatorStringLookup extends AbstractStringLookup {
             if (value != null) {
                 return value;
             }
-            var = var.substring(prefixPos + 1);
+            key = key.substring(prefixPos + 1);
         }
         if (defaultStringLookup != null) {
-            return defaultStringLookup.lookup(var);
+            return defaultStringLookup.lookup(key);
         }
         return null;
     }
