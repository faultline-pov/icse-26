--- a/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ShortcutConfigurable.java
+++ b/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ShortcutConfigurable.java
@@ -148,4 +160,92 @@ public interface ShortcutConfigurable {
 
 	}
 
+	class GatewayEvaluationContext implements EvaluationContext {
+
+		private final BeanFactoryResolver beanFactoryResolver;
+
+		private final SimpleEvaluationContext delegate;
+
+		public GatewayEvaluationContext(BeanFactory beanFactory) {
+			this.beanFactoryResolver = new BeanFactoryResolver(beanFactory);
+			Environment env = beanFactory.getBean(Environment.class);
+			boolean restrictive = env.getProperty("spring.cloud.gateway.restrictive-property-accessor.enabled",
+					Boolean.class, true);
+			if (restrictive) {
+				delegate = SimpleEvaluationContext.forPropertyAccessors(new RestrictivePropertyAccessor())
+						.withMethodResolvers((context, targetObject, name, argumentTypes) -> null).build();
+			}
+			else {
+				delegate = SimpleEvaluationContext.forReadOnlyDataBinding().build();
+			}
+		}
+
+		@Override
+		public TypedValue getRootObject() {
+			return delegate.getRootObject();
+		}
+
+		@Override
+		public List<PropertyAccessor> getPropertyAccessors() {
+			return delegate.getPropertyAccessors();
+		}
+
+		@Override
+		public List<ConstructorResolver> getConstructorResolvers() {
+			return delegate.getConstructorResolvers();
+		}
+
+		@Override
+		public List<MethodResolver> getMethodResolvers() {
+			return delegate.getMethodResolvers();
+		}
+
+		@Override
+		@Nullable
+		public BeanResolver getBeanResolver() {
+			return this.beanFactoryResolver;
+		}
+
+		@Override
+		public TypeLocator getTypeLocator() {
+			return delegate.getTypeLocator();
+		}
+
+		@Override
+		public TypeConverter getTypeConverter() {
+			return delegate.getTypeConverter();
+		}
+
+		@Override
+		public TypeComparator getTypeComparator() {
+			return delegate.getTypeComparator();
+		}
+
+		@Override
+		public OperatorOverloader getOperatorOverloader() {
+			return delegate.getOperatorOverloader();
+		}
+
+		@Override
+		public void setVariable(String name, Object value) {
+			delegate.setVariable(name, value);
+		}
+
+		@Override
+		@Nullable
+		public Object lookupVariable(String name) {
+			return delegate.lookupVariable(name);
+		}
+
+	}
+
+	class RestrictivePropertyAccessor extends ReflectivePropertyAccessor {
+
+		@Override
+		public boolean canRead(EvaluationContext context, Object target, String name) {
+			return false;
+		}
+
+	}
+
 }
