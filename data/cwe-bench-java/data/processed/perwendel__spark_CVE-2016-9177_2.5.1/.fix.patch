--- a/src/main/java/spark/resource/ExternalResourceHandler.java
+++ b/src/main/java/spark/resource/ExternalResourceHandler.java
@@ -77,7 +78,15 @@ public class ExternalResourceHandler extends AbstractResourceHandler {
                 }
             }
 
-            return (resource != null && resource.exists()) ? resource : null;
+            if (resource != null && resource.exists()) {
+                DirectoryTraversal.protectAgainstForExternal(resource.getPath());
+                return resource;
+            } else {
+                return null;
+            }
+
+        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {
+            throw directoryTraversalDetection;
         } catch (Exception e) {
             if (LOG.isDebugEnabled()) {
                 LOG.debug(e.getClass().getSimpleName() + " when trying to get resource. " + e.getMessage());

--- a/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
+++ b/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
@@ -72,7 +77,10 @@ public class StaticFilesConfiguration {
             if (consumeWithJarResourceHandler(httpRequest, httpResponse)) {
                 return true;
             }
-
+        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {
+            LOG.warn(directoryTraversalDetection.getMessage() + " directory traversal detection for path: "
+                             + httpRequest.getPathInfo());
+        }
         return false;
     }
 
@@ -89,6 +97,7 @@ public class StaticFilesConfiguration {
                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
+
                     IOUtils.copy(resource.getInputStream(), wrappedOutputStream);
                     wrappedOutputStream.flush();
                     wrappedOutputStream.close();
@@ -172,6 +180,8 @@ public class StaticFilesConfiguration {
             } catch (IOException e) {
                 LOG.error("Error when creating StaticResourceHandler", e);
             }
+
+            StaticFilesFolder.localConfiguredTo(folder);
             staticResourcesSet = true;
         }
 
@@ -191,10 +201,9 @@ public class StaticFilesConfiguration {
                 jarResourceHandlers.add(new JarResourceHandler(folder, "index.html"));
                 staticResourcesSet = true;
                 return true;
-            } else {
-                LOG.error("Static file configuration failed.");
             }
 
+            LOG.error("Static file configuration failed.");
         }
         return false;
     }
@@ -223,6 +232,8 @@ public class StaticFilesConfiguration {
             } catch (IOException e) {
                 LOG.error("Error when creating external StaticResourceHandler", e);
             }
+
+            StaticFilesFolder.externalConfiguredTo(folder);
             externalStaticResourcesSet = true;
         }
 

--- a/src/main/java/spark/utils/StringUtils.java
+++ b/src/main/java/spark/utils/StringUtils.java
@@ -390,4 +390,19 @@ public abstract class StringUtils {
         return str;
     }
 
+    public static String removeLeadingAndTrailingSlashesFrom(String string) {
+        
+        String trimmed = string;
+
+        if (trimmed.endsWith("/") || trimmed.endsWith("\\")) {
+            trimmed = trimmed.substring(0, trimmed.length() - 1);
+        }
+
+        if (trimmed.startsWith("/")) {
+            trimmed = trimmed.substring(1);
+        }
+
+        return trimmed;
+    }
+
 }

--- a/src/main/java/spark/resource/ClassPathResourceHandler.java
+++ b/src/main/java/spark/resource/ClassPathResourceHandler.java
@@ -78,7 +79,15 @@ public class ClassPathResourceHandler extends AbstractResourceHandler {
                 }
             }
 
-            return (resource != null && resource.exists()) ? resource : null;
+            if (resource != null && resource.exists()) {
+                DirectoryTraversal.protectAgainstInClassPath(resource.getPath());
+                return resource;
+            } else {
+                return null;
+            }
+
+        } catch (DirectoryTraversal.DirectoryTraversalDetection directoryTraversalDetection) {
+            throw directoryTraversalDetection;
         } catch (Exception e) {
             if (LOG.isDebugEnabled()) {
                 LOG.debug(e.getClass().getSimpleName() + " when trying to get resource. " + e.getMessage());
