--- a/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/renderers/QuestionnaireRenderer.java
+++ b/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/renderers/QuestionnaireRenderer.java
@@ -37,6 +37,8 @@ import org.hl7.fhir.utilities.xhtml.HierarchicalTableGenerator.Row;
 import org.hl7.fhir.utilities.xhtml.HierarchicalTableGenerator.TableModel;
 import org.hl7.fhir.utilities.xhtml.XhtmlNode;
 
+import javax.annotation.Nonnull;
+
 public class QuestionnaireRenderer extends TerminologyRenderer {
   public static final String EXT_QUESTIONNAIRE_ITEM_TYPE_ORIGINAL = "http://hl7.org/fhir/tools/StructureDefinition/original-item-type";
 
@@ -251,28 +253,28 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
       Cell flags = gen.new Cell();
       r.getCells().add(flags);
       if (i.getReadOnly()) {
-        flags.addPiece(gen.new Piece(Utilities.pathURL(context.getSpecificationLink(), "questionnaire-definitions.html#Questionnaire.item.readOnly"), null, "Is Readonly").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-readonly.png"))));
+        flags.addPiece(gen.new Piece(Utilities.pathURL(context.getSpecificationLink(), "questionnaire-definitions.html#Questionnaire.item.readOnly"), null, "Is Readonly").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", getImgPath("icon-qi-readonly.png"))));
       }
       if (ToolingExtensions.readBoolExtension(i, "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-isSubject")) {
-        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-isSubject.html"), null, "Can change the subject of the questionnaire").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-subject.png"))));
+        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-isSubject.html"), null, "Can change the subject of the questionnaire").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", getImgPath("icon-qi-subject.png"))));
       }
       if (ToolingExtensions.readBoolExtension(i, "http://hl7.org/fhir/StructureDefinition/questionnaire-hidden")) {
-        flags.addPiece(gen.new Piece(getSpecLink("extension-questionnaire-hidden.html"), null, "Is a hidden item").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-hidden.png"))));
+        flags.addPiece(gen.new Piece(getSpecLink("extension-questionnaire-hidden.html"), null, "Is a hidden item").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", getImgPath("icon-qi-hidden.png"))));
       }
       if (ToolingExtensions.readBoolExtension(i, "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-optionalDisplay")) {
-        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-optionalDisplay.html"), null, "Is optional to display").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-optional.png"))));
+        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-optionalDisplay.html"), null, "Is optional to display").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", getImgPath("icon-qi-optional.png"))));
       }
       if (i.hasExtension("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod")) {
-        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-observationLinkPeriod.html"), null, "Is linked to an observation").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-observation.png"))));
+        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-observationLinkPeriod.html"), null, "Is linked to an observation").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", getImgPath("icon-qi-observation.png"))));
       }
       if (i.hasExtension("http://hl7.org/fhir/StructureDefinition/questionnaire-choiceOrientation")) {
         String code = ToolingExtensions.readStringExtension(i,  "http://hl7.org/fhir/StructureDefinition/questionnaire-choiceOrientation");
-        flags.addPiece(gen.new Piece(getSpecLink("extension-questionnaire-choiceorientation.html"), null, "Orientation: "+code).addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-"+code+".png"))));
+        flags.addPiece(gen.new Piece(getSpecLink("extension-questionnaire-choiceorientation.html"), null, "Orientation: "+code).addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", getImgPath("icon-qi-" + code + ".png"))));
       }
       if (i.hasExtension("http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory")) {
         CodeableConcept cc = i.getExtensionByUrl("http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory").getValueCodeableConcept();
         String code = cc.getCode("http://hl7.org/fhir/questionnaire-display-category");
-        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-displayCategory.html"), null, "Category: "+code).addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-"+code+".png"))));
+        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-displayCategory.html"), null, "Category: "+code).addHtml(new XhtmlNode(NodeType.Element, "img").attribute("src", getImgPath("icon-qi-" + code + ".png"))));
       }
     }    
     Cell defn = gen.new Cell();
@@ -687,26 +689,26 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
     
     if (ToolingExtensions.readBoolExtension(i, "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-isSubject")) {
       hasFlag = true;
-      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-isSubject"), "Can change the subject of the questionnaire").img(Utilities.path(context.getLocalPrefix(), "icon-qi-subject.png"), "icon");
+      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-isSubject"), "Can change the subject of the questionnaire").img(getImgPath("icon-qi-subject.png"), "icon");
     }
     if (ToolingExtensions.readBoolExtension(i, "http://hl7.org/fhir/StructureDefinition/questionnaire-hidden")) {
       hasFlag = true;
-      flags.ah(Utilities.pathURL(context.getSpecificationLink(), "extension-questionnaire-hidden.html"), "Is a hidden item").img(Utilities.path(context.getLocalPrefix(), "icon-qi-hidden.png"), "icon");
+      flags.ah(Utilities.pathURL(context.getSpecificationLink(), "extension-questionnaire-hidden.html"), "Is a hidden item").img(getImgPath("icon-qi-hidden.png"), "icon");
       d.style("background-color: #eeeeee");
     }
     if (ToolingExtensions.readBoolExtension(i, "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-optionalDisplay")) {
       hasFlag = true;
-      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-optionalDisplay"), "Is optional to display").img(Utilities.path(context.getLocalPrefix(), "icon-qi-optional.png"), "icon");
+      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-optionalDisplay"), "Is optional to display").img(getImgPath("icon-qi-optional.png"), "icon");
     }
     if (i.hasExtension("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod")) {
       hasFlag = true;
-      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod"), "Is linked to an observation").img(Utilities.path(context.getLocalPrefix(), "icon-qi-observation.png"), "icon");
+      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod"), "Is linked to an observation").img(getImgPath("icon-qi-observation.png"), "icon");
     }
     if (i.hasExtension("http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory")) {
       CodeableConcept cc = i.getExtensionByUrl("http://hl7.org/fhir/StructureDefinition/questionnaire-displayCategory").getValueCodeableConcept();
       String code = cc.getCode("http://hl7.org/fhir/questionnaire-display-category");
       hasFlag = true;
-      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-displayCategory"), "Category: "+code).img(Utilities.path(context.getLocalPrefix(), "icon-qi-"+code+".png"), "icon");
+      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-displayCategory"), "Category: "+code).img(getImgPath("icon-qi-" + code + ".png"), "icon");
     }
 
     if (i.hasMaxLength()) {
@@ -788,6 +790,13 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
     return hasExt; 
   }
 
+  @Nonnull
+  private String getImgPath(String code) throws IOException {
+    return context.getLocalPrefix().length() > 0
+      ? Utilities.path(context.getLocalPrefix(), code)
+      : Utilities.path(code);
+  }
+
   private void item(XhtmlNode ul, String name, String value, String valueLink) {
     if (!Utilities.noString(value)) {
       ul.li().style("font-size: 10px").ah(valueLink).tx(name+": "+value);
@@ -862,7 +871,7 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
     boolean ext = false;
     XhtmlNode td = tbl.tr().td("structure").colspan("2").span(null, null).attribute("class", "self-link-parent");
     td.an(q.getId());
-    td.img(Utilities.path(context.getLocalPrefix(), "icon_q_root.gif"), "icon");
+    td.img(getImgPath("icon_q_root.gif"), "icon");
     td.tx(" Questionnaire ");
     td.b().tx(q.getId());
     
@@ -915,10 +924,10 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
     XhtmlNode td = tbl.tr().td("structure").colspan("2").span(null, null).attribute("class", "self-link-parent");
     td.an("item."+qi.getLinkId());
     for (QuestionnaireItemComponent p : parents) {
-      td.ah("#item."+p.getLinkId()).img(Utilities.path(context.getLocalPrefix(), "icon_q_item.png"), "icon");
+      td.ah("#item."+p.getLinkId()).img(getImgPath("icon_q_item.png"), "icon");
       td.tx(" > ");
     }
-    td.img(Utilities.path(context.getLocalPrefix(), "icon_q_item.png"), "icon");
+    td.img(getImgPath("icon_q_item.png"), "icon");
     td.tx(" Item ");
     td.b().tx(qi.getLinkId());
     

--- a/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java
+++ b/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/terminologies/TerminologyCacheManager.java
@@ -97,17 +97,17 @@ public class TerminologyCacheManager {
   public static void unzip(InputStream is, String targetDir) throws IOException {
     try (ZipInputStream zipIn = new ZipInputStream(is)) {
       for (ZipEntry ze; (ze = zipIn.getNextEntry()) != null; ) {
-        String path = Path.of(Utilities.path(targetDir, ze.getName())).normalize().toFile().getAbsolutePath();
-
-        if (!path.startsWith(targetDir)) {
+        Path path = Path.of(Utilities.path(targetDir, ze.getName())).normalize();
+        String pathString = path.toFile().getAbsolutePath();
+        if (!path.startsWith(Path.of(targetDir).normalize())) {
           // see: https://snyk.io/research/zip-slip-vulnerability
           throw new RuntimeException("Entry with an illegal path: " + ze.getName());
         }
         if (ze.isDirectory()) {
-          Utilities.createDirectory(path);
+          Utilities.createDirectory(pathString);
         } else {
-          Utilities.createDirectory(Utilities.getDirectoryForFile(path));
-          TextFile.streamToFileNoClose(zipIn, path);
+          Utilities.createDirectory(Utilities.getDirectoryForFile(pathString));
+          TextFile.streamToFileNoClose(zipIn, pathString);
         }
       }
     }

--- a/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/context/SimpleWorkerContext.java
+++ b/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/context/SimpleWorkerContext.java
@@ -520,9 +520,13 @@ public class SimpleWorkerContext extends BaseWorkerContext implements IWorkerCon
   
 	private void loadFromStream(InputStream stream, IContextResourceLoader loader) throws IOException, FHIRException {
 		ZipInputStream zip = new ZipInputStream(stream);
-		ZipEntry ze;
-		while ((ze = zip.getNextEntry()) != null) {
-      loadDefinitionItem(ze.getName(), zip, loader, null, null);
+    ZipEntry zipEntry;
+    while ((zipEntry = zip.getNextEntry()) != null) {
+      String entryName = zipEntry.getName();
+      if (entryName.contains("..")) {
+        throw new RuntimeException("Entry with an illegal path: " + entryName);
+      }
+      loadDefinitionItem(entryName, zip, loader, null, null);
 			zip.closeEntry();
 		}
 		zip.close();

--- a/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/test/utils/ToolsHelper.java
+++ b/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/test/utils/ToolsHelper.java
@@ -146,61 +146,6 @@ public class ToolsHelper {
 		//    }
 	}
 
-	private Map<String, byte[]> getDefinitions(String definitions) throws IOException, FHIRException {
-		Map<String, byte[]> results = new HashMap<String, byte[]>();
-		readDefinitions(results, loadDefinitions(definitions));
-		return results;
-	}
-
-	private void readDefinitions(Map<String, byte[]> map, byte[] defn) throws IOException {
-		ZipInputStream zip = new ZipInputStream(new ByteArrayInputStream(defn));
-		ZipEntry ze;
-		while ((ze = zip.getNextEntry()) != null) {
-			if (!ze.getName().endsWith(".zip") && !ze.getName().endsWith(".jar") ) { // skip saxon .zip
-				String name = ze.getName();
-				InputStream in = zip;
-				ByteArrayOutputStream b = new ByteArrayOutputStream();
-				int n;
-				byte[] buf = new byte[1024];
-				while ((n = in.read(buf, 0, 1024)) > -1) {
-					b.write(buf, 0, n);
-				}        
-				map.put(name, b.toByteArray());
-			}
-			zip.closeEntry();
-		}
-		zip.close();    
-	}
-
-	private byte[] loadDefinitions(String definitions) throws FHIRException, IOException {
-		byte[] defn;
-		//    if (Utilities.noString(definitions)) {
-		//      defn = loadFromUrl(MASTER_SOURCE);
-		//    } else 
-		if (definitions.startsWith("https:") || definitions.startsWith("http:")) {
-			defn = loadFromUrl(definitions);
-		} else if (new File(definitions).exists()) {
-			defn = loadFromFile(definitions);      
-		} else
-			throw new FHIRException("Unable to find FHIR validation Pack (source = "+definitions+")");
-		return defn;
-	}
-
-	private byte[] loadFromUrl(String src) throws IOException {
-		URL url = new URL(src);
-		byte[] str = IOUtils.toByteArray(url.openStream());
-		return str;
-	}
-
-	private byte[] loadFromFile(String src) throws IOException {
-		FileInputStream in = new FileInputStream(src);
-		byte[] b = new byte[in.available()];
-		in.read(b);
-		in.close();
-		return b;
-	}
-
-
 	protected XmlPullParser loadXml(InputStream stream) throws XmlPullParserException, IOException {
 		BufferedInputStream input = new BufferedInputStream(stream);
 		XmlPullParserFactory factory = XmlPullParserFactory.newInstance(System.getProperty(XmlPullParserFactory.PROPERTY_NAME), null);

--- a/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/test/utils/ToolsHelper.java
+++ b/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/test/utils/ToolsHelper.java
@@ -146,61 +146,6 @@ public class ToolsHelper {
 		//    }
 	}
 
-	private Map<String, byte[]> getDefinitions(String definitions) throws IOException, FHIRException {
-		Map<String, byte[]> results = new HashMap<String, byte[]>();
-		readDefinitions(results, loadDefinitions(definitions));
-		return results;
-	}
-
-	private void readDefinitions(Map<String, byte[]> map, byte[] defn) throws IOException {
-		ZipInputStream zip = new ZipInputStream(new ByteArrayInputStream(defn));
-		ZipEntry ze;
-		while ((ze = zip.getNextEntry()) != null) {
-			if (!ze.getName().endsWith(".zip") && !ze.getName().endsWith(".jar") ) { // skip saxon .zip
-				String name = ze.getName();
-				InputStream in = zip;
-				ByteArrayOutputStream b = new ByteArrayOutputStream();
-				int n;
-				byte[] buf = new byte[1024];
-				while ((n = in.read(buf, 0, 1024)) > -1) {
-					b.write(buf, 0, n);
-				}        
-				map.put(name, b.toByteArray());
-			}
-			zip.closeEntry();
-		}
-		zip.close();    
-	}
-
-	private byte[] loadDefinitions(String definitions) throws FHIRException, IOException {
-		byte[] defn;
-		//    if (Utilities.noString(definitions)) {
-		//      defn = loadFromUrl(MASTER_SOURCE);
-		//    } else 
-		if (definitions.startsWith("https:") || definitions.startsWith("http:")) {
-			defn = loadFromUrl(definitions);
-		} else if (new File(definitions).exists()) {
-			defn = loadFromFile(definitions);      
-		} else
-			throw new FHIRException("Unable to find FHIR validation Pack (source = "+definitions+")");
-		return defn;
-	}
-
-	private byte[] loadFromUrl(String src) throws IOException {
-		URL url = new URL(src);
-		byte[] str = IOUtils.toByteArray(url.openStream());
-		return str;
-	}
-
-	private byte[] loadFromFile(String src) throws IOException {
-		FileInputStream in = new FileInputStream(src);
-		byte[] b = new byte[in.available()];
-		in.read(b);
-		in.close();
-		return b;
-	}
-
-
 	protected XmlPullParser loadXml(InputStream stream) throws XmlPullParserException, IOException {
 		BufferedInputStream input = new BufferedInputStream(stream);
 		XmlPullParserFactory factory = XmlPullParserFactory.newInstance(System.getProperty(XmlPullParserFactory.PROPERTY_NAME), null);

--- a/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/context/SimpleWorkerContext.java
+++ b/org.hl7.fhir.r4b/src/main/java/org/hl7/fhir/r4b/context/SimpleWorkerContext.java
@@ -471,9 +471,13 @@ public class SimpleWorkerContext extends BaseWorkerContext implements IWorkerCon
   
 	private void loadFromStream(InputStream stream, IContextResourceLoader loader) throws IOException, FHIRException {
 		ZipInputStream zip = new ZipInputStream(stream);
-		ZipEntry ze;
-		while ((ze = zip.getNextEntry()) != null) {
-      loadDefinitionItem(ze.getName(), zip, loader, null, null);
+    ZipEntry zipEntry;
+    while ((zipEntry = zip.getNextEntry()) != null) {
+      String entryName = zipEntry.getName();
+      if (entryName.contains("..")) {
+        throw new RuntimeException("Entry with an illegal path: " + entryName);
+      }
+      loadDefinitionItem(entryName, zip, loader, null, null);
 			zip.closeEntry();
 		}
 		zip.close();

--- a/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java
+++ b/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/terminologies/TerminologyCacheManager.java
@@ -97,16 +97,17 @@ public class TerminologyCacheManager {
   public static void unzip(InputStream is, String targetDir) throws IOException {
     try (ZipInputStream zipIn = new ZipInputStream(is)) {
       for (ZipEntry ze; (ze = zipIn.getNextEntry()) != null; ) {
-        String path = Path.of(Utilities.path(targetDir, ze.getName())).normalize().toFile().getAbsolutePath();
-        if (!path.startsWith(targetDir)) {
+        Path path = Path.of(Utilities.path(targetDir, ze.getName())).normalize();
+        String pathString = path.toFile().getAbsolutePath();
+        if (!path.startsWith(Path.of(targetDir).normalize())) {
           // see: https://snyk.io/research/zip-slip-vulnerability
           throw new RuntimeException("Entry with an illegal path: " + ze.getName());
         }
         if (ze.isDirectory()) {
-          Utilities.createDirectory(path);
+          Utilities.createDirectory(pathString);
         } else {
-          Utilities.createDirectory(Utilities.getDirectoryForFile(path));
-          TextFile.streamToFileNoClose(zipIn, path);
+          Utilities.createDirectory(Utilities.getDirectoryForFile(pathString));
+          TextFile.streamToFileNoClose(zipIn, pathString);
         }
       }
     }

--- a/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/IgLoader.java
+++ b/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/IgLoader.java
@@ -374,16 +375,19 @@ public class IgLoader {
   protected Map<String, byte[]> readZip(InputStream stream) throws IOException {
     Map<String, byte[]> res = new HashMap<>();
     ZipInputStream zip = new ZipInputStream(stream);
-    ZipEntry ze;
-    while ((ze = zip.getNextEntry()) != null) {
-      String name = ze.getName();
+    ZipEntry zipEntry;
+    while ((zipEntry = zip.getNextEntry()) != null) {
+      String entryName = zipEntry.getName();
+      if (entryName.contains("..") || Path.of(entryName).isAbsolute()) {
+        throw new RuntimeException("Entry with an illegal path: " + entryName);
+      }
       ByteArrayOutputStream b = new ByteArrayOutputStream();
       int n;
       byte[] buf = new byte[1024];
       while ((n = ((InputStream) zip).read(buf, 0, 1024)) > -1) {
         b.write(buf, 0, n);
       }
-      res.put(name, b.toByteArray());
+      res.put(entryName, b.toByteArray());
       zip.closeEntry();
     }
     zip.close();

--- a/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/renderers/QuestionnaireRenderer.java
+++ b/org.hl7.fhir.r5/src/main/java/org/hl7/fhir/r5/renderers/QuestionnaireRenderer.java
@@ -37,6 +37,8 @@ import org.hl7.fhir.utilities.xhtml.HierarchicalTableGenerator.TableModel;
 import org.hl7.fhir.utilities.xhtml.NodeType;
 import org.hl7.fhir.utilities.xhtml.XhtmlNode;
 
+import javax.annotation.Nonnull;
+
 public class QuestionnaireRenderer extends TerminologyRenderer {
   public static final String EXT_QUESTIONNAIRE_ITEM_TYPE_ORIGINAL = "http://hl7.org/fhir/tools/StructureDefinition/original-item-type";
 
@@ -255,28 +257,28 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
       Cell flags = gen.new Cell();
       r.getCells().add(flags);
       if (i.getReadOnly()) {
-        flags.addPiece(gen.new Piece(Utilities.pathURL(context.getLink(KnownLinkType.SPEC), "questionnaire-definitions.html#Questionnaire.item.readOnly"), null, "Is Readonly").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-readonly.png"))));
+        flags.addPiece(gen.new Piece(Utilities.pathURL(context.getLink(KnownLinkType.SPEC), "questionnaire-definitions.html#Questionnaire.item.readOnly"), null, "Is Readonly").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", getImgPath("icon-qi-readonly.png"))));
       }
       if (ToolingExtensions.readBoolExtension(i, "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-isSubject")) {
-        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-isSubject.html"), null, "Can change the subject of the questionnaire").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-subject.png"))));
+        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-isSubject.html"), null, "Can change the subject of the questionnaire").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", getImgPath("icon-qi-subject.png"))));
       }
       if (ToolingExtensions.readBoolExtension(i, ToolingExtensions.EXT_Q_HIDDEN)) {
-        flags.addPiece(gen.new Piece(getSpecLink("extension-questionnaire-hidden.html"), null, "Is a hidden item").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-hidden.png"))));
+        flags.addPiece(gen.new Piece(getSpecLink("extension-questionnaire-hidden.html"), null, "Is a hidden item").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", getImgPath("icon-qi-hidden.png"))));
       }
       if (ToolingExtensions.readBoolExtension(i, ToolingExtensions.EXT_Q_OTP_DISP)) {
-        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-optionalDisplay.html"), null, "Is optional to display").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-optional.png"))));
+        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-optionalDisplay.html"), null, "Is optional to display").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", getImgPath("icon-qi-optional.png"))));
       }
       if (i.hasExtension("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod")) {
-        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-observationLinkPeriod.html"), null, "Is linked to an observation").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-observation.png"))));
+        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-observationLinkPeriod.html"), null, "Is linked to an observation").addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", getImgPath("icon-qi-observation.png"))));
       }
       if (i.hasExtension(ToolingExtensions.EXT_Q_CHOICE_ORIENT)) {
         String code = ToolingExtensions.readStringExtension(i,  ToolingExtensions.EXT_Q_CHOICE_ORIENT);
-        flags.addPiece(gen.new Piece(getSpecLink("extension-questionnaire-choiceorientation.html"), null, "Orientation: "+code).addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-"+code+".png"))));
+        flags.addPiece(gen.new Piece(getSpecLink("extension-questionnaire-choiceorientation.html"), null, "Orientation: "+code).addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", getImgPath("icon-qi-" + code + ".png"))));
       }
       if (i.hasExtension(ToolingExtensions.EXT_Q_DISPLAY_CAT)) {
         CodeableConcept cc = i.getExtensionByUrl(ToolingExtensions.EXT_Q_DISPLAY_CAT).getValueCodeableConcept();
         String code = cc.getCode("http://hl7.org/fhir/questionnaire-display-category");
-        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-displayCategory.html"), null, "Category: "+code).addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", Utilities.path(context.getLocalPrefix(), "icon-qi-"+code+".png"))));
+        flags.addPiece(gen.new Piece(getSDCLink("StructureDefinition-sdc-questionnaire-displayCategory.html"), null, "Category: "+code).addHtml(new XhtmlNode(NodeType.Element, "img").attribute("alt", "icon").attribute("src", getImgPath("icon-qi-" + code + ".png"))));
       }
     }    
     Cell defn = gen.new Cell();
@@ -690,26 +692,26 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
     
     if (ToolingExtensions.readBoolExtension(i, "http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-isSubject")) {
       hasFlag = true;
-      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-isSubject"), "Can change the subject of the questionnaire").img(Utilities.path(context.getLocalPrefix(), "icon-qi-subject.png"), "icon");
+      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-isSubject"), "Can change the subject of the questionnaire").img(getImgPath("icon-qi-subject.png"), "icon");
     }
     if (ToolingExtensions.readBoolExtension(i, ToolingExtensions.EXT_Q_HIDDEN)) {
       hasFlag = true;
-      flags.ah(Utilities.pathURL(context.getLink(KnownLinkType.SPEC), "extension-questionnaire-hidden.html"), "Is a hidden item").img(Utilities.path(context.getLocalPrefix(), "icon-qi-hidden.png"), "icon");
+      flags.ah(Utilities.pathURL(context.getLink(KnownLinkType.SPEC), "extension-questionnaire-hidden.html"), "Is a hidden item").img(getImgPath("icon-qi-hidden.png"), "icon");
       d.style("background-color: #eeeeee");
     }
     if (ToolingExtensions.readBoolExtension(i, ToolingExtensions.EXT_Q_OTP_DISP)) {
       hasFlag = true;
-      flags.ah(getSDCLink(ToolingExtensions.EXT_Q_OTP_DISP), "Is optional to display").img(Utilities.path(context.getLocalPrefix(), "icon-qi-optional.png"), "icon");
+      flags.ah(getSDCLink(ToolingExtensions.EXT_Q_OTP_DISP), "Is optional to display").img(getImgPath("icon-qi-optional.png"), "icon");
     }
     if (i.hasExtension("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod")) {
       hasFlag = true;
-      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod"), "Is linked to an observation").img(Utilities.path(context.getLocalPrefix(), "icon-qi-observation.png"), "icon");
+      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-observationLinkPeriod"), "Is linked to an observation").img(getImgPath("icon-qi-observation.png"), "icon");
     }
     if (i.hasExtension(ToolingExtensions.EXT_Q_DISPLAY_CAT)) {
       CodeableConcept cc = i.getExtensionByUrl(ToolingExtensions.EXT_Q_DISPLAY_CAT).getValueCodeableConcept();
       String code = cc.getCode("http://hl7.org/fhir/questionnaire-display-category");
       hasFlag = true;
-      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-displayCategory"), "Category: "+code).img(Utilities.path(context.getLocalPrefix(), "icon-qi-"+code+".png"), "icon");
+      flags.ah(getSDCLink("http://hl7.org/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-displayCategory"), "Category: "+code).img(getImgPath("icon-qi-" + code + ".png"), "icon");
     }
 
     if (i.hasMaxLength()) {
@@ -791,6 +793,13 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
     return hasExt; 
   }
 
+  @Nonnull
+  private String getImgPath(String code) throws IOException {
+      return context.getLocalPrefix().length() > 0
+        ? Utilities.path(context.getLocalPrefix(), code)
+        : Utilities.path(code);
+  }
+
   private void item(XhtmlNode ul, String name, String value, String valueLink) {
     if (!Utilities.noString(value)) {
       ul.li().style("font-size: 10px").ah(valueLink).tx(name+": "+value);
@@ -865,7 +874,7 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
     boolean ext = false;
     XhtmlNode td = tbl.tr().td("structure").colspan("2").span(null, null).attribute("class", "self-link-parent");
     td.an(q.getId());
-    td.img(Utilities.path(context.getLocalPrefix(), "icon_q_root.gif"), "icon");
+    td.img(getImgPath("icon_q_root.gif"), "icon");
     td.tx(" Questionnaire ");
     td.b().tx(q.getId());
     
@@ -918,10 +927,10 @@ public class QuestionnaireRenderer extends TerminologyRenderer {
     XhtmlNode td = tbl.tr().td("structure").colspan("2").span(null, null).attribute("class", "self-link-parent");
     td.an("item."+qi.getLinkId());
     for (QuestionnaireItemComponent p : parents) {
-      td.ah("#item."+p.getLinkId()).img(Utilities.path(context.getLocalPrefix(), "icon_q_item.png"), "icon");
+      td.ah("#item."+p.getLinkId()).img(getImgPath("icon_q_item.png"), "icon");
       td.tx(" > ");
     }
-    td.img(Utilities.path(context.getLocalPrefix(), "icon_q_item.png"), "icon");
+    td.img(getImgPath("icon_q_item.png"), "icon");
     td.tx(" Item ");
     td.b().tx(qi.getLinkId());
     

--- a/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java
+++ b/org.hl7.fhir.utilities/src/main/java/org/hl7/fhir/utilities/Utilities.java
@@ -613,39 +613,33 @@ public class Utilities {
     return s.toString();
   }
 
-
+  private static boolean isPathRoot(String pathString) {
+    boolean actual;
+    Path path = Path.of(pathString);
+    Path normalizedPath = path.normalize();
+    actual = normalizedPath.equals(path.getRoot());
+    return actual;
+  }
   public static String path(String... args) throws IOException {
     StringBuilder s = new StringBuilder();
-    boolean d = false;
-    boolean first = true;
+    boolean argIsNotEmptyOrNull = false;
+
+    if (args[0] == null || noString(args[0].trim())) {
+      throw new RuntimeException("First entry cannot be null or empty");
+    }
+
+    if (isPathRoot(args[0])) {
+      throw new RuntimeException("First entry cannot be root: " + args[0]);
+    }
+
     for (String arg : args) {
-      if (first && arg == null)
-        continue;
-      first = false;
-      if (!d)
-        d = !noString(arg);
+      if (!argIsNotEmptyOrNull)
+        argIsNotEmptyOrNull = !noString(arg);
       else if (!s.toString().endsWith(File.separator))
         s.append(File.separator);
       String a = arg;
       if (s.length() == 0) {
-        if ("[tmp]".equals(a)) {
-          if (hasCTempDir()) {
-            a = C_TEMP_DIR;
-          } else if (ToolGlobalSettings.hasTempPath()) {            
-            a = ToolGlobalSettings.getTempPath();
-          } else {
-            a = System.getProperty("java.io.tmpdir");
-          }
-        } else if ("[user]".equals(a)) {
-          a = System.getProperty("user.home");
-        } else if (a.startsWith("[") && a.endsWith("]")) {
-          String ev = System.getenv(a.replace("[", "").replace("]", ""));
-          if (ev != null) {
-            a = ev;
-          } else {
-            a = "null";
-          }
-        }
+        a = replaceVariables(a);
       }
       a = a.replace("\\", File.separator);
       a = a.replace("/", File.separator);
@@ -671,9 +665,34 @@ public class Utilities {
       } else
         s.append(a);
     }
+    if (!Path.of(s.toString()).normalize().startsWith(Path.of(replaceVariables(args[0])).normalize())) {
+     throw new RuntimeException("Computed path does not start with first element: " + String.join(", ", args));
+    }
     return s.toString();
   }
 
+  private static String replaceVariables(String a) {
+    if ("[tmp]".equals(a)) {
+      if (hasCTempDir()) {
+        return C_TEMP_DIR;
+      } else if (ToolGlobalSettings.hasTempPath()) {
+        return ToolGlobalSettings.getTempPath();
+      } else {
+        return System.getProperty("java.io.tmpdir");
+      }
+    } else if ("[user]".equals(a)) {
+      return System.getProperty("user.home");
+    } else if (a.startsWith("[") && a.endsWith("]")) {
+      String ev = System.getenv(a.replace("[", "").replace("]", ""));
+      if (ev != null) {
+        return ev;
+      } else {
+        return "null";
+      }
+    }
+    return a;
+  }
+
   private static boolean hasCTempDir() {
     if (!System.getProperty("os.name").toLowerCase().contains("win")) {
       return false;
