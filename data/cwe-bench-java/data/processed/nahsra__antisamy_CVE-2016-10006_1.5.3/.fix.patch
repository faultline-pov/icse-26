--- a/src/main/java/org/owasp/validator/html/scan/MagicSAXFilter.java
+++ b/src/main/java/org/owasp/validator/html/scan/MagicSAXFilter.java
@@ -224,34 +202,28 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
 
 	private CssScanner makeCssScanner() {
 		if (cssScanner == null) {
-      cssScanner = new CssScanner(policy, messages, shouldParseImportedStyles);
+            cssScanner = externalCssScanner ? new ExternalCssScanner(policy, messages) : new CssScanner(policy, messages);
 		}
 		return cssScanner;
 	}
 
-  @Override
-  public void processingInstruction(String target, XMLString data, Augmentations augs)
-      throws XNIException {
+	public void processingInstruction(String target, XMLString data, Augmentations augs) throws XNIException {
 		// processing instructions are being removed
 	}
 	
-  @Override
 	public void startCDATA(Augmentations augs) throws XNIException {
 		inCdata = true;
 		super.startCDATA(augs);
 	}
 	
-  @Override
 	public void endCDATA(Augmentations augs) throws XNIException {
 		inCdata = false;
 		super.endCDATA(augs);
 	}
 
-  @Override
-  public void startElement(QName element, XMLAttributes attributes, Augmentations augs)
-      throws XNIException {
+	public void startElement(QName element, XMLAttributes attributes, Augmentations augs) throws XNIException {
 		// see if we have a policy for this tag.
-    String tagNameLowerCase = element.getLocalpart().toLowerCase();
+        String tagNameLowerCase = element.localpart.toLowerCase();
         Tag tag = policy.getTagByLowercaseName(tagNameLowerCase);
 
 		/*
@@ -282,24 +254,22 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
 			// we are in removal-mode, so remove this tag as well
 			// we also remove all child elements of a style element
 			this.operations.push( Ops.REMOVE);
-    } else if ((tag == null && policy.isEncodeUnknownTag())
-        || (tag != null && tag.isAction(Policy.ACTION_ENCODE))) {
-      String name = "<" + element.getLocalpart() + ">";
+		} else if ((tag == null && policy.isEncodeUnknownTag()) || (tag != null && tag.isAction( "encode" ))) {
+			String name = "<" + element.localpart + ">";
 			super.characters( new XMLString( name.toCharArray(), 0, name.length() ), augs );
-      this.operations.push(Ops.ENCODE);
+			this.operations.push(Ops.FILTER);
 		} else if (tag == null) {
-      addError(
-          ErrorMessageUtil.ERROR_TAG_NOT_IN_POLICY,
-          new Object[] {HTMLEntityEncoder.htmlEntityEncode(element.getLocalpart())});
+			addError( ErrorMessageUtil.ERROR_TAG_NOT_IN_POLICY,
+                      new Object[]{ HTMLEntityEncoder.htmlEntityEncode( element.localpart ) } );
 			this.operations.push(Ops.FILTER);
-    } else if (tag.isAction(Policy.ACTION_FILTER)) {
-      addError(
-          ErrorMessageUtil.ERROR_TAG_FILTERED,
-          new Object[] {HTMLEntityEncoder.htmlEntityEncode(element.getLocalpart())});
+		} else if (tag.isAction( "filter")) {
+			addError(ErrorMessageUtil.ERROR_TAG_FILTERED, new Object[] {
+				HTMLEntityEncoder.htmlEntityEncode(element.localpart)
+			});
 			this.operations.push(Ops.FILTER);
 		} else if (tag.isAction( "validate")) {
 
-      boolean isStyle = "style".endsWith(element.getLocalpart());
+			boolean isStyle = "style".endsWith(element.localpart);
 
 				// validate all attributes, we need to do this now to find out
 				// how to deal with the element
@@ -313,84 +283,60 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
 					if (attribute == null) {
 						// no policy defined, perhaps it is a global attribute
 						attribute = policy.getGlobalAttributeByName(nameLower);
-          if (attribute == null && policy.isAllowDynamicAttributes()) {
-            // not a global attribute, perhaps it is a dynamic attribute, if allowed
-            attribute = policy.getDynamicAttributeByName(nameLower);
-          }
 					}
 					// boolean isAttributeValid = false;
 					if ("style".equalsIgnoreCase(name)) {
 						CssScanner styleScanner = makeCssScanner();
 						try {
-            CleanResults cr =
-                styleScanner.scanInlineStyle(value, element.getLocalpart(), maxInputSize);
+							CleanResults cr = styleScanner.scanInlineStyle(value, element.localpart, maxInputSize);
 							attributes.setValue(i, cr.getCleanHTML());
 							validattributes.addAttribute(makeSimpleQname(name), "CDATA", cr.getCleanHTML());
 							errorMessages.addAll(cr.getErrorMessages());
 						} catch (ScanException e) {
-            addError(
-                ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED,
-                new Object[] {element.getLocalpart(), HTMLEntityEncoder.htmlEntityEncode(value)});
+							addError(ErrorMessageUtil.ERROR_CSS_ATTRIBUTE_MALFORMED, new Object[] {
+									element.localpart, HTMLEntityEncoder.htmlEntityEncode(value)
+							});
 						}
 					} else if (attribute != null) {
 						// validate the values against the policy
 						boolean isValid = false;
-          if (attribute.containsAllowedValue(value.toLowerCase())
-              || attribute.matchesAllowedExpression(value)) {
-            int attrIndex;
-            if ((attrIndex = validattributes.getIndex(name)) > 0) {
-              // If attribute is repeated, use last value.
-              validattributes.setValue(attrIndex, value);
-            } else {
+                        if (attribute.containsAllowedValue(value.toLowerCase())) {
                             validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
-            }
                             isValid = true;
                         }
 
+
+                        if (!isValid) {
+                            isValid = attribute.matchesAllowedExpression(value);
+                            if (isValid) {
+                                validattributes.addAttribute(makeSimpleQname(name), "CDATA", value);
+                            }
+                        }
+
+
                         // if value or regexp matched, attribute is already
 						// copied, but what happens if not
 						if (!isValid && "removeTag".equals(attribute.getOnInvalid())) {
 							
-            addError(
-                ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
-                new Object[] {
-                  tag.getName(),
-                  HTMLEntityEncoder.htmlEntityEncode(name),
-                  HTMLEntityEncoder.htmlEntityEncode(value)
-                });
+							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID_REMOVED,
+								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
 							
 							removeTag = true;
 							
-          } else if (!isValid
-              && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
+						} else if (!isValid && ("filterTag".equals(attribute.getOnInvalid()) || masqueradingParam)) {
 							
-            addError(
-                ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER,
-                new Object[] {
-                  tag.getName(),
-                  HTMLEntityEncoder.htmlEntityEncode(name),
-                  HTMLEntityEncoder.htmlEntityEncode(value)
-                });
+							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_CAUSE_FILTER, 
+								new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
 							
 							filterTag = true;
 							
 						} else if (!isValid) {
-            addError(
-                ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID,
-                new Object[] {
-                  tag.getName(),
-                  HTMLEntityEncoder.htmlEntityEncode(name),
-                  HTMLEntityEncoder.htmlEntityEncode(value)
-                });
+							addError(ErrorMessageUtil.ERROR_ATTRIBUTE_INVALID, new Object[] { tag.getName(), HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value) });
 						}
 						
 					} else { // attribute == null
-          addError(
-              ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY,
-              new Object[] {
-                element.getLocalpart(),
-                HTMLEntityEncoder.htmlEntityEncode(name),
-                HTMLEntityEncoder.htmlEntityEncode(value)
+						addError(ErrorMessageUtil.ERROR_ATTRIBUTE_NOT_IN_POLICY, new Object[] {
+								element.localpart, HTMLEntityEncoder.htmlEntityEncode(name), HTMLEntityEncoder.htmlEntityEncode(value)
 						});
 						
 						if (masqueradingParam) {
@@ -409,37 +355,8 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
 					this.operations.push(Ops.FILTER);
 				} else {
 
-        if ("a".equals(element.getLocalpart())) {
-          boolean addNofollow = isNofollowAnchors;
-          boolean addNoopenerAndNoreferrer = false;
-
-          if (isNoopenerAndNoreferrerAnchors) {
-            String targetValue = attributes.getValue("target");
-            if (targetValue != null && targetValue.equalsIgnoreCase("_blank")) {
-              addNoopenerAndNoreferrer = true;
-            }
-          }
-
-          String currentRelValue = attributes.getValue("rel");
-          if (currentRelValue != null) {
-            Attribute attribute = tag.getAttributeByName("rel");
-            if (attribute != null
-                && !(attribute.containsAllowedValue(currentRelValue)
-                    || attribute.matchesAllowedExpression(currentRelValue))) {
-              currentRelValue = "";
-            }
-          }
-          String relValue =
-              Attribute.mergeRelValuesInAnchor(
-                  addNofollow, addNoopenerAndNoreferrer, currentRelValue);
-          if (!relValue.isEmpty()) {
-            int relIndex;
-            if ((relIndex = validattributes.getIndex("rel")) > 0) {
-              validattributes.setValue(relIndex, relValue);
-            } else {
-              validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", relValue);
-            }
-          }
+					if (isNofollowAnchors && "a".equals(element.localpart)) {
+						validattributes.addAttribute(makeSimpleQname("rel"), "CDATA", "nofollow");
 					}
 
 					if (masqueradingParam) {
@@ -451,13 +368,13 @@ public class MagicSAXFilter extends DefaultFilter implements XMLDocumentFilter {
 					this.operations.push(Ops.KEEP);
 				}
 			
-    } else if (tag.isAction(Policy.ACTION_TRUNCATE)) {
+		} else if (tag.isAction( "truncate")) {
 			this.operations.push(Ops.TRUNCATE);
 		} else {
 			// no options left, so the tag will be removed
-      addError(
-          ErrorMessageUtil.ERROR_TAG_DISALLOWED,
-          new Object[] {HTMLEntityEncoder.htmlEntityEncode(element.getLocalpart())});
+			addError(ErrorMessageUtil.ERROR_TAG_DISALLOWED, new Object[] {
+				HTMLEntityEncoder.htmlEntityEncode(element.localpart)
+			});
 			this.operations.push(Ops.REMOVE);
 		}
 		// now we know exactly what to do, let's do it
