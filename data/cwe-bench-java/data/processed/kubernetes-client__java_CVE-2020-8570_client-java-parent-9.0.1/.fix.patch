--- a/util/src/main/java/io/kubernetes/client/Copy.java
+++ b/util/src/main/java/io/kubernetes/client/Copy.java
@@ -120,6 +125,35 @@ public class Copy extends Exec {
     if (!isTarPresentInContainer(namespace, pod, container)) {
       throw new CopyNotSupportedException("Tar is not present in the target container");
     }
+    copyDirectoryFromPod(namespace, pod, container, srcPath, destination, true);
+  }
+
+  /**
+   * Copy directory from a pod to local.
+   *
+   * @param namespace
+   * @param pod
+   * @param container
+   * @param srcPath
+   * @param destination
+   * @param enableTarCompressing: false if tar is not present in target container
+   * @throws IOException
+   * @throws ApiException
+   */
+  public void copyDirectoryFromPod(
+      String namespace,
+      String pod,
+      String container,
+      String srcPath,
+      Path destination,
+      boolean enableTarCompressing)
+      throws IOException, ApiException {
+    if (!enableTarCompressing) {
+      TreeNode tree = new TreeNode(true, srcPath, true);
+      createDirectoryTree(tree, namespace, pod, container, srcPath);
+      createDirectoryStructureFromTree(tree, namespace, pod, container, srcPath, destination);
+      return;
+    }
     final Process proc =
         this.exec(
             namespace,
@@ -137,7 +171,11 @@ public class Copy extends Exec {
           log.error("Can't read: " + entry);
           continue;
         }
-        File f = new File(destination.toFile(), entry.getName());
+        String normalName = FilenameUtils.normalize(entry.getName());
+        if (normalName == null) {
+          throw new IOException("Invalid entry: " + entry.getName());
+        }
+        File f = new File(destination.toFile(), normalName);
         if (entry.isDirectory()) {
           if (!f.isDirectory() && !f.mkdirs()) {
             throw new IOException("create directory failed: " + f);
