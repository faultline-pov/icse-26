--- a/src/main/java/org/owasp/validator/html/scan/AntiSamyDOMScanner.java
+++ b/src/main/java/org/owasp/validator/html/scan/AntiSamyDOMScanner.java
@@ -139,7 +121,6 @@ public class AntiSamyDOMScanner extends AbstractAntiSamyScanner {
         }
 
         isNofollowAnchors = policy.isNofollowAnchors();
-    isNoopenerAndNoreferrerAnchors = policy.isNoopenerAndNoreferrerAnchors();
         isValidateParamAsEmbed = policy.isValidateParamAsEmbed();
 
         long startOfScan = System.currentTimeMillis();
@@ -166,6 +147,7 @@ public class AntiSamyDOMScanner extends AbstractAntiSamyScanner {
              * W3C.
              */
 
+
             DOMFragmentParser parser = cachedItem.getDomFragmentParser();
 
             try {
@@ -181,6 +163,7 @@ public class AntiSamyDOMScanner extends AbstractAntiSamyScanner {
              * its string representation.
              */
 
+
             final String trimmedHtml = html;
 
             StringWriter out = new StringWriter();
@@ -198,15 +181,13 @@ public class AntiSamyDOMScanner extends AbstractAntiSamyScanner {
                     */
             final String trimmed = trim( trimmedHtml, out.getBuffer().toString() );
 
-      Callable<String> cleanHtml =
-          new Callable<String>() {
-            @Override
+            Callable<String> cleanHtml = new Callable<String>() {
                 public String call() throws Exception {
                     return trimmed;
                 }
             };
 
-      /*
+            /**
              * Return the DOM object as well as string HTML.
              */
             results = new CleanResults(startOfScan, cleanHtml, dom, errorMessages);
@@ -214,9 +195,14 @@ public class AntiSamyDOMScanner extends AbstractAntiSamyScanner {
             cachedItems.add( cachedItem);
             return results;
 
-    } catch (SAXException | IOException e) {
+
+        } catch (SAXException e) {
+            throw new ScanException(e);
+        }
+        catch ( IOException e ) {
             throw new ScanException(e);
         }
+
     }
 
     static DOMFragmentParser getDomParser()
@@ -226,16 +212,23 @@ public class AntiSamyDOMScanner extends AbstractAntiSamyScanner {
 
         parser.setFeature("http://cyberneko.org/html/features/scanner/style/strip-cdata-delims", false);
         parser.setFeature("http://cyberneko.org/html/features/scanner/cdata-sections", true);
-    parser.setFeature("http://cyberneko.org/html/features/parse-noscript-content", false);
 
+        try {
+            parser.setFeature("http://cyberneko.org/html/features/enforce-strict-attribute-names", true);
+        } catch (SAXNotRecognizedException se) {
+            // this indicates that the patched nekohtml is not on the
+            // classpath
+        }
         return parser;
     }
 
     /**
-   * The workhorse of the scanner. Recursively scans document elements according to the policy. This
-   * should be called implicitly through the AntiSamy.scan() method.
+     * The workhorse of the scanner. Recursively scans document elements
+     * according to the policy. This should be called implicitly through the
+     * AntiSamy.scan() method.
      *
-   * @param node The node to validate.
+     * @param node
+     *            The node to validate.
      */
     private void recursiveValidateTag(final Node node, int currentStackDepth) throws ScanException {
 

--- a/src/main/java/org/owasp/validator/html/Policy.java
+++ b/src/main/java/org/owasp/validator/html/Policy.java
@@ -675,22 +527,20 @@ public class Policy {
      * @param root                      Top level of <common-regexps>
      * @param commonRegularExpressions1 the antisamy pattern objects
      */
-  private static void parseCommonRegExps(
-      Element root, Map<String, AntiSamyPattern> commonRegularExpressions1) {
+    private static void parseCommonRegExps(Element root, Map<String, AntiSamyPattern> commonRegularExpressions1) {
         for (Element ele : getByTagName(root, "regexp")) {
 
             String name = getAttributeValue(ele, "name");
-      Pattern pattern = Pattern.compile(getAttributeValue(ele, "value"), Pattern.DOTALL);
+            Pattern pattern = Pattern.compile(getAttributeValue(ele, "value"));
+
             commonRegularExpressions1.put(name, new AntiSamyPattern(pattern));
         }
     }
 
-  private static void parseCommonAttributes(
-      Element root,
-      Map<String, Attribute> commonAttributes1,
-      Map<String, AntiSamyPattern> commonRegularExpressions1) {
 
+    private static void parseCommonAttributes(Element root, Map<String, Attribute> commonAttributes1, Map<String, AntiSamyPattern> commonRegularExpressions1) {
         for (Element ele : getByTagName(root, "attribute")) {
+
             String onInvalid = getAttributeValue(ele, "onInvalid");
             String name = getAttributeValue(ele, "name");
 
@@ -700,16 +550,13 @@ public class Policy {
             final String onInvalidStr;
             if (onInvalid != null && onInvalid.length() > 0) {
                 onInvalidStr = onInvalid;
-      } else onInvalidStr = DEFAULT_ONINVALID;
-
+            } else {
+                onInvalidStr = DEFAULT_ONINVALID;
+            }
             String description = getAttributeValue(ele, "description");
-      Attribute attribute =
-          new Attribute(
-              getAttributeValue(ele, "name"),
-              allowedRegexps,
-              allowedValues,
-              onInvalidStr,
-              description);
+            Attribute attribute = new Attribute(getAttributeValue(ele, "name"), allowedRegexps, allowedValues, onInvalidStr, description);
+
+
             commonAttributes1.put(name.toLowerCase(), attribute);
         }
     }
@@ -737,14 +584,14 @@ public class Policy {
 
             if (regExpName != null && regExpName.length() > 0) {
                 allowedRegExp.add(commonRegularExpressions1.get(regExpName).getPattern());
-      } else allowedRegExp.add(Pattern.compile(value, Pattern.DOTALL));
+            } else {
+                allowedRegExp.add(Pattern.compile(value));
+            }
         }
         return allowedRegExp;
     }
 
-  private static List<Pattern> getAllowedRegexps2(
-      Map<String, AntiSamyPattern> commonRegularExpressions1, Element attributeNode, String tagName)
-      throws PolicyException {
+    private static List<Pattern> getAllowedRegexps2(Map<String, AntiSamyPattern> commonRegularExpressions1, Element attributeNode, String tagName) throws PolicyException {
         List<Pattern> allowedRegexps = new ArrayList<Pattern>();
         for (Element regExpNode : getGrandChildrenByTagName(attributeNode, "regexp-list", "regexp")) {
             String regExpName = getAttributeValue(regExpNode, "name");
@@ -758,27 +605,22 @@ public class Policy {
             * one or the other, not both.
             */
             if (regExpName != null && regExpName.length() > 0) {
+
                 AntiSamyPattern pattern = commonRegularExpressions1.get(regExpName);
                 if (pattern != null) {
                     allowedRegexps.add(pattern.getPattern());
-        } else
-          throw new PolicyException(
-              "Regular expression '"
-                  + regExpName
-                  + "' was referenced as a common regexp in definition of '"
-                  + tagName
-                  + "', but does not exist in <common-regexp>");
+                } else {
+                    throw new PolicyException("Regular expression '" + regExpName + "' was referenced as a common regexp in definition of '" + tagName + "', but does not exist in <common-regexp>");
+                }
+
             } else if (value != null && value.length() > 0) {
-        allowedRegexps.add(Pattern.compile(value, Pattern.DOTALL));
+                allowedRegexps.add(Pattern.compile(value));
             }
         }
         return allowedRegexps;
     }
 
-  private static List<Pattern> getAllowedRegexp3(
-      Map<String, AntiSamyPattern> commonRegularExpressions1, Element ele, String name)
-      throws PolicyException {
-
+    private static List<Pattern> getAllowedRegexp3(Map<String, AntiSamyPattern> commonRegularExpressions1, Element ele, String name) throws PolicyException {
         List<Pattern> allowedRegExp = new ArrayList<Pattern>();
         for (Element regExpNode : getGrandChildrenByTagName(ele, "regexp-list", "regexp")) {
             String regExpName = getAttributeValue(regExpNode, "name");
@@ -789,57 +631,48 @@ public class Policy {
             if (pattern != null) {
                 allowedRegExp.add(pattern.getPattern());
             } else if (value != null) {
-        allowedRegExp.add(Pattern.compile(value, Pattern.DOTALL));
-      } else
-        throw new PolicyException(
-            "Regular expression '"
-                + regExpName
-                + "' was referenced as a common regexp in definition of '"
-                + name
-                + "', but does not exist in <common-regexp>");
+                allowedRegExp.add(Pattern.compile(value));
+            } else {
+                throw new PolicyException("Regular expression '" + regExpName + "' was referenced as a common regexp in definition of '" + name + "', but does not exist in <common-regexp>");
+            }
         }
         return allowedRegExp;
     }
     
-  private static void parseTagRules(
-      Element root,
-      Map<String, Attribute> commonAttributes1,
-      Map<String, AntiSamyPattern> commonRegularExpressions1,
-      Map<String, Tag> tagRules1)
-      throws PolicyException {
+    private static void parseTagRules(Element root, Map<String, Attribute> commonAttributes1, Map<String, AntiSamyPattern> commonRegularExpressions1, Map<String, Tag> tagRules1) throws PolicyException {
 
         if (root == null) return;
 
         for (Element tagNode : getByTagName(root, "tag")) {
+
             String name = getAttributeValue(tagNode, "name");
             String action = getAttributeValue(tagNode, "action");
 
             NodeList attributeList = tagNode.getElementsByTagName("attribute");
-      Map<String, Attribute> tagAttributes =
-          getTagAttributes(commonAttributes1, commonRegularExpressions1, attributeList, name);
+            Map<String, Attribute> tagAttributes = getTagAttributes(commonAttributes1, commonRegularExpressions1, attributeList, name);
             Tag tag = new Tag(name, tagAttributes, action);
 
             tagRules1.put(name.toLowerCase(), tag);
         }
     }
 
-  private static Map<String, Attribute> getTagAttributes(
-      Map<String, Attribute> commonAttributes1,
-      Map<String, AntiSamyPattern> commonRegularExpressions1,
-      NodeList attributeList,
-      String tagName)
-      throws PolicyException {
-
+    private static Map<String, Attribute> getTagAttributes(Map<String, Attribute> commonAttributes1, Map<String, AntiSamyPattern> commonRegularExpressions1, NodeList attributeList, String tagName) throws PolicyException {
         Map<String,Attribute> tagAttributes = new HashMap<String, Attribute>();
         for (int j = 0; j < attributeList.getLength(); j++) {
+
             Element attributeNode = (Element) attributeList.item(j);
 
             String attrName = getAttributeValue(attributeNode, "name").toLowerCase();
             if (!attributeNode.hasChildNodes()) {
+
                 Attribute attribute = commonAttributes1.get(attrName);
 
-        // All they provided was the name, so they must want a common attribute.
+                /*
+                      * All they provided was the name, so they must want a common
+                      * attribute.
+                      */
                 if (attribute != null) {
+
                     /*
                            * If they provide onInvalid/description values here they will
                            * override the common values.

--- a/src/main/java/org/owasp/validator/html/scan/AntiSamySAXScanner.java
+++ b/src/main/java/org/owasp/validator/html/scan/AntiSamySAXScanner.java
