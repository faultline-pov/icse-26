--- a/ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java
+++ b/ff4j-config-properties/src/main/java/org/ff4j/parser/properties/PropertiesParser.java
@@ -230,7 +230,11 @@ public class PropertiesParser implements FF4jConfigurationParser<FF4jConfigurati
                 optionalType = MappingUtil.mapPropertyType(optionalType);
                 try {
                     // Constructor (String, String) is mandatory in Property interface
-                    Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);
+                    Class<?> typeClass = Class.forName(optionalType);
+                    if (!Property.class.isAssignableFrom(typeClass)) {
+                        throw new IllegalArgumentException("Cannot create property <" + name + "> invalid type <" + optionalType + ">");
+                    }
+                    Constructor<?> constr = typeClass.getConstructor(String.class, String.class);
                     ap = (Property<?>) constr.newInstance(name, strValue);
                 } catch (Exception e) {
                     throw new IllegalArgumentException("Cannot instantiate '" + optionalType + "' check default constructor", e);
@@ -308,7 +312,11 @@ public class PropertiesParser implements FF4jConfigurationParser<FF4jConfigurati
             if (null != flipStrategyClass && !"".equals(flipStrategyClass)) {
                 FlippingStrategy flipStrategy = null;
                 try {
-                    flipStrategy = (FlippingStrategy) Class.forName(flipStrategyClass).newInstance();
+                    Class<?> typeClass = Class.forName(flipStrategyClass);
+                    if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {
+                        throw new IllegalArgumentException("Cannot create flipstrategy <" + flipStrategyClass + "> invalid type");
+                    }
+                    flipStrategy = (FlippingStrategy) typeClass.newInstance();
                 } catch (Exception e) {
                     throw new IllegalArgumentException("Cannot parse flipStrategy for feature '" + f.getUid() + 
                             "' -> check key [" + currentFeatureKey +  "." + TOGGLE_STRATEGY_TAG + "." + TOGGLE_STRATEGY_ATTCLASS + "]", e);

--- a/ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java
+++ b/ff4j-web/src/main/java/org/ff4j/web/embedded/ConsoleOperations.java
@@ -105,6 +105,9 @@ public final class ConsoleOperations {
             if (null != strategy && !strategy.isEmpty()) {
                 try {
                     Class<?> strategyClass = Class.forName(strategy);
+                    if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {
+                        throw new IllegalArgumentException("Cannot create flipstrategy: <" + strategy + "> invalid type");
+                    }
                     FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();
 
                     final String strategyParams = req.getParameter(STRATEGY_INIT);
@@ -246,6 +249,9 @@ public final class ConsoleOperations {
         if (null != strategy && !strategy.isEmpty()) {
             try {
                 Class<?> strategyClass = Class.forName(strategy);
+                if (!FlippingStrategy.class.isAssignableFrom(strategyClass)) {
+                    throw new IllegalArgumentException("Cannot create flipstrategy <" + strategy + "> invalid type");
+                }
                 FlippingStrategy fstrategy = (FlippingStrategy) strategyClass.newInstance();
                
                 if (null != strategyParams && !strategyParams.isEmpty()) {

--- a/ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java
+++ b/ff4j-core/src/main/java/org/ff4j/utils/MappingUtil.java
@@ -181,6 +181,9 @@ public class MappingUtil {
 	public static FlippingStrategy instanceFlippingStrategy(String uid, String className,  Map<String, String> initparams) {
         try {
             Class<FlippingStrategy> clazz = (Class<FlippingStrategy>) (classLoader == null ? Class.forName(className) : classLoader.loadClass(className));
+            if (!FlippingStrategy.class.isAssignableFrom(clazz)) {
+                throw new IllegalArgumentException("Invalid type " + className );
+            }
             FlippingStrategy flipStrategy = clazz.newInstance();
             flipStrategy.init(uid, initparams);
             return flipStrategy;

--- a/ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java
+++ b/ff4j-core/src/main/java/org/ff4j/property/util/PropertyFactory.java
@@ -160,7 +160,11 @@ public class PropertyFactory {
         Util.assertNotNull(pType);
         Property<?> ap = null;
         try {
-            Constructor<?> constr = Class.forName(pType).getConstructor(String.class, String.class);
+            Class<?> typeClass = Class.forName(pType);
+            if (!Property.class.isAssignableFrom(typeClass)) {
+                throw new IllegalArgumentException("Cannot create property <" + pName + "> invalid type <" + pType + ">");
+            }
+            Constructor<?> constr = typeClass.getConstructor(String.class, String.class);
             ap = (Property<?>) constr.newInstance(pName, pValue);
             ap.setDescription(desc);
             // Is there any fixed Value ?

--- a/ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java
+++ b/ff4j-core/src/main/java/org/ff4j/conf/XmlParser.java
@@ -384,7 +384,11 @@ public final class XmlParser implements FF4jConfigurationParser<XmlConfig>{
                 
                 try {
                     // Constructor (String, String) is mandatory in Property interface
-                    Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);
+                    Class<?> typeClass = Class.forName(optionalType);
+                    if (!Property.class.isAssignableFrom(typeClass)) {
+                        throw new IllegalArgumentException("Cannot create property <" + name + "> invalid type <" + optionalType + ">");
+                    }
+                    Constructor<?> constr = typeClass.getConstructor(String.class, String.class);
                     ap = (Property<?>) constr.newInstance(name, value);
                 } catch (Exception e) {
                     throw new IllegalArgumentException("Cannot instantiate '" + optionalType + "' check default constructor", e);
@@ -440,7 +444,11 @@ public final class XmlParser implements FF4jConfigurationParser<XmlConfig>{
         try {
             // Attribute CLASS
             String clazzName = nnm.getNamedItem(FLIPSTRATEGY_ATTCLASS).getNodeValue();
-            flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();
+            Class<?> typeClass = Class.forName(clazzName);
+            if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {
+                throw new IllegalArgumentException("Cannot create flipstrategy <" + clazzName + "> invalid type");
+            }
+            flipStrategy = (FlippingStrategy) typeClass.newInstance();
 
             // LIST OF PARAMS
             Map<String, String> parameters = new LinkedHashMap<String, String>();

--- a/ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java
+++ b/ff4j-config-yaml/src/main/java/org/ff4j/parser/yaml/YamlParser.java
@@ -172,7 +172,11 @@ public class YamlParser implements FF4jConfigurationParser<FF4jConfiguration> {
                     optionalType = MappingUtil.mapPropertyType(optionalType);
                     try {
                         // Constructor (String, String) is mandatory in Property interface
-                        Constructor<?> constr = Class.forName(optionalType).getConstructor(String.class, String.class);
+                        Class<?> typeClass = Class.forName(optionalType);
+                        if (!Property.class.isAssignableFrom(typeClass)) {
+                            throw new IllegalArgumentException("Cannot create property <" + name + "> invalid type <" + optionalType + ">");
+                        }
+                        Constructor<?> constr = typeClass.getConstructor(String.class, String.class);
                         ap = (Property<?>) constr.newInstance(name, strValue);
                     } catch (Exception e) {
                         throw new IllegalArgumentException("Cannot instantiate '" + optionalType + "' check default constructor", e);
@@ -251,7 +255,11 @@ public class YamlParser implements FF4jConfigurationParser<FF4jConfiguration> {
         try {
             // Parse class
             String clazzName = (String) toggleStrategy.get(TOGGLE_STRATEGY_ATTCLASS);
-            FlippingStrategy flipStrategy = (FlippingStrategy) Class.forName(clazzName).newInstance();
+            Class<?> typeClass = Class.forName(clazzName);
+            if (!FlippingStrategy.class.isAssignableFrom(typeClass)) {
+                throw new IllegalArgumentException("Cannot create flipstrategy <" + clazzName + "> invalid type");
+            }
+            FlippingStrategy flipStrategy = (FlippingStrategy) typeClass.newInstance();
             // Parse Params
             List<Map<String, Object>> mapYamlParam = (List<Map<String, Object>>) toggleStrategy.get(TOGGLE_STRATEGY_PARAMTAG);
             Map<String,String> params = new HashMap<>();
