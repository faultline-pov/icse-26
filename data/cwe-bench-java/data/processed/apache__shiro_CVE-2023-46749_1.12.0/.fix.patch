--- a/web/src/main/java/org/apache/shiro/web/filter/InvalidRequestFilter.java
+++ b/web/src/main/java/org/apache/shiro/web/filter/InvalidRequestFilter.java
@@ -55,32 +60,44 @@ public class InvalidRequestFilter extends AccessControlFilter {
 
     private boolean blockSemicolon = true;
 
-    private boolean blockBackslash = !Boolean.getBoolean(WebUtils.ALLOW_BACKSLASH);
+    private boolean blockBackslash = !WebUtils.isAllowBackslash();
 
     private boolean blockNonAscii = true;
 
     private boolean blockTraversal = true;
 
+    private boolean blockEncodedPeriod = true;
+
+    private boolean blockEncodedForwardSlash = true;
+
+    private boolean blockRewriteTraversal = true;
+
     @Override
     protected boolean isAccessAllowed(ServletRequest req, ServletResponse response, Object mappedValue) throws Exception {
         HttpServletRequest request = WebUtils.toHttp(req);
         // check the original and decoded values
-        return isValid(request.getRequestURI())      // user request string (not decoded)
-                && isValid(request.getServletPath()) // decoded servlet part
-                && isValid(request.getPathInfo());   // decoded path info (may be null)
+        // user request string (not decoded)
+        return isValid(request.getRequestURI())
+                // decoded servlet part
+                && isValid(request.getServletPath())
+                // decoded path info (may be null)
+                && isValid(request.getPathInfo());
     }
 
+    @SuppressWarnings("checkstyle:BooleanExpressionComplexity")
     private boolean isValid(String uri) {
         return !StringUtils.hasText(uri)
                || (!containsSemicolon(uri)
                  && !containsBackslash(uri)
-                 && !containsNonAsciiCharacters(uri))
-                 && !containsTraversal(uri);
+                 && !containsNonAsciiCharacters(uri)
+                 && !containsTraversal(uri)
+                 && !containsEncodedPeriods(uri)
+                 && !containsEncodedForwardSlash(uri));
     }
 
     @Override
     protected boolean onAccessDenied(ServletRequest request, ServletResponse response) throws Exception {
-        WebUtils.toHttp(response).sendError(400, "Invalid request");
+        WebUtils.toHttp(response).sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid request");
         return false;
     }
 
@@ -118,9 +135,22 @@ public class InvalidRequestFilter extends AccessControlFilter {
 
     private boolean containsTraversal(String uri) {
         if (isBlockTraversal()) {
-            return !(isNormalized(uri)
-                    && PERIOD.stream().noneMatch(uri::contains)
-                    && FORWARDSLASH.stream().noneMatch(uri::contains));
+            return !isNormalized(uri)
+                || (isBlockRewriteTraversal() && Stream.of("/..;", "/.;").anyMatch(uri::contains));
+        }
+        return false;
+    }
+
+    private boolean containsEncodedPeriods(String uri) {
+        if (isBlockEncodedPeriod()) {
+            return PERIOD.stream().anyMatch(uri::contains);
+        }
+        return false;
+    }
+
+    private boolean containsEncodedForwardSlash(String uri) {
+        if (isBlockEncodedForwardSlash()) {
+            return FORWARDSLASH.stream().anyMatch(uri::contains);
         }
         return false;
     }
@@ -128,6 +158,7 @@ public class InvalidRequestFilter extends AccessControlFilter {
     /**
      * Checks whether a path is normalized (doesn't contain path traversal sequences like
      * "./", "/../" or "/.")
+     *
      * @param path the path to test
      * @return true if the path doesn't contain any path-traversal character sequences.
      */
