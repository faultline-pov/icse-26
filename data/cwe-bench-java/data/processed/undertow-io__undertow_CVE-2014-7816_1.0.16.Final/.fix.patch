--- a/servlet/src/main/java/io/undertow/servlet/handlers/ServletPathMatches.java
+++ b/servlet/src/main/java/io/undertow/servlet/handlers/ServletPathMatches.java
@@ -126,9 +127,12 @@ public class ServletPathMatches {
     }
 
     private ServletPathMatch findWelcomeFile(final String path, boolean requiresRedirect) {
+        if(File.separatorChar != '/' && path.contains(File.separator)) {
+            return null;
+        }
         for (String i : welcomePages) {
             try {
-                String mergedPath = path + i;
+                final String mergedPath = path + i;
                 Resource resource = resourceManager.getResource(mergedPath);
                 if (resource != null) {
                     final ServletPathMatch handler = data.getServletHandlerByPath(mergedPath);

--- a/core/src/main/java/io/undertow/server/handlers/resource/ResourceHandler.java
+++ b/core/src/main/java/io/undertow/server/handlers/resource/ResourceHandler.java
@@ -128,7 +160,11 @@ public class ResourceHandler implements HttpHandler {
             public void run() {
                 Resource resource = null;
                 try {
-                    resource = resourceManager.getResource(exchange.getRelativePath());
+                    if(File.separatorChar == '/' || !exchange.getRelativePath().contains(File.separator)) {
+                        //we don't process resources that contain the sperator character if this is not /
+                        //this prevents attacks where people use windows path seperators in file URLS's
+                        resource = resourceManager.getResource(canonicalize(exchange.getRelativePath()));
+                    }
                 } catch (IOException e) {
                     UndertowLogger.REQUEST_IO_LOGGER.ioException(e);
                     exchange.setResponseCode(500);
@@ -186,11 +222,14 @@ public class ResourceHandler implements HttpHandler {
                 //todo: handle range requests
                 //we are going to proceed. Set the appropriate headers
                 final String contentType = resource.getContentType(mimeMappings);
+
+                if(!exchange.getResponseHeaders().contains(Headers.CONTENT_TYPE)) {
                     if (contentType != null) {
                         exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, contentType);
                     } else {
                         exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/octet-stream");
                     }
+                }
                 if (lastModified != null) {
                     exchange.getResponseHeaders().put(Headers.LAST_MODIFIED, resource.getLastModifiedString());
                 }

--- a/servlet/src/main/java/io/undertow/servlet/handlers/DefaultServlet.java
+++ b/servlet/src/main/java/io/undertow/servlet/handlers/DefaultServlet.java
@@ -126,12 +127,22 @@ public class DefaultServlet extends HttpServlet {
 
     @Override
     protected void doGet(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException {
-        final String path = getPath(req);
-        if (!isAllowed(path)) {
+        String path = getPath(req);
+        if (!isAllowed(path, req.getDispatcherType())) {
             resp.sendError(404);
             return;
         }
-        final Resource resource = resourceManager.getResource(path);
+        if(File.separatorChar != '/') {
+            //if the separator char is not / we want to replace it with a / and canonicalise
+            path = CanonicalPathUtils.canonicalize(path.replace(File.separatorChar, '/'));
+        }
+        final Resource resource;
+        //we want to disallow windows characters in the path
+        if(File.separatorChar == '/' || !path.contains(File.separator)) {
+            resource = resourceManager.getResource(path);
+        } else {
+            resource = null;
+        }
         if (resource == null) {
             if (req.getDispatcherType() == DispatcherType.INCLUDE) {
                 //servlet 9.3
